<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/calendar/DayView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/calendar/DayView.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { Appointment, AppointmentStatus } from '../../types/Appointment';&#10;&#10;interface DayViewProps {&#10;  currentDate: Date;&#10;  appointments: Appointment[];&#10;  onTimeSlotClick: (date: string, time: string) =&gt; void;&#10;  onAppointmentClick: (appointment: Appointment) =&gt; void;&#10;  onAppointmentDrop?: (appointment: Appointment, newDate: string, newTime: string) =&gt; void;&#10;  getAppointmentDate: (apt: Appointment) =&gt; string;&#10;  formatAppointmentTime: (apt: Appointment) =&gt; string;&#10;  getAppointmentDuration: (apt: Appointment) =&gt; number;&#10;  getAppointmentBackgroundColor: (status: AppointmentStatus) =&gt; string;&#10;  getAppointmentTextColor: (status: AppointmentStatus) =&gt; string;&#10;  getPatientName: (apt: Appointment) =&gt; string;&#10;  // Add drag and drop props similar to WeeklyView&#10;  handleMouseUp: () =&gt; void;&#10;  handleMouseDown: (e: React.MouseEvent, date: string, time: string) =&gt; void;&#10;  handleMouseEnter: (date: string, time: string) =&gt; void;&#10;  isSlotSelected: (date: string, time: string) =&gt; boolean;&#10;  workingHours?: {&#10;    startTime: string;&#10;    endTime: string;&#10;  };&#10;  workingDays?: string[];&#10;}&#10;&#10;export const DayView: React.FC&lt;DayViewProps&gt; = ({&#10;  currentDate,&#10;  appointments,&#10;  onTimeSlotClick,&#10;  onAppointmentClick,&#10;  onAppointmentDrop,&#10;  getAppointmentDate,&#10;  formatAppointmentTime,&#10;  getAppointmentDuration,&#10;  getAppointmentBackgroundColor,&#10;  getAppointmentTextColor,&#10;  getPatientName,&#10;  handleMouseUp,&#10;  handleMouseDown,&#10;  handleMouseEnter,&#10;  isSlotSelected,&#10;  workingHours = { startTime: '08:00', endTime: '17:00' },&#10;  workingDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],&#10;}) =&gt; {&#10;  const [draggedAppointment, setDraggedAppointment] = React.useState&lt;Appointment | null&gt;(null);&#10;  const [dragPreviewPosition, setDragPreviewPosition] = React.useState&lt;{date: string, time: string} | null&gt;(null);&#10;&#10;  // Check if current date is a working day&#10;  const isWorkingDay = (): boolean =&gt; {&#10;    const dayName = currentDate.toLocaleDateString('en-US', { weekday: 'long' });&#10;    return workingDays.includes(dayName);&#10;  };&#10;&#10;  const isWorking = isWorkingDay();&#10;&#10;  // Generate time slots based on working hours&#10;  const generateTimeSlots = () =&gt; {&#10;    const startHour = parseInt(workingHours.startTime.split(':')[0]);&#10;    const endHour = parseInt(workingHours.endTime.split(':')[0]);&#10;    const totalHours = endHour - startHour;&#10;    const slotsPerHour = 4; // 15-minute intervals&#10;    const totalSlots = totalHours * slotsPerHour;&#10;&#10;    return Array.from({ length: totalSlots }, (_, i) =&gt; {&#10;      const hour = Math.floor(i / slotsPerHour) + startHour;&#10;      const minutes = (i % slotsPerHour) * 15;&#10;      return `${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;&#10;    });&#10;  };&#10;&#10;  const timeSlots = generateTimeSlots();&#10;&#10;  // Handle appointment drag start&#10;  const handleAppointmentDragStart = (e: React.DragEvent, appointment: Appointment) =&gt; {&#10;    e.stopPropagation();&#10;    setDraggedAppointment(appointment);&#10;    e.dataTransfer.setData('text/plain', appointment.id);&#10;    e.dataTransfer.effectAllowed = 'move';&#10;  };&#10;&#10;  // Handle appointment drag end&#10;  const handleAppointmentDragEnd = () =&gt; {&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drop on time slot&#10;  const handleTimeSlotDrop = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.stopPropagation();&#10;&#10;    if (draggedAppointment &amp;&amp; onAppointmentDrop) {&#10;      onAppointmentDrop(draggedAppointment, date, time);&#10;    }&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drag over to allow drop and show preview&#10;  const handleTimeSlotDragOver = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.dataTransfer.dropEffect = 'move';&#10;&#10;    if (draggedAppointment) {&#10;      setDragPreviewPosition({ date, time });&#10;    }&#10;  };&#10;&#10;  // Handle drag leave to hide preview when leaving time slot&#10;  const handleTimeSlotDragLeave = (e: React.DragEvent) =&gt; {&#10;    // Only hide preview if we're actually leaving the time slot area&#10;    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();&#10;    const { clientX, clientY } = e;&#10;&#10;    if (clientX &lt; rect.left || clientX &gt; rect.right || clientY &lt; rect.top || clientY &gt; rect.bottom) {&#10;      setDragPreviewPosition(null);&#10;    }&#10;  };&#10;&#10;  const dayStr = currentDate.toISOString().split('T')[0];&#10;&#10;  return (&#10;    &lt;div className=&quot;card overflow-hidden&quot;&gt;&#10;      {/* Day header - similar to week header but for a single day */}&#10;      &lt;div className=&quot;grid grid-cols-[80px_1fr] border-b border-gray-300&quot;&gt;&#10;        &lt;div className=&quot;p-2&quot;&gt;&lt;/div&gt;&#10;        &lt;div&#10;          className={`p-4 text-center slide-up-element ${&#10;            currentDate.toDateString() === new Date().toDateString()&#10;              ? 'bg-primary-50 border-primary-200'&#10;              : isWorking&#10;              ? 'bg-neutral-50'&#10;              : 'bg-red-50'&#10;          }`}&#10;          style={{ animationDelay: '0.05s' }}&#10;        &gt;&#10;          &lt;p className={`text-sm ${&#10;            isWorking ? 'text-neutral-500' : 'text-red-400'&#10;          }`}&gt;&#10;            {currentDate.toLocaleDateString('en-US', { weekday: 'short' })}&#10;          &lt;/p&gt;&#10;          &lt;p className={`text-lg font-semibold ${&#10;            currentDate.toDateString() === new Date().toDateString()&#10;              ? 'text-primary-600'&#10;              : isWorking&#10;              ? 'text-neutral-800'&#10;              : 'text-red-600'&#10;          }`}&gt;&#10;            {currentDate.getDate()}&#10;          &lt;/p&gt;&#10;          {!isWorking &amp;&amp; (&#10;            &lt;p className=&quot;text-xs text-red-500 mt-1&quot;&gt;Closed&lt;/p&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Time slots grid - 15 minute precision with drag and drop */}&#10;      &lt;div&#10;        className=&quot;flex-1 overflow-y-auto&quot;&#10;        onMouseUp={handleMouseUp}&#10;        onMouseLeave={handleMouseUp}&#10;        style={{ height: 'calc(100vh - 280px)' }}&#10;      &gt;&#10;        {timeSlots.map((time, timeIndex) =&gt; {&#10;          const isSelected = isSlotSelected(dayStr, time);&#10;          const dayAppointments = appointments.filter(apt =&gt; {&#10;            const aptDate = getAppointmentDate(apt);&#10;            const aptTime = formatAppointmentTime(apt);&#10;            const aptHour = parseInt(aptTime.split(':')[0]);&#10;            const aptMinute = parseInt(aptTime.split(':')[1]);&#10;            const timeHour = parseInt(time.split(':')[0]);&#10;            const timeMinute = parseInt(time.split(':')[1]);&#10;&#10;            // Only show appointment in its starting time slot&#10;            return aptDate === dayStr &amp;&amp;&#10;              aptHour === timeHour &amp;&amp;&#10;              aptMinute === timeMinute;&#10;          });&#10;&#10;          // Define border classes for visual hierarchy&#10;          let borderBottomClass;&#10;          if (timeIndex % 4 === 3) {&#10;            borderBottomClass = 'border-b border-gray-300'; // Hour boundaries&#10;          } else if (timeIndex % 2 === 1) {&#10;            borderBottomClass = 'border-b border-gray-200'; // 30-minute boundaries&#10;          } else {&#10;            borderBottomClass = 'border-b border-gray-100'; // 15-minute boundaries&#10;          }&#10;&#10;          // Apply red hue to non-working days&#10;          const baseBackground = isWorking ? '' : 'bg-red-50/30';&#10;          const hoverBackground = isWorking ? 'hover:bg-primary-50' : 'hover:bg-red-100/50';&#10;&#10;          return (&#10;            &lt;div&#10;              key={time}&#10;              className={`grid grid-cols-[80px_1fr] transition-all duration-300 slide-up-element ${hoverBackground}`}&#10;              style={{ animationDelay: `${timeIndex * 0.02}s` }}&#10;            &gt;&#10;              {/* Time label column - show hour labels in the middle of each hour block */}&#10;              &lt;div className=&quot;p-2 text-right text-sm text-neutral-500 bg-neutral-50 border-r border-gray-300 relative&quot;&gt;&#10;                {timeIndex % 4 === 1 ? ( // Show in the second slot (middle of the hour)&#10;                  &lt;span className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2&quot;&gt;&#10;                    {time.split(':')[0]}:00&#10;                  &lt;/span&gt;&#10;                ) : null}&#10;              &lt;/div&gt;&#10;&#10;              {/* Time slot column with drag and drop */}&#10;              &lt;div&#10;                className={`p-1 min-h-[15px] relative group cursor-pointer ${borderBottomClass} ${baseBackground} ${isSelected ? 'bg-blue-200 border-blue-400' : ''}`}&#10;                style={{&#10;                  backgroundColor: isSelected ? 'rgba(59, 130, 246, 0.3)' : '',&#10;                  borderColor: isSelected ? '#3b82f6' : ''&#10;                }}&#10;                onClick={() =&gt; onTimeSlotClick(dayStr, time)}&#10;                onMouseDown={(e) =&gt; handleMouseDown(e, dayStr, time)}&#10;                onMouseEnter={() =&gt; handleMouseEnter(dayStr, time)}&#10;                onDragOver={(e) =&gt; handleTimeSlotDragOver(e, dayStr, time)}&#10;                onDrop={(e) =&gt; handleTimeSlotDrop(e, dayStr, time)}&#10;                onDragLeave={handleTimeSlotDragLeave}&#10;              &gt;&#10;                {/* Appointments in this time slot */}&#10;                {dayAppointments.map((appointment, aptIndex) =&gt; (&#10;                  &lt;div&#10;                    key={appointment.id}&#10;                    className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-medium hover:opacity-80 transition-opacity cursor-pointer z-10&quot;&#10;                    style={{&#10;                      top: `${aptIndex * 2}px`,&#10;                      height: `${getAppointmentDuration(appointment)}px`,&#10;                      display: 'flex',&#10;                      flexDirection: 'column',&#10;                      justifyContent: 'center',&#10;                      backgroundColor: getAppointmentBackgroundColor(appointment.status),&#10;                      color: getAppointmentTextColor(appointment.status)&#10;                    }}&#10;                    onClick={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                      onAppointmentClick(appointment);&#10;                    }}&#10;                    onMouseEnter={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                    }}&#10;                    onMouseDown={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                    }}&#10;                    draggable&#10;                    onDragStart={(e) =&gt; handleAppointmentDragStart(e, appointment)}&#10;                    onDragEnd={handleAppointmentDragEnd}&#10;                  &gt;&#10;                    &lt;p className=&quot;font-semibold truncate&quot;&gt;{getPatientName(appointment)}&lt;/p&gt;&#10;                    &lt;p className=&quot;opacity-90 truncate&quot;&gt;{appointment.type}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;&#10;                {/* Drag preview shadow - shows where appointment will be dropped */}&#10;                {draggedAppointment &amp;&amp; dragPreviewPosition &amp;&amp;&#10;                 dragPreviewPosition.date === dayStr &amp;&amp; dragPreviewPosition.time === time &amp;&amp; (&#10;                  &lt;div&#10;                    className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-lg border-2 border-dashed border-primary-400 bg-primary-100/50 pointer-events-none z-20&quot;&#10;                    style={{&#10;                      top: '1px',&#10;                      height: `${getAppointmentDuration(draggedAppointment)}px`,&#10;                      display: 'flex',&#10;                      flexDirection: 'column',&#10;                      justifyContent: 'center',&#10;                      backdropFilter: 'blur(1px)',&#10;                    }}&#10;                  &gt;&#10;                    &lt;div className=&quot;text-primary-700 font-medium opacity-75&quot;&gt;&#10;                      {getPatientName(draggedAppointment)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-primary-600 text-xs opacity-60&quot;&gt;&#10;                      Moving...&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Hover effect */}&#10;                &lt;div className={`absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-lg ${&#10;                  isWorking ? 'bg-primary-100/30' : 'bg-red-100/30'&#10;                }`}&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Appointment, AppointmentStatus } from '../../types/Appointment';&#10;&#10;interface DayViewProps {&#10;  currentDate: Date;&#10;  appointments: Appointment[];&#10;  onTimeSlotClick: (date: string, time: string) =&gt; void;&#10;  onAppointmentClick: (appointment: Appointment) =&gt; void;&#10;  onAppointmentDrop?: (appointment: Appointment, newDate: string, newTime: string) =&gt; void;&#10;  getAppointmentDate: (apt: Appointment) =&gt; string;&#10;  formatAppointmentTime: (apt: Appointment) =&gt; string;&#10;  getAppointmentDuration: (apt: Appointment) =&gt; number;&#10;  getAppointmentBackgroundColor: (status: AppointmentStatus) =&gt; string;&#10;  getAppointmentTextColor: (status: AppointmentStatus) =&gt; string;&#10;  getPatientName: (apt: Appointment) =&gt; string;&#10;  // Add drag and drop props similar to WeeklyView&#10;  handleMouseUp: () =&gt; void;&#10;  handleMouseDown: (e: React.MouseEvent, date: string, time: string) =&gt; void;&#10;  handleMouseEnter: (date: string, time: string) =&gt; void;&#10;  isSlotSelected: (date: string, time: string) =&gt; boolean;&#10;  workingHours?: {&#10;    startTime: string;&#10;    endTime: string;&#10;  };&#10;  workingDays?: string[];&#10;}&#10;&#10;export const DayView: React.FC&lt;DayViewProps&gt; = ({&#10;  currentDate,&#10;  appointments,&#10;  onTimeSlotClick,&#10;  onAppointmentClick,&#10;  onAppointmentDrop,&#10;  getAppointmentDate,&#10;  formatAppointmentTime,&#10;  getAppointmentDuration,&#10;  getAppointmentBackgroundColor,&#10;  getAppointmentTextColor,&#10;  getPatientName,&#10;  handleMouseUp,&#10;  handleMouseDown,&#10;  handleMouseEnter,&#10;  isSlotSelected,&#10;  workingHours = { startTime: '08:00', endTime: '17:00' },&#10;  workingDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],&#10;}) =&gt; {&#10;  const [draggedAppointment, setDraggedAppointment] = React.useState&lt;Appointment | null&gt;(null);&#10;  const [dragPreviewPosition, setDragPreviewPosition] = React.useState&lt;{date: string, time: string} | null&gt;(null);&#10;&#10;  // Check if current date is a working day&#10;  const isWorkingDay = (): boolean =&gt; {&#10;    const dayName = currentDate.toLocaleDateString('en-US', { weekday: 'long' });&#10;    return workingDays.includes(dayName);&#10;  };&#10;&#10;  const isWorking = isWorkingDay();&#10;&#10;  // Generate time slots based on working hours&#10;  const generateTimeSlots = () =&gt; {&#10;    const startHour = parseInt(workingHours.startTime.split(':')[0]);&#10;    const endHour = parseInt(workingHours.endTime.split(':')[0]);&#10;    const totalHours = endHour - startHour;&#10;    const slotsPerHour = 4; // 15-minute intervals&#10;    const totalSlots = totalHours * slotsPerHour;&#10;&#10;    return Array.from({ length: totalSlots }, (_, i) =&gt; {&#10;      const hour = Math.floor(i / slotsPerHour) + startHour;&#10;      const minutes = (i % slotsPerHour) * 15;&#10;      return `${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;&#10;    });&#10;  };&#10;&#10;  const timeSlots = generateTimeSlots();&#10;&#10;  // Handle appointment drag start&#10;  const handleAppointmentDragStart = (e: React.DragEvent, appointment: Appointment) =&gt; {&#10;    e.stopPropagation();&#10;    setDraggedAppointment(appointment);&#10;    e.dataTransfer.setData('text/plain', appointment.id);&#10;    e.dataTransfer.effectAllowed = 'move';&#10;  };&#10;&#10;  // Handle appointment drag end&#10;  const handleAppointmentDragEnd = () =&gt; {&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drop on time slot&#10;  const handleTimeSlotDrop = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.stopPropagation();&#10;&#10;    if (draggedAppointment &amp;&amp; onAppointmentDrop) {&#10;      onAppointmentDrop(draggedAppointment, date, time);&#10;    }&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drag over to allow drop and show preview&#10;  const handleTimeSlotDragOver = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.dataTransfer.dropEffect = 'move';&#10;&#10;    if (draggedAppointment) {&#10;      setDragPreviewPosition({ date, time });&#10;    }&#10;  };&#10;&#10;  // Handle drag leave to hide preview when leaving time slot&#10;  const handleTimeSlotDragLeave = (e: React.DragEvent) =&gt; {&#10;    // Only hide preview if we're actually leaving the time slot area&#10;    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();&#10;    const { clientX, clientY } = e;&#10;&#10;    if (clientX &lt; rect.left || clientX &gt; rect.right || clientY &lt; rect.top || clientY &gt; rect.bottom) {&#10;      setDragPreviewPosition(null);&#10;    }&#10;  };&#10;&#10;  const dayStr = currentDate.toISOString().split('T')[0];&#10;&#10;  return (&#10;    &lt;div className=&quot;card overflow-hidden&quot;&gt;&#10;      {/* Day header - similar to week header but for a single day */}&#10;      &lt;div className=&quot;grid grid-cols-[80px_1fr] border-b border-gray-300&quot;&gt;&#10;        &lt;div className=&quot;p-2&quot;&gt;&lt;/div&gt;&#10;        &lt;div&#10;          className={`p-4 text-center slide-up-element ${&#10;            currentDate.toDateString() === new Date().toDateString()&#10;              ? isWorking&#10;                ? 'bg-primary-50 border-primary-200'&#10;                : 'bg-red-200'&#10;              : isWorking&#10;              ? 'bg-neutral-50'&#10;              : 'bg-red-50'&#10;          }`}&#10;          style={{ animationDelay: '0.05s' }}&#10;        &gt;&#10;          &lt;p className={`text-sm ${&#10;            currentDate.toDateString() === new Date().toDateString()&#10;              ? isWorking &#10;                ? 'text-neutral-500'&#10;                : 'text-red-600'&#10;              : isWorking &#10;              ? 'text-neutral-500' &#10;              : 'text-red-400'&#10;          }`}&gt;&#10;            {currentDate.toLocaleDateString('en-US', { weekday: 'short' })}&#10;          &lt;/p&gt;&#10;          &lt;p className={`text-lg font-semibold ${&#10;            currentDate.toDateString() === new Date().toDateString()&#10;              ? isWorking&#10;                ? 'text-primary-600'&#10;                : 'text-red-700'&#10;              : isWorking&#10;              ? 'text-neutral-800'&#10;              : 'text-red-600'&#10;          }`}&gt;&#10;            {currentDate.getDate()}&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Time slots grid - 15 minute precision with drag and drop */}&#10;      &lt;div&#10;        className=&quot;flex-1 overflow-y-auto&quot;&#10;        onMouseUp={handleMouseUp}&#10;        onMouseLeave={handleMouseUp}&#10;        style={{ height: 'calc(100vh - 280px)' }}&#10;      &gt;&#10;        {timeSlots.map((time, timeIndex) =&gt; {&#10;          const isSelected = isSlotSelected(dayStr, time);&#10;          const dayAppointments = appointments.filter(apt =&gt; {&#10;            const aptDate = getAppointmentDate(apt);&#10;            const aptTime = formatAppointmentTime(apt);&#10;            const aptHour = parseInt(aptTime.split(':')[0]);&#10;            const aptMinute = parseInt(aptTime.split(':')[1]);&#10;            const timeHour = parseInt(time.split(':')[0]);&#10;            const timeMinute = parseInt(time.split(':')[1]);&#10;&#10;            // Only show appointment in its starting time slot&#10;            return aptDate === dayStr &amp;&amp;&#10;              aptHour === timeHour &amp;&amp;&#10;              aptMinute === timeMinute;&#10;          });&#10;&#10;          // Define border classes for visual hierarchy&#10;          let borderBottomClass;&#10;          if (timeIndex % 4 === 3) {&#10;            borderBottomClass = 'border-b border-gray-300'; // Hour boundaries&#10;          } else if (timeIndex % 2 === 1) {&#10;            borderBottomClass = 'border-b border-gray-200'; // 30-minute boundaries&#10;          } else {&#10;            borderBottomClass = 'border-b border-gray-100'; // 15-minute boundaries&#10;          }&#10;&#10;          // Apply red hue to non-working days&#10;          const baseBackground = isWorking ? '' : 'bg-red-50/30';&#10;          const hoverBackground = isWorking ? 'hover:bg-primary-50' : 'hover:bg-red-100/50';&#10;&#10;          return (&#10;            &lt;div&#10;              key={time}&#10;              className={`grid grid-cols-[80px_1fr] transition-all duration-300 slide-up-element ${hoverBackground}`}&#10;              style={{ animationDelay: `${timeIndex * 0.02}s` }}&#10;            &gt;&#10;              {/* Time label column - show hour labels in the middle of each hour block */}&#10;              &lt;div className=&quot;p-2 text-right text-sm text-neutral-500 bg-neutral-50 border-r border-gray-300 relative&quot;&gt;&#10;                {timeIndex % 4 === 1 ? ( // Show in the second slot (middle of the hour)&#10;                  &lt;span className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2&quot;&gt;&#10;                    {time.split(':')[0]}:00&#10;                  &lt;/span&gt;&#10;                ) : null}&#10;              &lt;/div&gt;&#10;&#10;              {/* Time slot column with drag and drop */}&#10;              &lt;div&#10;                className={`p-1 min-h-[15px] relative group cursor-pointer ${borderBottomClass} ${baseBackground} ${isSelected ? 'bg-blue-200 border-blue-400' : ''}`}&#10;                style={{&#10;                  backgroundColor: isSelected ? 'rgba(59, 130, 246, 0.3)' : '',&#10;                  borderColor: isSelected ? '#3b82f6' : ''&#10;                }}&#10;                onClick={() =&gt; onTimeSlotClick(dayStr, time)}&#10;                onMouseDown={(e) =&gt; handleMouseDown(e, dayStr, time)}&#10;                onMouseEnter={() =&gt; handleMouseEnter(dayStr, time)}&#10;                onDragOver={(e) =&gt; handleTimeSlotDragOver(e, dayStr, time)}&#10;                onDrop={(e) =&gt; handleTimeSlotDrop(e, dayStr, time)}&#10;                onDragLeave={handleTimeSlotDragLeave}&#10;              &gt;&#10;                {/* Appointments in this time slot */}&#10;                {dayAppointments.map((appointment, aptIndex) =&gt; (&#10;                  &lt;div&#10;                    key={appointment.id}&#10;                    className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-medium hover:opacity-80 transition-opacity cursor-pointer z-10&quot;&#10;                    style={{&#10;                      top: `${aptIndex * 2}px`,&#10;                      height: `${getAppointmentDuration(appointment)}px`,&#10;                      display: 'flex',&#10;                      flexDirection: 'column',&#10;                      justifyContent: 'center',&#10;                      backgroundColor: getAppointmentBackgroundColor(appointment.status),&#10;                      color: getAppointmentTextColor(appointment.status)&#10;                    }}&#10;                    onClick={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                      onAppointmentClick(appointment);&#10;                    }}&#10;                    onMouseEnter={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                    }}&#10;                    onMouseDown={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                    }}&#10;                    draggable&#10;                    onDragStart={(e) =&gt; handleAppointmentDragStart(e, appointment)}&#10;                    onDragEnd={handleAppointmentDragEnd}&#10;                  &gt;&#10;                    &lt;p className=&quot;font-semibold truncate&quot;&gt;{getPatientName(appointment)}&lt;/p&gt;&#10;                    &lt;p className=&quot;opacity-90 truncate&quot;&gt;{appointment.type}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;&#10;                {/* Drag preview shadow - shows where appointment will be dropped */}&#10;                {draggedAppointment &amp;&amp; dragPreviewPosition &amp;&amp;&#10;                 dragPreviewPosition.date === dayStr &amp;&amp; dragPreviewPosition.time === time &amp;&amp; (&#10;                  &lt;div&#10;                    className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-lg border-2 border-dashed border-primary-400 bg-primary-100/50 pointer-events-none z-20&quot;&#10;                    style={{&#10;                      top: '1px',&#10;                      height: `${getAppointmentDuration(draggedAppointment)}px`,&#10;                      display: 'flex',&#10;                      flexDirection: 'column',&#10;                      justifyContent: 'center',&#10;                      backdropFilter: 'blur(1px)',&#10;                    }}&#10;                  &gt;&#10;                    &lt;div className=&quot;text-primary-700 font-medium opacity-75&quot;&gt;&#10;                      {getPatientName(draggedAppointment)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-primary-600 text-xs opacity-60&quot;&gt;&#10;                      Moving...&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Hover effect */}&#10;                &lt;div className={`absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-lg ${&#10;                  isWorking ? 'bg-primary-100/30' : 'bg-red-100/30'&#10;                }`}&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/calendar/MonthView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/calendar/MonthView.tsx" />
              <option name="originalContent" value="interface AppointmentData {&#10;  id: string;&#10;  patientName: string;&#10;  time: string;&#10;  duration: number;&#10;  type: string;&#10;  status: string;&#10;  title: string;&#10;}&#10;&#10;interface MonthViewProps {&#10;  currentDate: Date;&#10;  appointments: Record&lt;string, AppointmentData[]&gt;;&#10;  onAppointmentClick?: (appointmentId: string) =&gt; void;&#10;  onDayClick?: (date: Date) =&gt; void;&#10;}&#10;&#10;export const MonthView = ({ currentDate, appointments, onAppointmentClick, onDayClick }: MonthViewProps) =&gt; {&#10;  const getMonthDays = (date: Date): Date[] =&gt; {&#10;    const year = date.getFullYear();&#10;    const month = date.getMonth();&#10;    const firstDay = new Date(year, month, 1);&#10;&#10;    // Get the first day to display (might be from previous month)&#10;    const startDate = new Date(firstDay);&#10;    startDate.setDate(firstDay.getDate() - firstDay.getDay());&#10;&#10;    const days: Date[] = [];&#10;    const currentDay = new Date(startDate);&#10;&#10;    // Generate 6 weeks of dates&#10;    for (let i = 0; i &lt; 42; i++) {&#10;      days.push(new Date(currentDay));&#10;      currentDay.setDate(currentDay.getDate() + 1);&#10;    }&#10;&#10;    return days;&#10;  };&#10;&#10;  const isToday = (date: Date): boolean =&gt; {&#10;    const today = new Date();&#10;    return date.toDateString() === today.toDateString();&#10;  };&#10;&#10;  const isCurrentMonth = (date: Date): boolean =&gt; {&#10;    return date.getMonth() === currentDate.getMonth();&#10;  };&#10;&#10;  const getAppointmentsForDate = (date: string): AppointmentData[] =&gt; {&#10;    return appointments[date] || [];&#10;  };&#10;&#10;  const getStatusColor = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'Booked':&#10;        return {&#10;          bg: 'bg-blue-100',&#10;          text: 'text-blue-800'&#10;        };&#10;      case 'Completed':&#10;        return {&#10;          bg: 'bg-green-100',&#10;          text: 'text-green-800'&#10;        };&#10;      case 'Cancelled':&#10;        return {&#10;          bg: 'bg-red-100',&#10;          text: 'text-red-800'&#10;        };&#10;      case 'No Show':&#10;        return {&#10;          bg: 'bg-orange-100',&#10;          text: 'text-orange-800'&#10;        };&#10;      default:&#10;        return {&#10;          bg: 'bg-gray-100',&#10;          text: 'text-gray-800'&#10;        };&#10;    }&#10;  };&#10;&#10;  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];&#10;  const monthDays = getMonthDays(currentDate);&#10;&#10;  return (&#10;    &lt;div className=&quot;w-full h-full flex flex-col&quot;&gt;&#10;      &lt;div className=&quot;grid grid-cols-7 gap-px bg-gray-200 flex-shrink-0&quot;&gt;&#10;        {weekDays.map((day, index) =&gt; (&#10;          &lt;div&#10;            key={day}&#10;            className=&quot;bg-white p-2 text-sm font-medium text-gray-600 text-center slide-up-element&quot;&#10;            style={{ animationDelay: `${index * 0.05}s` }}&#10;          &gt;&#10;            {day}&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid grid-cols-7 gap-px bg-gray-200 flex-1&quot; style={{ height: 'calc(100vh - 320px)' }}&gt;&#10;        {monthDays.map((date, index) =&gt; {&#10;          const dateString = date.toISOString().split('T')[0];&#10;          const dayAppointments = getAppointmentsForDate(dateString);&#10;&#10;          return (&#10;            &lt;div&#10;              key={index}&#10;              className={`bg-white min-h-[120px] p-2 border-t relative cursor-pointer hover:bg-gray-50 transition-colors slide-up-element ${&#10;                isCurrentMonth(date) ? 'bg-white' : 'bg-gray-50'&#10;              }`}&#10;              style={{ animationDelay: `${index * 0.02}s` }}&#10;              onClick={() =&gt; onDayClick &amp;&amp; onDayClick(date)}&#10;            &gt;&#10;              &lt;div className={`text-sm ${&#10;                isToday(date)&#10;                  ? 'bg-blue-600 text-white w-6 h-6 rounded-full flex items-center justify-center'&#10;                  : isCurrentMonth(date)&#10;                    ? 'text-gray-900'&#10;                    : 'text-gray-400'&#10;              }`}&gt;&#10;                {date.getDate()}&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;mt-1 space-y-1&quot;&gt;&#10;                {dayAppointments.slice(0, 3).map((apt, aptIndex) =&gt; {&#10;                  const statusColors = getStatusColor(apt.status);&#10;                  return (&#10;                    &lt;div&#10;                      key={apt.id}&#10;                      className={`text-xs ${statusColors.bg} ${statusColors.text} p-1 rounded truncate cursor-pointer hover:opacity-80 transition-opacity slide-up-element`}&#10;                      style={{ animationDelay: `${(index * 0.02) + (aptIndex * 0.01)}s` }}&#10;                      onClick={(e) =&gt; {&#10;                        e.stopPropagation(); // Prevent day click when clicking appointment&#10;                        onAppointmentClick &amp;&amp; onAppointmentClick(apt.id);&#10;                      }}&#10;                    &gt;&#10;                      &lt;div className=&quot;font-medium&quot;&gt;{apt.time}&lt;/div&gt;&#10;                      &lt;div className=&quot;truncate&quot;&gt;{apt.patientName}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  );&#10;                })}&#10;                {dayAppointments.length &gt; 3 &amp;&amp; (&#10;                  &lt;div&#10;                    className=&quot;text-xs text-gray-500 pl-1 slide-up-element&quot;&#10;                    style={{ animationDelay: `${(index * 0.02) + 0.03}s` }}&#10;                  &gt;&#10;                    +{dayAppointments.length - 3} more&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="interface AppointmentData {&#10;  id: string;&#10;  patientName: string;&#10;  time: string;&#10;  duration: number;&#10;  type: string;&#10;  status: string;&#10;  title: string;&#10;}&#10;&#10;interface MonthViewProps {&#10;  currentDate: Date;&#10;  appointments: Record&lt;string, AppointmentData[]&gt;;&#10;  onAppointmentClick?: (appointmentId: string) =&gt; void;&#10;  onDayClick?: (date: Date) =&gt; void;&#10;}&#10;&#10;export const MonthView = ({ currentDate, appointments, onAppointmentClick, onDayClick }: MonthViewProps) =&gt; {&#10;  const getMonthDays = (date: Date): Date[] =&gt; {&#10;    const year = date.getFullYear();&#10;    const month = date.getMonth();&#10;    const firstDay = new Date(year, month, 1);&#10;&#10;    // Get the first day to display (might be from previous month)&#10;    const startDate = new Date(firstDay);&#10;    startDate.setDate(firstDay.getDate() - firstDay.getDay());&#10;&#10;    const days: Date[] = [];&#10;    const currentDay = new Date(startDate);&#10;&#10;    // Generate 6 weeks of dates&#10;    for (let i = 0; i &lt; 42; i++) {&#10;      days.push(new Date(currentDay));&#10;      currentDay.setDate(currentDay.getDate() + 1);&#10;    }&#10;&#10;    return days;&#10;  };&#10;&#10;  const isToday = (date: Date): boolean =&gt; {&#10;    const today = new Date();&#10;    return date.toDateString() === today.toDateString();&#10;  };&#10;&#10;  const isCurrentMonth = (date: Date): boolean =&gt; {&#10;    return date.getMonth() === currentDate.getMonth();&#10;  };&#10;&#10;  const getAppointmentsForDate = (date: string): AppointmentData[] =&gt; {&#10;    return appointments[date] || [];&#10;  };&#10;&#10;  const getStatusColor = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'Booked':&#10;        return {&#10;          bg: 'bg-blue-100',&#10;          text: 'text-blue-800'&#10;        };&#10;      case 'Completed':&#10;        return {&#10;          bg: 'bg-green-100',&#10;          text: 'text-green-800'&#10;        };&#10;      case 'Cancelled':&#10;        return {&#10;          bg: 'bg-red-100',&#10;          text: 'text-red-800'&#10;        };&#10;      case 'No Show':&#10;        return {&#10;          bg: 'bg-orange-100',&#10;          text: 'text-orange-800'&#10;        };&#10;      default:&#10;        return {&#10;          bg: 'bg-gray-100',&#10;          text: 'text-gray-800'&#10;        };&#10;    }&#10;  };&#10;&#10;  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];&#10;  const monthDays = getMonthDays(currentDate);&#10;&#10;  return (&#10;    &lt;div className=&quot;w-full h-full flex flex-col&quot;&gt;&#10;      &lt;div className=&quot;grid grid-cols-7 gap-px bg-gray-200 flex-shrink-0&quot;&gt;&#10;        {weekDays.map((day, index) =&gt; (&#10;          &lt;div&#10;            key={day}&#10;            className=&quot;bg-white p-2 text-sm font-medium text-gray-600 text-center slide-up-element&quot;&#10;            style={{ animationDelay: `${index * 0.02}s` }}&#10;          &gt;&#10;            {day}&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid grid-cols-7 gap-px bg-gray-200 flex-1&quot; style={{ height: 'calc(100vh - 320px)' }}&gt;&#10;        {monthDays.map((date, index) =&gt; {&#10;          const dateString = date.toISOString().split('T')[0];&#10;          const dayAppointments = getAppointmentsForDate(dateString);&#10;&#10;          return (&#10;            &lt;div&#10;              key={index}&#10;              className={`bg-white min-h-[120px] p-2 border-t relative cursor-pointer hover:bg-gray-50 transition-colors slide-up-element ${&#10;                isCurrentMonth(date) ? 'bg-white' : 'bg-gray-50'&#10;              }`}&#10;              style={{ animationDelay: `${index * 0.01}s` }}&#10;              onClick={() =&gt; onDayClick &amp;&amp; onDayClick(date)}&#10;            &gt;&#10;              &lt;div className={`text-sm ${&#10;                isToday(date)&#10;                  ? 'bg-blue-600 text-white w-6 h-6 rounded-full flex items-center justify-center'&#10;                  : isCurrentMonth(date)&#10;                    ? 'text-gray-900'&#10;                    : 'text-gray-400'&#10;              }`}&gt;&#10;                {date.getDate()}&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;mt-1 space-y-1&quot;&gt;&#10;                {dayAppointments.slice(0, 3).map((apt, aptIndex) =&gt; {&#10;                  const statusColors = getStatusColor(apt.status);&#10;                  return (&#10;                    &lt;div&#10;                      key={apt.id}&#10;                      className={`text-xs ${statusColors.bg} ${statusColors.text} p-1 rounded truncate cursor-pointer hover:opacity-80 transition-opacity slide-up-element`}&#10;                      style={{ animationDelay: `${(index * 0.01) + (aptIndex * 0.005)}s` }}&#10;                      onClick={(e) =&gt; {&#10;                        e.stopPropagation(); // Prevent day click when clicking appointment&#10;                        onAppointmentClick &amp;&amp; onAppointmentClick(apt.id);&#10;                      }}&#10;                    &gt;&#10;                      &lt;div className=&quot;font-medium&quot;&gt;{apt.time}&lt;/div&gt;&#10;                      &lt;div className=&quot;truncate&quot;&gt;{apt.patientName}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  );&#10;                })}&#10;                {dayAppointments.length &gt; 3 &amp;&amp; (&#10;                  &lt;div &#10;                    className=&quot;text-xs text-gray-500 pl-1 slide-up-element&quot;&#10;                    style={{ animationDelay: `${(index * 0.01) + 0.015}s` }}&#10;                  &gt;&#10;                    +{dayAppointments.length - 3} more&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/calendar/WeeklyView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/calendar/WeeklyView.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { Appointment, AppointmentStatus } from '../../types/Appointment';&#10;&#10;interface WeeklyViewProps {&#10;  isSlotSelected: (date: string, time: string) =&gt; boolean;&#10;  currentDate: Date;&#10;  appointments: Appointment[];&#10;  handleMouseUp: () =&gt; void;&#10;  handleMouseDown: (e: React.MouseEvent, date: string, time: string) =&gt; void;&#10;  handleMouseEnter: (date: string, time: string) =&gt; void;&#10;  onSelectSlot: (date: string, time: string) =&gt; void;&#10;  onAppointmentClick: (appointment: Appointment) =&gt; void;&#10;  onAppointmentDrop?: (appointment: Appointment, newDate: string, newTime: string) =&gt; void;&#10;  onDayClick?: (date: Date) =&gt; void;&#10;  getAppointmentDate: (apt: Appointment) =&gt; string;&#10;  formatAppointmentTime: (apt: Appointment) =&gt; string;&#10;  getAppointmentDuration: (apt: Appointment) =&gt; number;&#10;  getAppointmentBackgroundColor: (status: AppointmentStatus) =&gt; string;&#10;  getAppointmentTextColor: (status: AppointmentStatus) =&gt; string;&#10;  workingHours?: {&#10;    startTime: string;&#10;    endTime: string;&#10;  };&#10;  workingDays?: string[];&#10;}&#10;&#10;export const WeeklyView: React.FC&lt;WeeklyViewProps&gt; = ({&#10;  currentDate,&#10;  appointments,&#10;  handleMouseUp,&#10;  handleMouseDown,&#10;  handleMouseEnter,&#10;  onSelectSlot,&#10;  onAppointmentClick,&#10;  isSlotSelected,&#10;  getAppointmentDate,&#10;  formatAppointmentTime,&#10;  getAppointmentDuration,&#10;  getAppointmentBackgroundColor,&#10;  getAppointmentTextColor,&#10;  onAppointmentDrop,&#10;  onDayClick,&#10;  workingHours = { startTime: '08:00', endTime: '17:00' },&#10;  workingDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],&#10;}) =&gt; {&#10;  const [draggedAppointment, setDraggedAppointment] = React.useState&lt;Appointment | null&gt;(null);&#10;  const [dragPreviewPosition, setDragPreviewPosition] = React.useState&lt;{date: string, time: string} | null&gt;(null);&#10;&#10;  // Handle appointment drag start&#10;  const handleAppointmentDragStart = (e: React.DragEvent, appointment: Appointment) =&gt; {&#10;    e.stopPropagation();&#10;    setDraggedAppointment(appointment);&#10;    e.dataTransfer.setData('text/plain', appointment.id);&#10;    e.dataTransfer.effectAllowed = 'move';&#10;  };&#10;&#10;  // Handle appointment drag end&#10;  const handleAppointmentDragEnd = () =&gt; {&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drop on time slot&#10;  const handleTimeSlotDrop = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.stopPropagation();&#10;&#10;    if (draggedAppointment &amp;&amp; onAppointmentDrop) {&#10;      onAppointmentDrop(draggedAppointment, date, time);&#10;    }&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drag over to allow drop and show preview&#10;  const handleTimeSlotDragOver = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.dataTransfer.dropEffect = 'move';&#10;&#10;    if (draggedAppointment) {&#10;      setDragPreviewPosition({ date, time });&#10;    }&#10;  };&#10;&#10;  // Handle drag leave to hide preview when leaving time slot&#10;  const handleTimeSlotDragLeave = (e: React.DragEvent) =&gt; {&#10;    // Only hide preview if we're actually leaving the time slot area&#10;    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();&#10;    const { clientX, clientY } = e;&#10;&#10;    if (clientX &lt; rect.left || clientX &gt; rect.right || clientY &lt; rect.top || clientY &gt; rect.bottom) {&#10;      setDragPreviewPosition(null);&#10;    }&#10;  };&#10;&#10;  const weekStart = new Date(currentDate);&#10;  weekStart.setDate(currentDate.getDate() - currentDate.getDay());&#10;&#10;  const days = Array.from({ length: 7 }, (_, i) =&gt; {&#10;    const day = new Date(weekStart);&#10;    day.setDate(weekStart.getDate() + i);&#10;    return day;&#10;  });&#10;&#10;  // Check if a day is a working day&#10;  const isWorkingDay = (date: Date): boolean =&gt; {&#10;    const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });&#10;    return workingDays.includes(dayName);&#10;  };&#10;&#10;  // Generate time slots based on working hours&#10;  const generateTimeSlots = () =&gt; {&#10;    const startHour = parseInt(workingHours.startTime.split(':')[0]);&#10;    const endHour = parseInt(workingHours.endTime.split(':')[0]);&#10;    const totalHours = endHour - startHour;&#10;    const slotsPerHour = 4; // 15-minute intervals&#10;    const totalSlots = totalHours * slotsPerHour;&#10;&#10;    return Array.from({ length: totalSlots }, (_, i) =&gt; {&#10;      const hour = Math.floor(i / slotsPerHour) + startHour;&#10;      const minutes = (i % slotsPerHour) * 15;&#10;      return `${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;&#10;    });&#10;  };&#10;&#10;  const timeSlots = generateTimeSlots();&#10;&#10;  return (&#10;    &lt;div className=&quot;card overflow-hidden&quot;&gt;&#10;      {/* Week header */}&#10;      &lt;div className=&quot;grid grid-cols-8 border-b border-gray-300&quot;&gt;&#10;        &lt;div className=&quot;p-4&quot;&gt;&lt;/div&gt;&#10;        {days.map((day, index) =&gt; {&#10;          const isWorking = isWorkingDay(day);&#10;          const isToday = day.toDateString() === new Date().toDateString();&#10;&#10;          return (&#10;            &lt;div&#10;              key={index}&#10;              className={`p-4 text-center slide-up-element cursor-pointer transition-colors duration-200 ${&#10;                isToday&#10;                  ? 'bg-primary-50 border-primary-200'&#10;                  : isWorking&#10;                  ? 'bg-neutral-50 hover:bg-primary-50'&#10;                  : 'bg-red-50 hover:bg-red-100'&#10;              }`}&#10;              style={{ animationDelay: `${index * 0.05}s` }}&#10;              onClick={() =&gt; onDayClick &amp;&amp; onDayClick(day)}&#10;            &gt;&#10;              &lt;p className={`text-sm ${&#10;                isWorking ? 'text-neutral-500' : 'text-red-400'&#10;              }`}&gt;&#10;                {day.toLocaleDateString('en-US', { weekday: 'short' })}&#10;              &lt;/p&gt;&#10;              &lt;p className={`text-lg font-semibold ${&#10;                isToday&#10;                  ? 'text-primary-600'&#10;                  : isWorking&#10;                  ? 'text-neutral-800'&#10;                  : 'text-red-600'&#10;              }`}&gt;&#10;                {day.getDate()}&#10;              &lt;/p&gt;&#10;              {!isWorking &amp;&amp; (&#10;                &lt;p className=&quot;text-xs text-red-500 mt-1&quot;&gt;Closed&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;&#10;      {/* Time slots grid - 15 minute precision */}&#10;      &lt;div&#10;        className=&quot;flex-1 overflow-y-auto&quot;&#10;        onMouseUp={handleMouseUp}&#10;        onMouseLeave={handleMouseUp}&#10;        style={{ height: 'calc(100vh - 280px)' }}&#10;      &gt;&#10;        {timeSlots.map((time, timeIndex) =&gt; (&#10;          &lt;div key={time} className=&quot;grid grid-cols-8 hover:bg-primary-50 transition-all duration-300&quot;&gt;&#10;            &lt;div className=&quot;p-2 text-right text-sm text-neutral-500 bg-neutral-50 border-r border-gray-300 relative&quot;&gt;&#10;              {timeIndex % 4 === 1 ? ( // Show in the second slot (middle of the hour)&#10;                &lt;span className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2&quot;&gt;&#10;                  {time.split(':')[0]}:00&#10;                &lt;/span&gt;&#10;              ) : null}&#10;            &lt;/div&gt;&#10;            {days.map((day) =&gt; {&#10;              const dayStr = day.toISOString().split('T')[0];&#10;              const isSelected = isSlotSelected(dayStr, time);&#10;              const isWorking = isWorkingDay(day);&#10;              const dayAppointments = appointments.filter(apt =&gt; {&#10;                const aptDate = getAppointmentDate(apt);&#10;                const aptTime = formatAppointmentTime(apt);&#10;                const aptHour = parseInt(aptTime.split(':')[0]);&#10;                const aptMinute = parseInt(aptTime.split(':')[1]);&#10;                const timeHour = parseInt(time.split(':')[0]);&#10;                const timeMinute = parseInt(time.split(':')[1]);&#10;&#10;                // Only show appointment in its starting time slot&#10;                return aptDate === dayStr &amp;&amp;&#10;                  aptHour === timeHour &amp;&amp;&#10;                  aptMinute === timeMinute;&#10;              });&#10;&#10;              let borderBottomClass;&#10;              if (timeIndex % 4 === 3) {&#10;                borderBottomClass = 'border-b border-gray-300';&#10;              } else if (timeIndex % 2 === 1) {&#10;                borderBottomClass = 'border-b border-gray-200';&#10;              } else {&#10;                borderBottomClass = 'border-b border-gray-100';&#10;              }&#10;&#10;              // Apply red hue to non-working days&#10;              const baseBackground = isWorking ? '' : 'bg-red-50/30';&#10;              const hoverBackground = isWorking ? 'hover:bg-primary-50' : 'hover:bg-red-100/50';&#10;&#10;              return (&#10;                &lt;div&#10;                  key={`${dayStr}-${time}`}&#10;                  className={`p-1 min-h-[15px] relative group cursor-pointer border-r border-gray-200 ${borderBottomClass} ${baseBackground} ${hoverBackground} ${isSelected ? 'bg-blue-200 border-blue-400' : ''}`}&#10;                  style={{&#10;                    backgroundColor: isSelected ? 'rgba(59, 130, 246, 0.3)' : '',&#10;                    borderColor: isSelected ? '#3b82f6' : ''&#10;                  }}&#10;                  onClick={() =&gt; onSelectSlot(dayStr, time)}&#10;                  onMouseDown={(e) =&gt; handleMouseDown(e, dayStr, time)}&#10;                  onMouseEnter={() =&gt; handleMouseEnter(dayStr, time)}&#10;                  onDragOver={(e) =&gt; handleTimeSlotDragOver(e, dayStr, time)}&#10;                  onDrop={(e) =&gt; handleTimeSlotDrop(e, dayStr, time)}&#10;                  onDragLeave={handleTimeSlotDragLeave}&#10;                &gt;&#10;                  {dayAppointments.map((appointment, aptIndex) =&gt; (&#10;                    &lt;div&#10;                      key={appointment.id}&#10;                      className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-medium hover:opacity-80 transition-opacity cursor-pointer z-10&quot;&#10;                      style={{&#10;                        top: `${aptIndex * 2}px`,&#10;                        height: `${getAppointmentDuration(appointment)}px`,&#10;                        display: 'flex',&#10;                        flexDirection: 'column',&#10;                        justifyContent: 'center',&#10;                        backgroundColor: getAppointmentBackgroundColor(appointment.status),&#10;                        color: getAppointmentTextColor(appointment.status)&#10;                      }}&#10;                      onClick={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                        onAppointmentClick(appointment);&#10;                      }}&#10;                      onMouseEnter={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                      }}&#10;                      onMouseDown={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                      }}&#10;                      draggable&#10;                      onDragStart={(e) =&gt; handleAppointmentDragStart(e, appointment)}&#10;                      onDragEnd={handleAppointmentDragEnd}&#10;                    &gt;&#10;                      {appointment.patient_first_name} {appointment.patient_last_name}&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                  {/* Drag preview shadow - shows where appointment will be dropped */}&#10;                  {draggedAppointment &amp;&amp; dragPreviewPosition &amp;&amp;&#10;                   dragPreviewPosition.date === dayStr &amp;&amp; dragPreviewPosition.time === time &amp;&amp; (&#10;                    &lt;div&#10;                      className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-lg border-2 border-dashed border-primary-400 bg-primary-100/50 pointer-events-none z-20&quot;&#10;                      style={{&#10;                        top: '1px',&#10;                        height: `${getAppointmentDuration(draggedAppointment)}px`,&#10;                        display: 'flex',&#10;                        flexDirection: 'column',&#10;                        justifyContent: 'center',&#10;                        backdropFilter: 'blur(1px)',&#10;                      }}&#10;                    &gt;&#10;                      &lt;div className=&quot;text-primary-700 font-medium opacity-75&quot;&gt;&#10;                        {draggedAppointment.patient_first_name} {draggedAppointment.patient_last_name}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-primary-600 text-xs opacity-60&quot;&gt;&#10;                        Moving...&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Appointment, AppointmentStatus } from '../../types/Appointment';&#10;&#10;interface WeeklyViewProps {&#10;  isSlotSelected: (date: string, time: string) =&gt; boolean;&#10;  currentDate: Date;&#10;  appointments: Appointment[];&#10;  handleMouseUp: () =&gt; void;&#10;  handleMouseDown: (e: React.MouseEvent, date: string, time: string) =&gt; void;&#10;  handleMouseEnter: (date: string, time: string) =&gt; void;&#10;  onSelectSlot: (date: string, time: string) =&gt; void;&#10;  onAppointmentClick: (appointment: Appointment) =&gt; void;&#10;  onAppointmentDrop?: (appointment: Appointment, newDate: string, newTime: string) =&gt; void;&#10;  onDayClick?: (date: Date) =&gt; void;&#10;  getAppointmentDate: (apt: Appointment) =&gt; string;&#10;  formatAppointmentTime: (apt: Appointment) =&gt; string;&#10;  getAppointmentDuration: (apt: Appointment) =&gt; number;&#10;  getAppointmentBackgroundColor: (status: AppointmentStatus) =&gt; string;&#10;  getAppointmentTextColor: (status: AppointmentStatus) =&gt; string;&#10;  workingHours?: {&#10;    startTime: string;&#10;    endTime: string;&#10;  };&#10;  workingDays?: string[];&#10;}&#10;&#10;export const WeeklyView: React.FC&lt;WeeklyViewProps&gt; = ({&#10;  currentDate,&#10;  appointments,&#10;  handleMouseUp,&#10;  handleMouseDown,&#10;  handleMouseEnter,&#10;  onSelectSlot,&#10;  onAppointmentClick,&#10;  isSlotSelected,&#10;  getAppointmentDate,&#10;  formatAppointmentTime,&#10;  getAppointmentDuration,&#10;  getAppointmentBackgroundColor,&#10;  getAppointmentTextColor,&#10;  onAppointmentDrop,&#10;  onDayClick,&#10;  workingHours = { startTime: '08:00', endTime: '17:00' },&#10;  workingDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],&#10;}) =&gt; {&#10;  const [draggedAppointment, setDraggedAppointment] = React.useState&lt;Appointment | null&gt;(null);&#10;  const [dragPreviewPosition, setDragPreviewPosition] = React.useState&lt;{date: string, time: string} | null&gt;(null);&#10;&#10;  // Handle appointment drag start&#10;  const handleAppointmentDragStart = (e: React.DragEvent, appointment: Appointment) =&gt; {&#10;    e.stopPropagation();&#10;    setDraggedAppointment(appointment);&#10;    e.dataTransfer.setData('text/plain', appointment.id);&#10;    e.dataTransfer.effectAllowed = 'move';&#10;  };&#10;&#10;  // Handle appointment drag end&#10;  const handleAppointmentDragEnd = () =&gt; {&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drop on time slot&#10;  const handleTimeSlotDrop = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.stopPropagation();&#10;&#10;    if (draggedAppointment &amp;&amp; onAppointmentDrop) {&#10;      onAppointmentDrop(draggedAppointment, date, time);&#10;    }&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drag over to allow drop and show preview&#10;  const handleTimeSlotDragOver = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.dataTransfer.dropEffect = 'move';&#10;&#10;    if (draggedAppointment) {&#10;      setDragPreviewPosition({ date, time });&#10;    }&#10;  };&#10;&#10;  // Handle drag leave to hide preview when leaving time slot&#10;  const handleTimeSlotDragLeave = (e: React.DragEvent) =&gt; {&#10;    // Only hide preview if we're actually leaving the time slot area&#10;    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();&#10;    const { clientX, clientY } = e;&#10;&#10;    if (clientX &lt; rect.left || clientX &gt; rect.right || clientY &lt; rect.top || clientY &gt; rect.bottom) {&#10;      setDragPreviewPosition(null);&#10;    }&#10;  };&#10;&#10;  const weekStart = new Date(currentDate);&#10;  weekStart.setDate(currentDate.getDate() - currentDate.getDay());&#10;&#10;  const days = Array.from({ length: 7 }, (_, i) =&gt; {&#10;    const day = new Date(weekStart);&#10;    day.setDate(weekStart.getDate() + i);&#10;    return day;&#10;  });&#10;&#10;  // Check if a day is a working day&#10;  const isWorkingDay = (date: Date): boolean =&gt; {&#10;    const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });&#10;    return workingDays.includes(dayName);&#10;  };&#10;&#10;  // Generate time slots based on working hours&#10;  const generateTimeSlots = () =&gt; {&#10;    const startHour = parseInt(workingHours.startTime.split(':')[0]);&#10;    const endHour = parseInt(workingHours.endTime.split(':')[0]);&#10;    const totalHours = endHour - startHour;&#10;    const slotsPerHour = 4; // 15-minute intervals&#10;    const totalSlots = totalHours * slotsPerHour;&#10;&#10;    return Array.from({ length: totalSlots }, (_, i) =&gt; {&#10;      const hour = Math.floor(i / slotsPerHour) + startHour;&#10;      const minutes = (i % slotsPerHour) * 15;&#10;      return `${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;&#10;    });&#10;  };&#10;&#10;  const timeSlots = generateTimeSlots();&#10;&#10;  return (&#10;    &lt;div className=&quot;card overflow-hidden&quot;&gt;&#10;      {/* Week header */}&#10;      &lt;div className=&quot;grid grid-cols-8 border-b border-gray-300&quot;&gt;&#10;        &lt;div className=&quot;p-4&quot;&gt;&lt;/div&gt;&#10;        {days.map((day, index) =&gt; {&#10;          const isWorking = isWorkingDay(day);&#10;          const isToday = day.toDateString() === new Date().toDateString();&#10;          &#10;          return (&#10;            &lt;div&#10;              key={index}&#10;              className={`p-4 text-center slide-up-element cursor-pointer transition-colors duration-200 ${&#10;                isToday&#10;                  ? isWorking &#10;                    ? 'bg-primary-50 border-primary-200'&#10;                    : 'bg-red-200 hover:bg-red-250'&#10;                  : isWorking&#10;                  ? 'bg-neutral-50 hover:bg-primary-50'&#10;                  : 'bg-red-50 hover:bg-red-100'&#10;              }`}&#10;              style={{ animationDelay: `${index * 0.05}s` }}&#10;              onClick={() =&gt; onDayClick &amp;&amp; onDayClick(day)}&#10;            &gt;&#10;              &lt;p className={`text-sm ${&#10;                isToday&#10;                  ? isWorking &#10;                    ? 'text-neutral-500'&#10;                    : 'text-red-600'&#10;                  : isWorking &#10;                  ? 'text-neutral-500' &#10;                  : 'text-red-400'&#10;              }`}&gt;&#10;                {day.toLocaleDateString('en-US', { weekday: 'short' })}&#10;              &lt;/p&gt;&#10;              &lt;p className={`text-lg font-semibold ${&#10;                isToday&#10;                  ? isWorking&#10;                    ? 'text-primary-600'&#10;                    : 'text-red-700'&#10;                  : isWorking&#10;                  ? 'text-neutral-800'&#10;                  : 'text-red-600'&#10;              }`}&gt;&#10;                {day.getDate()}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;&#10;      {/* Time slots grid - 15 minute precision */}&#10;      &lt;div&#10;        className=&quot;flex-1 overflow-y-auto&quot;&#10;        onMouseUp={handleMouseUp}&#10;        onMouseLeave={handleMouseUp}&#10;        style={{ height: 'calc(100vh - 280px)' }}&#10;      &gt;&#10;        {timeSlots.map((time, timeIndex) =&gt; (&#10;          &lt;div key={time} className=&quot;grid grid-cols-8 hover:bg-primary-50 transition-all duration-300&quot;&gt;&#10;            &lt;div className=&quot;p-2 text-right text-sm text-neutral-500 bg-neutral-50 border-r border-gray-300 relative&quot;&gt;&#10;              {timeIndex % 4 === 1 ? ( // Show in the second slot (middle of the hour)&#10;                &lt;span className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2&quot;&gt;&#10;                  {time.split(':')[0]}:00&#10;                &lt;/span&gt;&#10;              ) : null}&#10;            &lt;/div&gt;&#10;            {days.map((day) =&gt; {&#10;              const dayStr = day.toISOString().split('T')[0];&#10;              const isSelected = isSlotSelected(dayStr, time);&#10;              const isWorking = isWorkingDay(day);&#10;              const dayAppointments = appointments.filter(apt =&gt; {&#10;                const aptDate = getAppointmentDate(apt);&#10;                const aptTime = formatAppointmentTime(apt);&#10;                const aptHour = parseInt(aptTime.split(':')[0]);&#10;                const aptMinute = parseInt(aptTime.split(':')[1]);&#10;                const timeHour = parseInt(time.split(':')[0]);&#10;                const timeMinute = parseInt(time.split(':')[1]);&#10;&#10;                // Only show appointment in its starting time slot&#10;                return aptDate === dayStr &amp;&amp;&#10;                  aptHour === timeHour &amp;&amp;&#10;                  aptMinute === timeMinute;&#10;              });&#10;&#10;              let borderBottomClass;&#10;              if (timeIndex % 4 === 3) {&#10;                borderBottomClass = 'border-b border-gray-300';&#10;              } else if (timeIndex % 2 === 1) {&#10;                borderBottomClass = 'border-b border-gray-200';&#10;              } else {&#10;                borderBottomClass = 'border-b border-gray-100';&#10;              }&#10;&#10;              // Apply red hue to non-working days&#10;              const baseBackground = isWorking ? '' : 'bg-red-50/30';&#10;              const hoverBackground = isWorking ? 'hover:bg-primary-50' : 'hover:bg-red-100/50';&#10;&#10;              return (&#10;                &lt;div&#10;                  key={`${dayStr}-${time}`}&#10;                  className={`p-1 min-h-[15px] relative group cursor-pointer border-r border-gray-200 ${borderBottomClass} ${baseBackground} ${hoverBackground} ${isSelected ? 'bg-blue-200 border-blue-400' : ''}`}&#10;                  style={{&#10;                    backgroundColor: isSelected ? 'rgba(59, 130, 246, 0.3)' : '',&#10;                    borderColor: isSelected ? '#3b82f6' : ''&#10;                  }}&#10;                  onClick={() =&gt; onSelectSlot(dayStr, time)}&#10;                  onMouseDown={(e) =&gt; handleMouseDown(e, dayStr, time)}&#10;                  onMouseEnter={() =&gt; handleMouseEnter(dayStr, time)}&#10;                  onDragOver={(e) =&gt; handleTimeSlotDragOver(e, dayStr, time)}&#10;                  onDrop={(e) =&gt; handleTimeSlotDrop(e, dayStr, time)}&#10;                  onDragLeave={handleTimeSlotDragLeave}&#10;                &gt;&#10;                  {dayAppointments.map((appointment, aptIndex) =&gt; (&#10;                    &lt;div&#10;                      key={appointment.id}&#10;                      className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-medium hover:opacity-80 transition-opacity cursor-pointer z-10&quot;&#10;                      style={{&#10;                        top: `${aptIndex * 2}px`,&#10;                        height: `${getAppointmentDuration(appointment)}px`,&#10;                        display: 'flex',&#10;                        flexDirection: 'column',&#10;                        justifyContent: 'center',&#10;                        backgroundColor: getAppointmentBackgroundColor(appointment.status),&#10;                        color: getAppointmentTextColor(appointment.status)&#10;                      }}&#10;                      onClick={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                        onAppointmentClick(appointment);&#10;                      }}&#10;                      onMouseEnter={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                      }}&#10;                      onMouseDown={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                      }}&#10;                      draggable&#10;                      onDragStart={(e) =&gt; handleAppointmentDragStart(e, appointment)}&#10;                      onDragEnd={handleAppointmentDragEnd}&#10;                    &gt;&#10;                      {appointment.patient_first_name} {appointment.patient_last_name}&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                  {/* Drag preview shadow - shows where appointment will be dropped */}&#10;                  {draggedAppointment &amp;&amp; dragPreviewPosition &amp;&amp;&#10;                   dragPreviewPosition.date === dayStr &amp;&amp; dragPreviewPosition.time === time &amp;&amp; (&#10;                    &lt;div&#10;                      className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-lg border-2 border-dashed border-primary-400 bg-primary-100/50 pointer-events-none z-20&quot;&#10;                      style={{&#10;                        top: '1px',&#10;                        height: `${getAppointmentDuration(draggedAppointment)}px`,&#10;                        display: 'flex',&#10;                        flexDirection: 'column',&#10;                        justifyContent: 'center',&#10;                        backdropFilter: 'blur(1px)',&#10;                      }}&#10;                    &gt;&#10;                      &lt;div className=&quot;text-primary-700 font-medium opacity-75&quot;&gt;&#10;                        {draggedAppointment.patient_first_name} {draggedAppointment.patient_last_name}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-primary-600 text-xs opacity-60&quot;&gt;&#10;                        Moving...&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/layout/Sidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/layout/Sidebar.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import { Link, useLocation } from 'react-router-dom';&#10;import { useTranslation } from '../../context/TranslationContext';&#10;import { useAuth } from '../../context/AuthContext';&#10;import { SettingsService } from '../../services/settingsService';&#10;&#10;interface NavItem {&#10;  path: string;&#10;  icon: string;&#10;  labelKey: keyof typeof import('../../i18n/locales/en.json');&#10;}&#10;&#10;const navItems: NavItem[] = [&#10;  {&#10;    path: '/dashboard',&#10;    icon: 'dashboard',&#10;    labelKey: 'dashboard'&#10;  },&#10;  {&#10;    path: '/calendar',&#10;    icon: 'calendar_today',&#10;    labelKey: 'calendar'&#10;  },&#10;  {&#10;    path: '/patients',&#10;    icon: 'people',&#10;    labelKey: 'patients'&#10;  },&#10;  {&#10;    path: '/reports',&#10;    icon: 'bar_chart',&#10;    labelKey: 'reports'&#10;  },&#10;  {&#10;    path: '/settings',&#10;    icon: 'settings',&#10;    labelKey: 'settings'&#10;  },&#10;];&#10;&#10;export const Sidebar: React.FC = () =&gt; {&#10;  const location = useLocation();&#10;  const { t } = useTranslation();&#10;  const { user, logout } = useAuth();&#10;  const [clinicName, setClinicName] = useState&lt;string&gt;('');&#10;&#10;  useEffect(() =&gt; {&#10;    const loadClinicName = async () =&gt; {&#10;      try {&#10;        // First try to get from cache&#10;        const cachedName = SettingsService.getClinicName();&#10;        if (cachedName) {&#10;          setClinicName(cachedName);&#10;        } else {&#10;          // If not in cache, fetch settings&#10;          const settings = await SettingsService.getSettings();&#10;          setClinicName(settings.clinic_name);&#10;        }&#10;      } catch (error) {&#10;        console.error('Error loading clinic name:', error);&#10;        // Fallback to user clinic name or default&#10;        setClinicName(user?.clinic_name || t('clinic_name'));&#10;      }&#10;    };&#10;&#10;    loadClinicName();&#10;  }, [user, t]);&#10;&#10;  const handleLogout = () =&gt; {&#10;    logout();&#10;  };&#10;&#10;  return (&#10;    &lt;aside className=&quot;fixed left-4 top-4 w-64 lg:w-80 bg-primary-800 h-[calc(100vh-2rem)] flex flex-col overflow-y-auto shadow-large z-50 rounded-3xl sidebar-scroll-left&quot;&gt;&#10;      &lt;div className=&quot;relative z-10 p-8 flex-1&quot;&gt;&#10;        {/* Logo Section */}&#10;        &lt;div className=&quot;flex items-center space-x-4 mb-12 group&quot;&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;div className=&quot;w-12 h-12 bg-primary-500 rounded-2xl flex items-center justify-center shadow-primary group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;              &lt;span className=&quot;material-icons-round text-white text-2xl&quot;&gt;local_hospital&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;h1 className=&quot;text-2xl font-bold text-white mb-1&quot;&gt;{clinicName || t('clinic_name')}&lt;/h1&gt;&#10;            &lt;p className=&quot;text-primary-200 text-sm&quot;&gt;Healthcare Excellence&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Navigation */}&#10;        &lt;nav className=&quot;space-y-3&quot;&gt;&#10;          {navItems.map((item) =&gt; {&#10;            const isActive = location.pathname === item.path;&#10;&#10;            return (&#10;              &lt;Link&#10;                key={item.path}&#10;                to={item.path}&#10;                className={`nav-item group relative overflow-hidden ${&#10;                  isActive ? 'nav-item-active' : 'nav-item-inactive'&#10;                }`}&#10;              &gt;&#10;                {/* Active indicator */}&#10;                {isActive &amp;&amp; (&#10;                  &lt;div className=&quot;absolute left-0 top-0 bottom-0 w-1 bg-primary-400 rounded-full&quot;&gt;&lt;/div&gt;&#10;                )}&#10;&#10;                {/* Icon with solid background */}&#10;                &lt;div className={`relative p-2 rounded-2xl ${isActive ? 'bg-primary-500' : 'bg-primary-700'} shadow-medium group-hover:scale-110 transition-all duration-300`}&gt;&#10;                  &lt;span className=&quot;material-icons-round text-white text-xl&quot;&gt;{item.icon}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Label */}&#10;                &lt;span className={`font-medium transition-colors duration-300 ${&#10;                  isActive ? 'text-white' : 'text-primary-200 group-hover:text-white'&#10;                }`}&gt;&#10;                  {t(item.labelKey)}&#10;                &lt;/span&gt;&#10;&#10;                {/* Hover effect */}&#10;                &lt;div className=&quot;absolute inset-0 bg-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-2xl&quot;&gt;&lt;/div&gt;&#10;              &lt;/Link&gt;&#10;            );&#10;          })}&#10;        &lt;/nav&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Bottom Section - User Profile centered with margin */}&#10;      &lt;div className=&quot;relative z-10 p-4 mx-4 mb-4&quot;&gt;&#10;        &lt;div className=&quot;bg-primary-700/50 rounded-3xl p-4 border border-primary-600 group hover:scale-105 transition-transform duration-300&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;relative&quot;&gt;&#10;              &lt;div className=&quot;w-10 h-10 bg-primary-400 rounded-full flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;material-icons-round text-white text-lg&quot;&gt;person&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-success-500 rounded-full border-2 border-white&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;              &lt;p className=&quot;text-white font-medium truncate&quot;&gt;&#10;                {user ? `Dr. ${user.first_name} ${user.last_name}` : 'Dr. Ahmed Wilson'}&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-primary-200 text-sm&quot;&gt;Administrator&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;button&#10;              onClick={handleLogout}&#10;              className=&quot;material-icons-round text-primary-200 group-hover:text-white transition-colors duration-300 hover:bg-primary-600 rounded-lg p-1&quot;&#10;              title=&quot;Logout&quot;&#10;            &gt;&#10;              logout&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/aside&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { Link, useLocation } from 'react-router-dom';&#10;import { useTranslation } from '../../context/TranslationContext';&#10;import { useAuth } from '../../context/AuthContext';&#10;import { SettingsService, settingsEventDispatcher } from '../../services/settingsService';&#10;&#10;interface NavItem {&#10;  path: string;&#10;  icon: string;&#10;  labelKey: keyof typeof import('../../i18n/locales/en.json');&#10;}&#10;&#10;const navItems: NavItem[] = [&#10;  {&#10;    path: '/dashboard',&#10;    icon: 'dashboard',&#10;    labelKey: 'dashboard'&#10;  },&#10;  {&#10;    path: '/calendar',&#10;    icon: 'calendar_today',&#10;    labelKey: 'calendar'&#10;  },&#10;  {&#10;    path: '/patients',&#10;    icon: 'people',&#10;    labelKey: 'patients'&#10;  },&#10;  {&#10;    path: '/reports',&#10;    icon: 'bar_chart',&#10;    labelKey: 'reports'&#10;  },&#10;  {&#10;    path: '/settings',&#10;    icon: 'settings',&#10;    labelKey: 'settings'&#10;  },&#10;];&#10;&#10;export const Sidebar: React.FC = () =&gt; {&#10;  const location = useLocation();&#10;  const { t } = useTranslation();&#10;  const { user, logout } = useAuth();&#10;  const [clinicName, setClinicName] = useState&lt;string&gt;('');&#10;&#10;  useEffect(() =&gt; {&#10;    const loadClinicName = async () =&gt; {&#10;      try {&#10;        // First try to get from cache&#10;        const cachedName = SettingsService.getClinicName();&#10;        if (cachedName) {&#10;          setClinicName(cachedName);&#10;        } else {&#10;          // If not in cache, fetch settings&#10;          const settings = await SettingsService.getSettings();&#10;          setClinicName(settings.clinic_name);&#10;        }&#10;      } catch (error) {&#10;        console.error('Error loading clinic name:', error);&#10;        // Fallback to user clinic name or default&#10;        setClinicName(user?.clinic_name || t('clinic_name'));&#10;      }&#10;    };&#10;&#10;    // Load clinic name initially&#10;    loadClinicName();&#10;&#10;    // Listen for settings updates&#10;    const handleSettingsUpdate = (event: any) =&gt; {&#10;      const updatedSettings = event.detail;&#10;      if (updatedSettings?.clinic_name) {&#10;        setClinicName(updatedSettings.clinic_name);&#10;      }&#10;    };&#10;&#10;    settingsEventDispatcher.addEventListener('settingsUpdated', handleSettingsUpdate);&#10;&#10;    // Cleanup listener on unmount&#10;    return () =&gt; {&#10;      settingsEventDispatcher.removeEventListener('settingsUpdated', handleSettingsUpdate);&#10;    };&#10;  }, [user, t]);&#10;&#10;  // Reload clinic name when user changes (for different doctor logins)&#10;  useEffect(() =&gt; {&#10;    const loadClinicNameForUser = async () =&gt; {&#10;      try {&#10;        // Clear cache when user changes to ensure fresh data&#10;        SettingsService.clearCache();&#10;        const settings = await SettingsService.getSettings();&#10;        setClinicName(settings.clinic_name);&#10;      } catch (error) {&#10;        console.error('Error loading clinic name for user:', error);&#10;        setClinicName(user?.clinic_name || t('clinic_name'));&#10;      }&#10;    };&#10;&#10;    if (user) {&#10;      loadClinicNameForUser();&#10;    }&#10;  }, [user?.id, t]); // Trigger when user ID changes&#10;&#10;  const handleLogout = () =&gt; {&#10;    // Clear settings cache on logout&#10;    SettingsService.clearCache();&#10;    logout();&#10;  };&#10;&#10;  return (&#10;    &lt;aside className=&quot;fixed left-4 top-4 w-64 lg:w-80 bg-primary-800 h-[calc(100vh-2rem)] flex flex-col overflow-y-auto shadow-large z-50 rounded-3xl sidebar-scroll-left&quot;&gt;&#10;      &lt;div className=&quot;relative z-10 p-8 flex-1&quot;&gt;&#10;        {/* Logo Section */}&#10;        &lt;div className=&quot;flex items-center space-x-4 mb-12 group&quot;&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;div className=&quot;w-12 h-12 bg-primary-500 rounded-2xl flex items-center justify-center shadow-primary group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;              &lt;span className=&quot;material-icons-round text-white text-2xl&quot;&gt;local_hospital&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;h1 className=&quot;text-2xl font-bold text-white mb-1&quot;&gt;{clinicName || t('clinic_name')}&lt;/h1&gt;&#10;            &lt;p className=&quot;text-primary-200 text-sm&quot;&gt;Healthcare Excellence&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Navigation */}&#10;        &lt;nav className=&quot;space-y-3&quot;&gt;&#10;          {navItems.map((item) =&gt; {&#10;            const isActive = location.pathname === item.path;&#10;&#10;            return (&#10;              &lt;Link&#10;                key={item.path}&#10;                to={item.path}&#10;                className={`nav-item group relative overflow-hidden ${&#10;                  isActive ? 'nav-item-active' : 'nav-item-inactive'&#10;                }`}&#10;              &gt;&#10;                {/* Active indicator */}&#10;                {isActive &amp;&amp; (&#10;                  &lt;div className=&quot;absolute left-0 top-0 bottom-0 w-1 bg-primary-400 rounded-full&quot;&gt;&lt;/div&gt;&#10;                )}&#10;&#10;                {/* Icon with solid background */}&#10;                &lt;div className={`relative p-2 rounded-2xl ${isActive ? 'bg-primary-500' : 'bg-primary-700'} shadow-medium group-hover:scale-110 transition-all duration-300`}&gt;&#10;                  &lt;span className=&quot;material-icons-round text-white text-xl&quot;&gt;{item.icon}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Label */}&#10;                &lt;span className={`font-medium transition-colors duration-300 ${&#10;                  isActive ? 'text-white' : 'text-primary-200 group-hover:text-white'&#10;                }`}&gt;&#10;                  {t(item.labelKey)}&#10;                &lt;/span&gt;&#10;&#10;                {/* Hover effect */}&#10;                &lt;div className=&quot;absolute inset-0 bg-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-2xl&quot;&gt;&lt;/div&gt;&#10;              &lt;/Link&gt;&#10;            );&#10;          })}&#10;        &lt;/nav&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Bottom Section - User Profile centered with margin */}&#10;      &lt;div className=&quot;relative z-10 p-4 mx-4 mb-4&quot;&gt;&#10;        &lt;div className=&quot;bg-primary-700/50 rounded-3xl p-4 border border-primary-600 group hover:scale-105 transition-transform duration-300&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;relative&quot;&gt;&#10;              &lt;div className=&quot;w-10 h-10 bg-primary-400 rounded-full flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;material-icons-round text-white text-lg&quot;&gt;person&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-success-500 rounded-full border-2 border-white&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;              &lt;p className=&quot;text-white font-medium truncate&quot;&gt;&#10;                {user ? `Dr. ${user.first_name} ${user.last_name}` : 'Dr. Ahmed Wilson'}&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-primary-200 text-sm&quot;&gt;Administrator&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;button&#10;              onClick={handleLogout}&#10;              className=&quot;material-icons-round text-primary-200 group-hover:text-white transition-colors duration-300 hover:bg-primary-600 rounded-lg p-1&quot;&#10;              title=&quot;Logout&quot;&#10;            &gt;&#10;              logout&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/aside&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/i18n/locales/ar.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/i18n/locales/ar.json" />
              <option name="originalContent" value="{&#10;  &quot;dashboard&quot;: &quot;لوحة التحكم&quot;,&#10;  &quot;calendar&quot;: &quot;التقويم&quot;,&#10;  &quot;patients&quot;: &quot;المرضى&quot;,&#10;  &quot;reports&quot;: &quot;التقارير&quot;,&#10;  &quot;settings&quot;: &quot;الإعدادات&quot;,&#10;  &quot;clinic_name&quot;: &quot;Imarisys Clinic&quot;,&#10;  &quot;patient_list&quot;: &quot;قائمة المرضى&quot;,&#10;  &quot;add_patient&quot;: &quot;إضافة مريض&quot;,&#10;  &quot;add_new_patient&quot;: &quot;إضافة مريض جديد&quot;,&#10;  &quot;search_patients&quot;: &quot;البحث عن المرضى...&quot;,&#10;  &quot;first_name&quot;: &quot;الاسم الأول&quot;,&#10;  &quot;last_name&quot;: &quot;اسم العائلة&quot;,&#10;  &quot;email&quot;: &quot;البريد الإلكتروني&quot;,&#10;  &quot;phone&quot;: &quot;الهاتف&quot;,&#10;  &quot;date_of_birth&quot;: &quot;تاريخ الميلاد&quot;,&#10;  &quot;address&quot;: &quot;العنوان&quot;,&#10;  &quot;save&quot;: &quot;حفظ&quot;,&#10;  &quot;cancel&quot;: &quot;إلغاء&quot;,&#10;  &quot;edit&quot;: &quot;تعديل&quot;,&#10;  &quot;delete&quot;: &quot;حذف&quot;,&#10;  &quot;view_details&quot;: &quot;عرض التفاصيل&quot;,&#10;  &quot;book_appointment&quot;: &quot;حجز موعد&quot;,&#10;  &quot;appointments&quot;: &quot;المواعيد&quot;,&#10;  &quot;today&quot;: &quot;اليوم&quot;,&#10;  &quot;tomorrow&quot;: &quot;غداً&quot;,&#10;  &quot;this_week&quot;: &quot;هذا الأسبوع&quot;,&#10;  &quot;next_week&quot;: &quot;الأسبوع القادم&quot;,&#10;  &quot;no_appointments&quot;: &quot;لا توجد مواعيد مجدولة&quot;,&#10;  &quot;appointment_time&quot;: &quot;وقت الموعد&quot;,&#10;  &quot;appointment_type&quot;: &quot;نوع الموعد&quot;,&#10;  &quot;notes&quot;: &quot;ملاحظات&quot;,&#10;  &quot;status&quot;: &quot;الحالة&quot;,&#10;  &quot;confirmed&quot;: &quot;مؤكد&quot;,&#10;  &quot;pending&quot;: &quot;في الانتظار&quot;,&#10;  &quot;completed&quot;: &quot;مكتمل&quot;,&#10;  &quot;cancelled&quot;: &quot;ملغى&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;تم إنشاء المريض بنجاح&quot;,&#10;  &quot;patient_added_to_system&quot;: &quot;تم إضافته إلى النظام.&quot;,&#10;  &quot;failed_to_create_patient&quot;: &quot;فشل في إنشاء المريض&quot;,&#10;  &quot;unable_to_create_patient&quot;: &quot;غير قادر على إنشاء المريض. يرجى التحقق من البيانات والمحاولة مرة أخرى.&quot;,&#10;  &quot;patient_updated_successfully&quot;: &quot;تم تحديث المريض بنجاح&quot;,&#10;  &quot;patient_info_updated&quot;: &quot;تم تحديث معلومات المريض.&quot;,&#10;  &quot;failed_to_update_patient&quot;: &quot;فشل في تحديث المريض&quot;,&#10;  &quot;unable_to_update_patient&quot;: &quot;غير قادر على تحديث المريض. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;patient_deleted_successfully&quot;: &quot;تم حذف المريض بنجاح&quot;,&#10;  &quot;patient_removed_from_system&quot;: &quot;تم إزالته من النظام.&quot;,&#10;  &quot;failed_to_delete_patient&quot;: &quot;فشل في حذف المريض&quot;,&#10;  &quot;unable_to_delete_patient&quot;: &quot;غير قادر على حذف المريض. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;patient_not_found&quot;: &quot;المريض غير موجود&quot;,&#10;  &quot;back_to_list&quot;: &quot;العودة إلى القائمة&quot;,&#10;  &quot;edit_patient&quot;: &quot;تعديل المريض&quot;,&#10;  &quot;patient_details&quot;: &quot;تفاصيل المريض&quot;,&#10;  &quot;patients_count&quot;: &quot;{count} من {total} مريض&quot;,&#10;  &quot;no_patients_found&quot;: &quot;لم يتم العثور على مرضى&quot;,&#10;  &quot;start_by_adding_patient&quot;: &quot;ابدأ بإضافة أول مريض إلى النظام.&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;فشل في تحميل المرضى&quot;,&#10;  &quot;connection_error&quot;: &quot;فشل في تحميل المرضى. يرجى التحقق من الاتصال والمحاولة مرة أخرى.&quot;,&#10;  &quot;confirm_delete_patient&quot;: &quot;هل أنت متأكد من حذف {name}؟ لا يمكن التراجع عن هذا الإجراء.&quot;,&#10;  &quot;gender&quot;: &quot;الجنس&quot;,&#10;  &quot;male&quot;: &quot;ذكر&quot;,&#10;  &quot;female&quot;: &quot;أنثى&quot;,&#10;  &quot;other&quot;: &quot;آخر&quot;,&#10;  &quot;street_address&quot;: &quot;عنوان الشارع&quot;,&#10;  &quot;city&quot;: &quot;المدينة&quot;,&#10;  &quot;state&quot;: &quot;المحافظة/الولاية&quot;,&#10;  &quot;zip_code&quot;: &quot;الرمز البريدي&quot;,&#10;  &quot;saving&quot;: &quot;جاري الحفظ...&quot;,&#10;  &quot;create_patient&quot;: &quot;إنشاء مريض&quot;,&#10;  &quot;update_patient&quot;: &quot;تحديث المريض&quot;,&#10;  &quot;first_name_required&quot;: &quot;الاسم الأول مطلوب&quot;,&#10;  &quot;last_name_required&quot;: &quot;اسم العائلة مطلوب&quot;,&#10;  &quot;phone_required&quot;: &quot;الهاتف مطلوب&quot;,&#10;  &quot;email_invalid&quot;: &quot;البريد الإلكتروني غير صحيح&quot;,&#10;  &quot;years_old&quot;: &quot;سنة&quot;,&#10;  &quot;try_adjusting_search&quot;: &quot;حاول تعديل معايير البحث&quot;,&#10;  &quot;back_to_patients&quot;: &quot;← العودة للمرضى&quot;,&#10;  &quot;age&quot;: &quot;العمر&quot;,&#10;  &quot;years&quot;: &quot;سنة&quot;,&#10;  &quot;contact_information&quot;: &quot;معلومات الاتصال&quot;,&#10;  &quot;address_information&quot;: &quot;معلومات العنوان&quot;,&#10;  &quot;upcoming_appointments&quot;: &quot;المواعيد القادمة&quot;,&#10;  &quot;previous_appointments&quot;: &quot;المواعيد السابقة&quot;,&#10;  &quot;no_upcoming_appointments&quot;: &quot;لا توجد مواعيد قادمة&quot;,&#10;  &quot;no_previous_appointments&quot;: &quot;لا توجد مواعيد سابقة&quot;,&#10;  &quot;appointment_booked&quot;: &quot;تم حجز الموعد&quot;,&#10;  &quot;appointment_booked_success&quot;: &quot;تم حجز الموعد بنجاح.&quot;,&#10;  &quot;booking_failed&quot;: &quot;فشل في الحجز&quot;,&#10;  &quot;unable_to_book&quot;: &quot;غير قادر على حجز الموعد&quot;,&#10;  &quot;appointment_updated&quot;: &quot;تم تحديث الموعد&quot;,&#10;  &quot;appointment_updated_success&quot;: &quot;تم تحديث الموعد بنجاح.&quot;,&#10;  &quot;update_failed&quot;: &quot;فشل في التحديث&quot;,&#10;  &quot;unable_to_update_appointment&quot;: &quot;غير قادر على تحديث الموعد&quot;,&#10;  &quot;appointment_cancelled&quot;: &quot;تم إلغاء الموعد&quot;,&#10;  &quot;appointment_cancelled_success&quot;: &quot;تم إلغاء الموعد بنجاح.&quot;,&#10;  &quot;cancellation_failed&quot;: &quot;فشل في الإلغاء&quot;,&#10;  &quot;unable_to_cancel&quot;: &quot;غير قادر على إلغاء الموعد&quot;,&#10;  &quot;status_updated&quot;: &quot;تم تحديث الحالة&quot;,&#10;  &quot;status_updated_to&quot;: &quot;تم تحديث حالة الموعد إلى {status}.&quot;,&#10;  &quot;unable_to_update_status&quot;: &quot;غير قادر على تحديث حالة الموعد&quot;,&#10;  &quot;appointment_deleted&quot;: &quot;تم حذف الموعد&quot;,&#10;  &quot;appointment_deleted_success&quot;: &quot;تم حذف الموعد نهائياً.&quot;,&#10;  &quot;deletion_failed&quot;: &quot;فشل في الحذف&quot;,&#10;  &quot;unable_to_delete_appointment&quot;: &quot;غير قادر على حذف الموعد&quot;,&#10;  &quot;failed_to_load_appointments&quot;: &quot;فشل في تحميل المواعيد&quot;,&#10;  &quot;unable_to_load_appointments&quot;: &quot;غير قادر على تحميل مواعيد المريض&quot;,&#10;  &quot;search&quot;: &quot;بحث&quot;,&#10;  &quot;clear&quot;: &quot;مسح&quot;,&#10;  &quot;age_from&quot;: &quot;العمر من&quot;,&#10;  &quot;age_to&quot;: &quot;العمر إلى&quot;,&#10;  &quot;book_new_appointment&quot;: &quot;حجز موعد جديد&quot;,&#10;  &quot;patient&quot;: &quot;المريض&quot;,&#10;  &quot;appointment_title&quot;: &quot;عنوان الموعد&quot;,&#10;  &quot;appointment_title_required&quot;: &quot;عنوان الموعد *&quot;,&#10;  &quot;appointment_title_placeholder&quot;: &quot;مثل: فحص دوري، زيارة متابعة&quot;,&#10;  &quot;date&quot;: &quot;التاريخ&quot;,&#10;  &quot;date_required&quot;: &quot;التاريخ *&quot;,&#10;  &quot;start_time&quot;: &quot;وقت البداية&quot;,&#10;  &quot;start_time_required&quot;: &quot;وقت البداية *&quot;,&#10;  &quot;end_time&quot;: &quot;وقت النهاية&quot;,&#10;  &quot;end_time_required&quot;: &quot;وقت النهاية *&quot;,&#10;  &quot;notes_optional&quot;: &quot;ملاحظات (اختيارية)&quot;,&#10;  &quot;notes_placeholder&quot;: &quot;ملاحظات أو تعليمات إضافية...&quot;,&#10;  &quot;booking&quot;: &quot;جاري الحجز...&quot;,&#10;  &quot;title_required&quot;: &quot;العنوان مطلوب&quot;,&#10;  &quot;date_required_error&quot;: &quot;التاريخ مطلوب&quot;,&#10;  &quot;date_past_error&quot;: &quot;لا يمكن أن يكون التاريخ في الماضي&quot;,&#10;  &quot;start_time_required_error&quot;: &quot;وقت البداية مطلوب&quot;,&#10;  &quot;end_time_required_error&quot;: &quot;وقت النهاية مطلوب&quot;,&#10;  &quot;end_time_after_start&quot;: &quot;يجب أن يكون وقت النهاية بعد وقت البداية&quot;,&#10;  &quot;appointment_confirmed&quot;: &quot;تم تأكيد الموعد&quot;,&#10;  &quot;appointment_booked_with&quot;: &quot;تم حجز موعد مع {name} بنجاح.&quot;,&#10;  &quot;booking_error&quot;: &quot;حدث خطأ في حجز الموعد. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;loading_appointment_types&quot;: &quot;جاري تحميل أنواع المواعيد...&quot;,&#10;  &quot;consultation_with&quot;: &quot;استشارة مع {name}&quot;,&#10;  &quot;min&quot;: &quot;دقيقة&quot;,&#10;  &quot;appointment_calendar&quot;: &quot;تقويم المواعيد&quot;,&#10;  &quot;manage_schedule_appointments&quot;: &quot;إدارة وجدولة مواعيد المرضى.&quot;,&#10;  &quot;new_appointment&quot;: &quot;موعد جديد&quot;,&#10;  &quot;month&quot;: &quot;شهر&quot;,&#10;  &quot;week&quot;: &quot;أسبوع&quot;,&#10;  &quot;day&quot;: &quot;يوم&quot;,&#10;  &quot;loading_appointments&quot;: &quot;جاري تحميل المواعيد...&quot;,&#10;  &quot;error&quot;: &quot;خطأ&quot;,&#10;  &quot;success&quot;: &quot;نجح&quot;,&#10;  &quot;appointment_updated_successfully&quot;: &quot;تم تحديث الموعد بنجاح&quot;,&#10;  &quot;appointment_status_updated_successfully&quot;: &quot;تم تحديث حالة الموعد بنجاح&quot;,&#10;  &quot;appointment_cancelled_successfully&quot;: &quot;تم إلغاء الموعد بنجاح&quot;,&#10;  &quot;appointment_deleted_successfully&quot;: &quot;تم حذف الموعد بنجاح&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;فشل في تحميل المرضى&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;تم إنشاء المريض بنجاح.&quot;,&#10;  &quot;failed_to_create_patient_booking&quot;: &quot;فشل في إنشاء المريض&quot;,&#10;  &quot;select_patient&quot;: &quot;اختيار مريض&quot;,&#10;  &quot;search_for_patient&quot;: &quot;البحث عن مريض...&quot;,&#10;  &quot;create_new_patient&quot;: &quot;إنشاء مريض جديد&quot;,&#10;  &quot;select_time_slot&quot;: &quot;اختيار الوقت المتاح&quot;,&#10;  &quot;select_patient_for_appointment&quot;: &quot;اختيار مريض للموعد&quot;,&#10;  &quot;or&quot;: &quot;أو&quot;,&#10;  &quot;previous&quot;: &quot;السابق&quot;,&#10;  &quot;next&quot;: &quot;التالي&quot;,&#10;  &quot;today&quot;: &quot;اليوم&quot;,&#10;  &quot;sunday&quot;: &quot;الأحد&quot;,&#10;  &quot;monday&quot;: &quot;الاثنين&quot;,&#10;  &quot;tuesday&quot;: &quot;الثلاثاء&quot;,&#10;  &quot;wednesday&quot;: &quot;الأربعاء&quot;,&#10;  &quot;thursday&quot;: &quot;الخميس&quot;,&#10;  &quot;friday&quot;: &quot;الجمعة&quot;,&#10;  &quot;saturday&quot;: &quot;السبت&quot;,&#10;  &quot;sun&quot;: &quot;أحد&quot;,&#10;  &quot;mon&quot;: &quot;اثن&quot;,&#10;  &quot;tue&quot;: &quot;ثلا&quot;,&#10;  &quot;wed&quot;: &quot;أرب&quot;,&#10;  &quot;thu&quot;: &quot;خمي&quot;,&#10;  &quot;fri&quot;: &quot;جمع&quot;,&#10;  &quot;sat&quot;: &quot;سبت&quot;,&#10;  &quot;january&quot;: &quot;يناير&quot;,&#10;  &quot;february&quot;: &quot;فبراير&quot;,&#10;  &quot;march&quot;: &quot;مارس&quot;,&#10;  &quot;april&quot;: &quot;أبريل&quot;,&#10;  &quot;may&quot;: &quot;مايو&quot;,&#10;  &quot;june&quot;: &quot;يونيو&quot;,&#10;  &quot;july&quot;: &quot;يوليو&quot;,&#10;  &quot;august&quot;: &quot;أغسطس&quot;,&#10;  &quot;september&quot;: &quot;سبتمبر&quot;,&#10;  &quot;october&quot;: &quot;أكتوبر&quot;,&#10;  &quot;november&quot;: &quot;نوفمبر&quot;,&#10;  &quot;december&quot;: &quot;ديسمبر&quot;,&#10;  &quot;am&quot;: &quot;ص&quot;,&#10;  &quot;pm&quot;: &quot;م&quot;,&#10;  &quot;select_date_time&quot;: &quot;اختيار التاريخ والوقت&quot;,&#10;  &quot;select_date_time_description&quot;: &quot;اختر التاريخ والوقت المفضل لديك للموعد.&quot;,&#10;  &quot;appointment_duration&quot;: &quot;مدة الموعد&quot;,&#10;  &quot;available_time_slots&quot;: &quot;الأوقات المتاحة&quot;,&#10;  &quot;or_set_custom_time&quot;: &quot;أو تحديد وقت مخصص&quot;,&#10;  &quot;selected_appointment_time&quot;: &quot;وقت الموعد المحدد&quot;,&#10;  &quot;continue_to_patient_selection&quot;: &quot;متابعة لاختيار المريض&quot;,&#10;  &quot;for&quot;: &quot;لـ&quot;,&#10;  &quot;at&quot;: &quot;في&quot;,&#10;  &quot;back_to_time&quot;: &quot;العودة للوقت&quot;,&#10;  &quot;search_by_name_email&quot;: &quot;البحث بالاسم أو البريد الإلكتروني...&quot;,&#10;  &quot;or_create_new_patient&quot;: &quot;أو إنشاء مريض جديد&quot;,&#10;  &quot;back_to_patient_search&quot;: &quot;العودة لبحث المريض&quot;,&#10;  &quot;confirm_appointment&quot;: &quot;تأكيد الموعد&quot;,&#10;  &quot;back_to_patient&quot;: &quot;العودة للمريض&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;dashboard&quot;: &quot;لوحة التحكم&quot;,&#10;  &quot;calendar&quot;: &quot;التقويم&quot;,&#10;  &quot;patients&quot;: &quot;المرضى&quot;,&#10;  &quot;reports&quot;: &quot;التقارير&quot;,&#10;  &quot;settings&quot;: &quot;الإعدادات&quot;,&#10;  &quot;clinic_name&quot;: &quot;Imarisys Clinic&quot;,&#10;  &quot;patient_list&quot;: &quot;قائمة المرضى&quot;,&#10;  &quot;add_patient&quot;: &quot;إضافة مريض&quot;,&#10;  &quot;add_new_patient&quot;: &quot;إضافة مريض جديد&quot;,&#10;  &quot;search_patients&quot;: &quot;البحث عن المرضى...&quot;,&#10;  &quot;first_name&quot;: &quot;الاسم الأول&quot;,&#10;  &quot;last_name&quot;: &quot;اسم العائلة&quot;,&#10;  &quot;email&quot;: &quot;البريد الإلكتروني&quot;,&#10;  &quot;phone&quot;: &quot;الهاتف&quot;,&#10;  &quot;date_of_birth&quot;: &quot;تاريخ الميلاد&quot;,&#10;  &quot;address&quot;: &quot;العنوان&quot;,&#10;  &quot;save&quot;: &quot;حفظ&quot;,&#10;  &quot;cancel&quot;: &quot;إلغاء&quot;,&#10;  &quot;edit&quot;: &quot;تعديل&quot;,&#10;  &quot;delete&quot;: &quot;حذف&quot;,&#10;  &quot;view_details&quot;: &quot;عرض التفاصيل&quot;,&#10;  &quot;book_appointment&quot;: &quot;حجز موعد&quot;,&#10;  &quot;appointments&quot;: &quot;المواعيد&quot;,&#10;  &quot;today&quot;: &quot;اليوم&quot;,&#10;  &quot;tomorrow&quot;: &quot;غداً&quot;,&#10;  &quot;this_week&quot;: &quot;هذا الأسبوع&quot;,&#10;  &quot;next_week&quot;: &quot;الأسبوع القادم&quot;,&#10;  &quot;no_appointments&quot;: &quot;لا توجد مواعيد مجدولة&quot;,&#10;  &quot;appointment_time&quot;: &quot;وقت الموعد&quot;,&#10;  &quot;appointment_type&quot;: &quot;نوع الموعد&quot;,&#10;  &quot;notes&quot;: &quot;ملاحظات&quot;,&#10;  &quot;status&quot;: &quot;الحالة&quot;,&#10;  &quot;confirmed&quot;: &quot;مؤكد&quot;,&#10;  &quot;pending&quot;: &quot;في الانتظار&quot;,&#10;  &quot;completed&quot;: &quot;مكتمل&quot;,&#10;  &quot;cancelled&quot;: &quot;ملغى&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;تم إنشاء المريض بنجاح&quot;,&#10;  &quot;patient_added_to_system&quot;: &quot;تم إضافته إلى النظام.&quot;,&#10;  &quot;failed_to_create_patient&quot;: &quot;فشل في إنشاء المريض&quot;,&#10;  &quot;unable_to_create_patient&quot;: &quot;غير قادر على إنشاء المريض. يرجى التحقق من البيانات والمحاولة مرة أخرى.&quot;,&#10;  &quot;patient_updated_successfully&quot;: &quot;تم تحديث المريض بنجاح&quot;,&#10;  &quot;patient_info_updated&quot;: &quot;تم تحديث معلومات المريض.&quot;,&#10;  &quot;failed_to_update_patient&quot;: &quot;فشل في تحديث المريض&quot;,&#10;  &quot;unable_to_update_patient&quot;: &quot;غير قادر على تحديث المريض. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;patient_deleted_successfully&quot;: &quot;تم حذف المريض بنجاح&quot;,&#10;  &quot;patient_removed_from_system&quot;: &quot;تم إزالته من النظام.&quot;,&#10;  &quot;failed_to_delete_patient&quot;: &quot;فشل في حذف المريض&quot;,&#10;  &quot;unable_to_delete_patient&quot;: &quot;غير قادر على حذف المريض. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;patient_not_found&quot;: &quot;المريض غير موجود&quot;,&#10;  &quot;back_to_list&quot;: &quot;العودة إلى القائمة&quot;,&#10;  &quot;edit_patient&quot;: &quot;تعديل المريض&quot;,&#10;  &quot;patient_details&quot;: &quot;تفاصيل المريض&quot;,&#10;  &quot;patients_count&quot;: &quot;{count} من {total} مريض&quot;,&#10;  &quot;no_patients_found&quot;: &quot;لم يتم العثور على مرضى&quot;,&#10;  &quot;start_by_adding_patient&quot;: &quot;ابدأ بإضافة أول مريض لديك إلى النظام.&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;فشل في تحميل المرضى&quot;,&#10;  &quot;connection_error&quot;: &quot;فشل في تحميل المرضى. يرجى التحقق من الاتصال والمحاولة مرة أخرى.&quot;,&#10;  &quot;confirm_delete_patient&quot;: &quot;هل أنت متأكد من أنك تريد حذف {name}؟ لا يمكن التراجع عن هذا الإجراء.&quot;,&#10;  &quot;gender&quot;: &quot;الجنس&quot;,&#10;  &quot;male&quot;: &quot;ذكر&quot;,&#10;  &quot;female&quot;: &quot;أنثى&quot;,&#10;  &quot;other&quot;: &quot;آخر&quot;,&#10;  &quot;street_address&quot;: &quot;عنوان الشارع&quot;,&#10;  &quot;city&quot;: &quot;المدينة&quot;,&#10;  &quot;state&quot;: &quot;الولاية/المحافظة&quot;,&#10;  &quot;zip_code&quot;: &quot;الرمز البريدي&quot;,&#10;  &quot;saving&quot;: &quot;جاري الحفظ...&quot;,&#10;  &quot;create_patient&quot;: &quot;إنشاء مريض&quot;,&#10;  &quot;update_patient&quot;: &quot;تحديث المريض&quot;,&#10;  &quot;first_name_required&quot;: &quot;الاسم الأول مطلوب&quot;,&#10;  &quot;last_name_required&quot;: &quot;اسم العائلة مطلوب&quot;,&#10;  &quot;phone_required&quot;: &quot;الهاتف مطلوب&quot;,&#10;  &quot;email_invalid&quot;: &quot;البريد الإلكتروني غير صحيح&quot;,&#10;  &quot;years_old&quot;: &quot;سنة&quot;,&#10;  &quot;try_adjusting_search&quot;: &quot;حاول تعديل معايير البحث&quot;,&#10;  &quot;back_to_patients&quot;: &quot;← العودة إلى المرضى&quot;,&#10;  &quot;age&quot;: &quot;العمر&quot;,&#10;  &quot;years&quot;: &quot;سنوات&quot;,&#10;  &quot;contact_information&quot;: &quot;معلومات الاتصال&quot;,&#10;  &quot;address_information&quot;: &quot;معلومات العنوان&quot;,&#10;  &quot;upcoming_appointments&quot;: &quot;المواعيد القادمة&quot;,&#10;  &quot;previous_appointments&quot;: &quot;المواعيد السابقة&quot;,&#10;  &quot;no_upcoming_appointments&quot;: &quot;لا توجد مواعيد قادمة&quot;,&#10;  &quot;no_previous_appointments&quot;: &quot;لا توجد مواعيد سابقة&quot;,&#10;  &quot;appointment_booked&quot;: &quot;تم حجز الموعد&quot;,&#10;  &quot;appointment_booked_success&quot;: &quot;تم حجز الموعد بنجاح.&quot;,&#10;  &quot;booking_failed&quot;: &quot;فشل في الحجز&quot;,&#10;  &quot;unable_to_book&quot;: &quot;غير قادر على حجز الموعد&quot;,&#10;  &quot;appointment_updated&quot;: &quot;تم تحديث الموعد&quot;,&#10;  &quot;appointment_updated_success&quot;: &quot;تم تحديث الموعد بنجاح.&quot;,&#10;  &quot;update_failed&quot;: &quot;فشل في التحديث&quot;,&#10;  &quot;unable_to_update_appointment&quot;: &quot;غير قادر على تحديث الموعد&quot;,&#10;  &quot;appointment_cancelled&quot;: &quot;تم إلغاء الموعد&quot;,&#10;  &quot;appointment_cancelled_success&quot;: &quot;تم إلغاء الموعد بنجاح.&quot;,&#10;  &quot;cancellation_failed&quot;: &quot;فشل في الإلغاء&quot;,&#10;  &quot;unable_to_cancel&quot;: &quot;غير قادر على إلغاء الموعد&quot;,&#10;  &quot;status_updated&quot;: &quot;تم تحديث الحالة&quot;,&#10;  &quot;status_updated_to&quot;: &quot;تم تحديث حالة الموعد إلى {status}.&quot;,&#10;  &quot;unable_to_update_status&quot;: &quot;غير قادر على تحديث حالة الموعد&quot;,&#10;  &quot;appointment_deleted&quot;: &quot;تم حذف الموعد&quot;,&#10;  &quot;appointment_deleted_success&quot;: &quot;تم حذف الموعد نهائياً.&quot;,&#10;  &quot;deletion_failed&quot;: &quot;فشل في الحذف&quot;,&#10;  &quot;unable_to_delete_appointment&quot;: &quot;غير قادر على حذف الموعد&quot;,&#10;  &quot;failed_to_load_appointments&quot;: &quot;فشل في تحميل المواعيد&quot;,&#10;  &quot;unable_to_load_appointments&quot;: &quot;غير قادر على تحميل مواعيد المريض&quot;,&#10;  &quot;search&quot;: &quot;بحث&quot;,&#10;  &quot;clear&quot;: &quot;مسح&quot;,&#10;  &quot;age_from&quot;: &quot;العمر من&quot;,&#10;  &quot;age_to&quot;: &quot;العمر إلى&quot;,&#10;  &quot;book_new_appointment&quot;: &quot;حجز موعد جديد&quot;,&#10;  &quot;patient&quot;: &quot;مريض&quot;,&#10;  &quot;appointment_title&quot;: &quot;عنوان الموعد&quot;,&#10;  &quot;appointment_title_required&quot;: &quot;عنوان الموعد *&quot;,&#10;  &quot;appointment_title_placeholder&quot;: &quot;مثال: فحص روتيني، زيارة متابعة&quot;,&#10;  &quot;date&quot;: &quot;التاريخ&quot;,&#10;  &quot;date_required&quot;: &quot;التاريخ *&quot;,&#10;  &quot;start_time&quot;: &quot;وقت البداية&quot;,&#10;  &quot;start_time_required&quot;: &quot;وقت البداية *&quot;,&#10;  &quot;end_time&quot;: &quot;وقت النهاية&quot;,&#10;  &quot;end_time_required&quot;: &quot;وقت النهاية *&quot;,&#10;  &quot;notes_optional&quot;: &quot;ملاحظات (اختيارية)&quot;,&#10;  &quot;notes_placeholder&quot;: &quot;ملاحظات أو تعليمات إضافية...&quot;,&#10;  &quot;booking&quot;: &quot;جاري الحجز...&quot;,&#10;  &quot;title_required&quot;: &quot;العنوان مطلوب&quot;,&#10;  &quot;date_required_error&quot;: &quot;التاريخ مطلوب&quot;,&#10;  &quot;date_past_error&quot;: &quot;لا يمكن أن يكون التاريخ في الماضي&quot;,&#10;  &quot;start_time_required_error&quot;: &quot;وقت البداية مطلوب&quot;,&#10;  &quot;end_time_required_error&quot;: &quot;وقت النهاية مطلوب&quot;,&#10;  &quot;end_time_after_start&quot;: &quot;يجب أن يكون وقت النهاية بعد وقت البداية&quot;,&#10;  &quot;appointment_confirmed&quot;: &quot;تم تأكيد الموعد&quot;,&#10;  &quot;appointment_booked_with&quot;: &quot;تم حجز موعد مع {name} بنجاح.&quot;,&#10;  &quot;booking_error&quot;: &quot;حدثت مشكلة في حجز الموعد. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;loading_appointment_types&quot;: &quot;جاري تحميل أنواع المواعيد...&quot;,&#10;  &quot;consultation_with&quot;: &quot;استشارة مع {name}&quot;,&#10;  &quot;min&quot;: &quot;دقيقة&quot;,&#10;  &quot;appointment_calendar&quot;: &quot;تقويم المواعيد&quot;,&#10;  &quot;manage_schedule_appointments&quot;: &quot;إدارة وجدولة مواعيد المرضى.&quot;,&#10;  &quot;new_appointment&quot;: &quot;موعد جديد&quot;,&#10;  &quot;month&quot;: &quot;شهر&quot;,&#10;  &quot;week&quot;: &quot;أسبوع&quot;,&#10;  &quot;day&quot;: &quot;يوم&quot;,&#10;  &quot;loading_appointments&quot;: &quot;جاري تحميل المواعيد...&quot;,&#10;  &quot;error&quot;: &quot;خطأ&quot;,&#10;  &quot;success&quot;: &quot;نجح&quot;,&#10;  &quot;appointment_updated_successfully&quot;: &quot;تم تحديث الموعد بنجاح&quot;,&#10;  &quot;appointment_status_updated_successfully&quot;: &quot;تم تحديث حالة الموعد بنجاح&quot;,&#10;  &quot;appointment_cancelled_successfully&quot;: &quot;تم إلغاء الموعد بنجاح&quot;,&#10;  &quot;appointment_deleted_successfully&quot;: &quot;تم حذف الموعد بنجاح&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;فشل في تحميل المرضى&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;تم إنشاء المريض بنجاح.&quot;,&#10;  &quot;failed_to_create_patient_booking&quot;: &quot;فشل في إنشاء المريض&quot;,&#10;  &quot;select_patient&quot;: &quot;اختيار مريض&quot;,&#10;  &quot;search_for_patient&quot;: &quot;البحث عن مريض...&quot;,&#10;  &quot;create_new_patient&quot;: &quot;إنشاء مريض جديد&quot;,&#10;  &quot;select_time_slot&quot;: &quot;اختيار فترة زمنية&quot;,&#10;  &quot;select_patient_for_appointment&quot;: &quot;اختيار مريض للموعد&quot;,&#10;  &quot;or&quot;: &quot;أو&quot;,&#10;  &quot;previous&quot;: &quot;السابق&quot;,&#10;  &quot;next&quot;: &quot;التالي&quot;,&#10;  &quot;today&quot;: &quot;اليوم&quot;,&#10;  &quot;sunday&quot;: &quot;الأحد&quot;,&#10;  &quot;monday&quot;: &quot;الاثنين&quot;,&#10;  &quot;tuesday&quot;: &quot;الثلاثاء&quot;,&#10;  &quot;wednesday&quot;: &quot;الأربعاء&quot;,&#10;  &quot;thursday&quot;: &quot;الخميس&quot;,&#10;  &quot;friday&quot;: &quot;الجمعة&quot;,&#10;  &quot;saturday&quot;: &quot;السبت&quot;,&#10;  &quot;sun&quot;: &quot;أحد&quot;,&#10;  &quot;mon&quot;: &quot;اثن&quot;,&#10;  &quot;tue&quot;: &quot;ثلا&quot;,&#10;  &quot;wed&quot;: &quot;أرب&quot;,&#10;  &quot;thu&quot;: &quot;خمي&quot;,&#10;  &quot;fri&quot;: &quot;جمع&quot;,&#10;  &quot;sat&quot;: &quot;سبت&quot;,&#10;  &quot;january&quot;: &quot;يناير&quot;,&#10;  &quot;february&quot;: &quot;فبراير&quot;,&#10;  &quot;march&quot;: &quot;مارس&quot;,&#10;  &quot;april&quot;: &quot;أبريل&quot;,&#10;  &quot;may&quot;: &quot;مايو&quot;,&#10;  &quot;june&quot;: &quot;يونيو&quot;,&#10;  &quot;july&quot;: &quot;يوليو&quot;,&#10;  &quot;august&quot;: &quot;أغسطس&quot;,&#10;  &quot;september&quot;: &quot;سبتمبر&quot;,&#10;  &quot;october&quot;: &quot;أكتوبر&quot;,&#10;  &quot;november&quot;: &quot;نوفمبر&quot;,&#10;  &quot;december&quot;: &quot;ديسمبر&quot;,&#10;  &quot;am&quot;: &quot;ص&quot;,&#10;  &quot;pm&quot;: &quot;م&quot;,&#10;  &quot;select_date_time&quot;: &quot;اختيار التاريخ والوقت&quot;,&#10;  &quot;select_date_time_description&quot;: &quot;اختر التاريخ والوقت المفضل للموعد.&quot;,&#10;  &quot;appointment_duration&quot;: &quot;مدة الموعد&quot;,&#10;  &quot;available_time_slots&quot;: &quot;الأوقات المتاحة&quot;,&#10;  &quot;or_set_custom_time&quot;: &quot;أو تحديد وقت مخصص&quot;,&#10;  &quot;selected_appointment_time&quot;: &quot;وقت الموعد المحدد&quot;,&#10;  &quot;continue_to_patient_selection&quot;: &quot;المتابعة إلى اختيار المريض&quot;,&#10;  &quot;for&quot;: &quot;لـ&quot;,&#10;  &quot;at&quot;: &quot;في&quot;,&#10;  &quot;back_to_time&quot;: &quot;العودة إلى الوقت&quot;,&#10;  &quot;search_by_name_email&quot;: &quot;البحث بالاسم أو البريد الإلكتروني...&quot;,&#10;  &quot;or_create_new_patient&quot;: &quot;أو إنشاء مريض جديد&quot;,&#10;  &quot;back_to_patient_search&quot;: &quot;العودة إلى البحث عن مريض&quot;,&#10;  &quot;confirm_appointment&quot;: &quot;تأكيد الموعد&quot;,&#10;  &quot;back_to_patient&quot;: &quot;العودة إلى المريض&quot;,&#10;&#10;  &quot;settings_saved_successfully&quot;: &quot;تم حفظ الإعدادات بنجاح&quot;,&#10;  &quot;failed_to_save_settings&quot;: &quot;فشل في حفظ الإعدادات&quot;,&#10;  &quot;failed_to_load_settings&quot;: &quot;فشل في تحميل الإعدادات&quot;,&#10;  &quot;manage_clinic_preferences&quot;: &quot;إدارة تفضيلات وإعدادات العيادة&quot;,&#10;  &quot;save_changes&quot;: &quot;حفظ التغييرات&quot;,&#10;  &quot;saving&quot;: &quot;جاري الحفظ...&quot;,&#10;&#10;  &quot;general&quot;: &quot;عام&quot;,&#10;  &quot;appointments&quot;: &quot;المواعيد&quot;,&#10;  &quot;notifications&quot;: &quot;الإشعارات&quot;,&#10;  &quot;display&quot;: &quot;العرض&quot;,&#10;&#10;  &quot;localization&quot;: &quot;التوطين&quot;,&#10;  &quot;language&quot;: &quot;اللغة&quot;,&#10;  &quot;country&quot;: &quot;البلد&quot;,&#10;  &quot;timezone&quot;: &quot;المنطقة الزمنية&quot;,&#10;&#10;  &quot;clinic_information&quot;: &quot;معلومات العيادة&quot;,&#10;  &quot;clinic_name&quot;: &quot;اسم العيادة&quot;,&#10;  &quot;clinic_address&quot;: &quot;العنوان&quot;,&#10;  &quot;clinic_phone&quot;: &quot;الهاتف&quot;,&#10;  &quot;clinic_email&quot;: &quot;البريد الإلكتروني&quot;,&#10;  &quot;enter_clinic_name&quot;: &quot;أدخل اسم العيادة&quot;,&#10;  &quot;enter_clinic_address&quot;: &quot;أدخل عنوان العيادة&quot;,&#10;  &quot;enter_phone_number&quot;: &quot;أدخل رقم الهاتف&quot;,&#10;  &quot;enter_email_address&quot;: &quot;أدخل عنوان البريد الإلكتروني&quot;,&#10;&#10;  &quot;working_hours&quot;: &quot;ساعات العمل&quot;,&#10;  &quot;default_appointment_duration&quot;: &quot;مدة الموعد الافتراضية&quot;,&#10;  &quot;start_time&quot;: &quot;وقت البداية&quot;,&#10;  &quot;end_time&quot;: &quot;وقت النهاية&quot;,&#10;  &quot;working_days&quot;: &quot;أيام العمل&quot;,&#10;  &quot;minutes&quot;: &quot;دقائق&quot;,&#10;  &quot;hour&quot;: &quot;ساعة&quot;,&#10;  &quot;hours&quot;: &quot;ساعات&quot;,&#10;  &quot;day&quot;: &quot;يوم&quot;,&#10;&#10;  &quot;notification_preferences&quot;: &quot;تفضيلات الإشعارات&quot;,&#10;  &quot;email_notifications&quot;: &quot;إشعارات البريد الإلكتروني&quot;,&#10;  &quot;receive_notifications_email&quot;: &quot;تلقي الإشعارات عبر البريد الإلكتروني&quot;,&#10;  &quot;sms_notifications&quot;: &quot;إشعارات الرسائل النصية&quot;,&#10;  &quot;receive_notifications_sms&quot;: &quot;تلقي الإشعارات عبر الرسائل النصية&quot;,&#10;  &quot;appointment_reminders&quot;: &quot;تذكير المواعيد&quot;,&#10;  &quot;send_reminders_before&quot;: &quot;إرسال تذكير قبل المواعيد&quot;,&#10;  &quot;reminder_time&quot;: &quot;وقت التذكير&quot;,&#10;  &quot;minutes_before&quot;: &quot;دقائق قبل&quot;,&#10;  &quot;before&quot;: &quot;قبل&quot;,&#10;&#10;  &quot;display_preferences&quot;: &quot;تفضيلات العرض&quot;,&#10;  &quot;date_format&quot;: &quot;تنسيق التاريخ&quot;,&#10;  &quot;time_format&quot;: &quot;تنسيق الوقت&quot;,&#10;  &quot;currency&quot;: &quot;العملة&quot;,&#10;  &quot;temperature_unit&quot;: &quot;وحدة درجة الحرارة&quot;,&#10;  &quot;show_weather_widget&quot;: &quot;إظهار أداة الطقس&quot;,&#10;  &quot;display_weather_dashboard&quot;: &quot;عرض معلومات الطقس على لوحة التحكم&quot;,&#10;  &quot;hour_format_12&quot;: &quot;12 ساعة (ص/م)&quot;,&#10;  &quot;hour_format_24&quot;: &quot;24 ساعة&quot;,&#10;  &quot;celsius&quot;: &quot;مئوية (°م)&quot;,&#10;  &quot;fahrenheit&quot;: &quot;فهرنهايت (°ف)&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/i18n/locales/en.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/i18n/locales/en.json" />
              <option name="originalContent" value="{&#10;  &quot;dashboard&quot;: &quot;Dashboard&quot;,&#10;  &quot;calendar&quot;: &quot;Calendar&quot;,&#10;  &quot;patients&quot;: &quot;Patients&quot;,&#10;  &quot;reports&quot;: &quot;Reports&quot;,&#10;  &quot;settings&quot;: &quot;Settings&quot;,&#10;  &quot;clinic_name&quot;: &quot;Imarisys Clinic&quot;,&#10;  &quot;patient_list&quot;: &quot;Patient List&quot;,&#10;  &quot;add_patient&quot;: &quot;Add Patient&quot;,&#10;  &quot;add_new_patient&quot;: &quot;Add New Patient&quot;,&#10;  &quot;search_patients&quot;: &quot;Search patients...&quot;,&#10;  &quot;first_name&quot;: &quot;First Name&quot;,&#10;  &quot;last_name&quot;: &quot;Last Name&quot;,&#10;  &quot;email&quot;: &quot;Email&quot;,&#10;  &quot;phone&quot;: &quot;Phone&quot;,&#10;  &quot;date_of_birth&quot;: &quot;Date of Birth&quot;,&#10;  &quot;address&quot;: &quot;Address&quot;,&#10;  &quot;save&quot;: &quot;Save&quot;,&#10;  &quot;cancel&quot;: &quot;Cancel&quot;,&#10;  &quot;edit&quot;: &quot;Edit&quot;,&#10;  &quot;delete&quot;: &quot;Delete&quot;,&#10;  &quot;view_details&quot;: &quot;View Details&quot;,&#10;  &quot;book_appointment&quot;: &quot;Book Appointment&quot;,&#10;  &quot;appointments&quot;: &quot;Appointments&quot;,&#10;  &quot;today&quot;: &quot;Today&quot;,&#10;  &quot;tomorrow&quot;: &quot;Tomorrow&quot;,&#10;  &quot;this_week&quot;: &quot;This Week&quot;,&#10;  &quot;next_week&quot;: &quot;Next Week&quot;,&#10;  &quot;no_appointments&quot;: &quot;No appointments scheduled&quot;,&#10;  &quot;appointment_time&quot;: &quot;Appointment Time&quot;,&#10;  &quot;appointment_type&quot;: &quot;Appointment Type&quot;,&#10;  &quot;notes&quot;: &quot;Notes&quot;,&#10;  &quot;status&quot;: &quot;Status&quot;,&#10;  &quot;confirmed&quot;: &quot;Confirmed&quot;,&#10;  &quot;pending&quot;: &quot;Pending&quot;,&#10;  &quot;completed&quot;: &quot;Completed&quot;,&#10;  &quot;cancelled&quot;: &quot;Cancelled&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient Created Successfully&quot;,&#10;  &quot;patient_added_to_system&quot;: &quot;has been added to the system.&quot;,&#10;  &quot;failed_to_create_patient&quot;: &quot;Failed to Create Patient&quot;,&#10;  &quot;unable_to_create_patient&quot;: &quot;Unable to create patient. Please check your input and try again.&quot;,&#10;  &quot;patient_updated_successfully&quot;: &quot;Patient Updated Successfully&quot;,&#10;  &quot;patient_info_updated&quot;: &quot;'s information has been updated.&quot;,&#10;  &quot;failed_to_update_patient&quot;: &quot;Failed to Update Patient&quot;,&#10;  &quot;unable_to_update_patient&quot;: &quot;Unable to update patient. Please try again.&quot;,&#10;  &quot;patient_deleted_successfully&quot;: &quot;Patient Deleted Successfully&quot;,&#10;  &quot;patient_removed_from_system&quot;: &quot;has been removed from the system.&quot;,&#10;  &quot;failed_to_delete_patient&quot;: &quot;Failed to Delete Patient&quot;,&#10;  &quot;unable_to_delete_patient&quot;: &quot;Unable to delete patient. Please try again.&quot;,&#10;  &quot;patient_not_found&quot;: &quot;Patient not found&quot;,&#10;  &quot;back_to_list&quot;: &quot;Back to List&quot;,&#10;  &quot;edit_patient&quot;: &quot;Edit Patient&quot;,&#10;  &quot;patient_details&quot;: &quot;Patient Details&quot;,&#10;  &quot;patients_count&quot;: &quot;{count} of {total} patients&quot;,&#10;  &quot;no_patients_found&quot;: &quot;No patients found&quot;,&#10;  &quot;start_by_adding_patient&quot;: &quot;Start by adding your first patient to the system.&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Failed to Load Patients&quot;,&#10;  &quot;connection_error&quot;: &quot;Failed to load patients. Please check your connection and try again.&quot;,&#10;  &quot;confirm_delete_patient&quot;: &quot;Are you sure you want to delete {name}? This action cannot be undone.&quot;,&#10;  &quot;gender&quot;: &quot;Gender&quot;,&#10;  &quot;male&quot;: &quot;Male&quot;,&#10;  &quot;female&quot;: &quot;Female&quot;,&#10;  &quot;other&quot;: &quot;Other&quot;,&#10;  &quot;street_address&quot;: &quot;Street Address&quot;,&#10;  &quot;city&quot;: &quot;City&quot;,&#10;  &quot;state&quot;: &quot;State&quot;,&#10;  &quot;zip_code&quot;: &quot;Zip Code&quot;,&#10;  &quot;saving&quot;: &quot;Saving...&quot;,&#10;  &quot;create_patient&quot;: &quot;Create Patient&quot;,&#10;  &quot;update_patient&quot;: &quot;Update Patient&quot;,&#10;  &quot;first_name_required&quot;: &quot;First name is required&quot;,&#10;  &quot;last_name_required&quot;: &quot;Last name is required&quot;,&#10;  &quot;phone_required&quot;: &quot;Phone is required&quot;,&#10;  &quot;email_invalid&quot;: &quot;Email is invalid&quot;,&#10;  &quot;years_old&quot;: &quot;years old&quot;,&#10;  &quot;try_adjusting_search&quot;: &quot;Try adjusting your search criteria&quot;,&#10;  &quot;back_to_patients&quot;: &quot;← Back to Patients&quot;,&#10;  &quot;age&quot;: &quot;Age&quot;,&#10;  &quot;years&quot;: &quot;years&quot;,&#10;  &quot;contact_information&quot;: &quot;Contact Information&quot;,&#10;  &quot;address_information&quot;: &quot;Address Information&quot;,&#10;  &quot;upcoming_appointments&quot;: &quot;Upcoming Appointments&quot;,&#10;  &quot;previous_appointments&quot;: &quot;Previous Appointments&quot;,&#10;  &quot;no_upcoming_appointments&quot;: &quot;No upcoming appointments&quot;,&#10;  &quot;no_previous_appointments&quot;: &quot;No previous appointments&quot;,&#10;  &quot;appointment_booked&quot;: &quot;Appointment Booked&quot;,&#10;  &quot;appointment_booked_success&quot;: &quot;The appointment has been successfully booked.&quot;,&#10;  &quot;booking_failed&quot;: &quot;Booking Failed&quot;,&#10;  &quot;unable_to_book&quot;: &quot;Unable to book the appointment&quot;,&#10;  &quot;appointment_updated&quot;: &quot;Appointment Updated&quot;,&#10;  &quot;appointment_updated_success&quot;: &quot;The appointment has been successfully updated.&quot;,&#10;  &quot;update_failed&quot;: &quot;Update Failed&quot;,&#10;  &quot;unable_to_update_appointment&quot;: &quot;Unable to update the appointment&quot;,&#10;  &quot;appointment_cancelled&quot;: &quot;Appointment Cancelled&quot;,&#10;  &quot;appointment_cancelled_success&quot;: &quot;The appointment has been successfully cancelled.&quot;,&#10;  &quot;cancellation_failed&quot;: &quot;Cancellation Failed&quot;,&#10;  &quot;unable_to_cancel&quot;: &quot;Unable to cancel the appointment&quot;,&#10;  &quot;status_updated&quot;: &quot;Status Updated&quot;,&#10;  &quot;status_updated_to&quot;: &quot;Appointment status has been updated to {status}.&quot;,&#10;  &quot;unable_to_update_status&quot;: &quot;Unable to update appointment status&quot;,&#10;  &quot;appointment_deleted&quot;: &quot;Appointment Deleted&quot;,&#10;  &quot;appointment_deleted_success&quot;: &quot;The appointment has been permanently deleted.&quot;,&#10;  &quot;deletion_failed&quot;: &quot;Deletion Failed&quot;,&#10;  &quot;unable_to_delete_appointment&quot;: &quot;Unable to delete the appointment&quot;,&#10;  &quot;failed_to_load_appointments&quot;: &quot;Failed to Load Appointments&quot;,&#10;  &quot;unable_to_load_appointments&quot;: &quot;Unable to load patient appointments&quot;,&#10;  &quot;search&quot;: &quot;Search&quot;,&#10;  &quot;clear&quot;: &quot;Clear&quot;,&#10;  &quot;age_from&quot;: &quot;Age From&quot;,&#10;  &quot;age_to&quot;: &quot;Age To&quot;,&#10;  &quot;book_new_appointment&quot;: &quot;Book New Appointment&quot;,&#10;  &quot;patient&quot;: &quot;Patient&quot;,&#10;  &quot;appointment_title&quot;: &quot;Appointment Title&quot;,&#10;  &quot;appointment_title_required&quot;: &quot;Appointment Title *&quot;,&#10;  &quot;appointment_title_placeholder&quot;: &quot;e.g., Regular Checkup, Follow-up Visit&quot;,&#10;  &quot;date&quot;: &quot;Date&quot;,&#10;  &quot;date_required&quot;: &quot;Date *&quot;,&#10;  &quot;start_time&quot;: &quot;Start Time&quot;,&#10;  &quot;start_time_required&quot;: &quot;Start Time *&quot;,&#10;  &quot;end_time&quot;: &quot;End Time&quot;,&#10;  &quot;end_time_required&quot;: &quot;End Time *&quot;,&#10;  &quot;notes_optional&quot;: &quot;Notes (Optional)&quot;,&#10;  &quot;notes_placeholder&quot;: &quot;Additional notes or instructions...&quot;,&#10;  &quot;booking&quot;: &quot;Booking...&quot;,&#10;  &quot;title_required&quot;: &quot;Title is required&quot;,&#10;  &quot;date_required_error&quot;: &quot;Date is required&quot;,&#10;  &quot;date_past_error&quot;: &quot;Date cannot be in the past&quot;,&#10;  &quot;start_time_required_error&quot;: &quot;Start time is required&quot;,&#10;  &quot;end_time_required_error&quot;: &quot;End time is required&quot;,&#10;  &quot;end_time_after_start&quot;: &quot;End time must be after start time&quot;,&#10;  &quot;appointment_confirmed&quot;: &quot;Appointment Confirmed&quot;,&#10;  &quot;appointment_booked_with&quot;: &quot;Appointment with {name} has been booked successfully.&quot;,&#10;  &quot;booking_error&quot;: &quot;There was a problem booking the appointment. Please try again.&quot;,&#10;  &quot;loading_appointment_types&quot;: &quot;Loading appointment types...&quot;,&#10;  &quot;consultation_with&quot;: &quot;Consultation with {name}&quot;,&#10;  &quot;min&quot;: &quot;min&quot;,&#10;  &quot;appointment_calendar&quot;: &quot;Appointment Calendar&quot;,&#10;  &quot;manage_schedule_appointments&quot;: &quot;Manage and schedule patient appointments.&quot;,&#10;  &quot;new_appointment&quot;: &quot;New Appointment&quot;,&#10;  &quot;month&quot;: &quot;Month&quot;,&#10;  &quot;week&quot;: &quot;Week&quot;,&#10;  &quot;day&quot;: &quot;Day&quot;,&#10;  &quot;loading_appointments&quot;: &quot;Loading appointments...&quot;,&#10;  &quot;error&quot;: &quot;Error&quot;,&#10;  &quot;success&quot;: &quot;Success&quot;,&#10;  &quot;appointment_updated_successfully&quot;: &quot;Appointment updated successfully&quot;,&#10;  &quot;appointment_status_updated_successfully&quot;: &quot;Appointment status updated successfully&quot;,&#10;  &quot;appointment_cancelled_successfully&quot;: &quot;Appointment cancelled successfully&quot;,&#10;  &quot;appointment_deleted_successfully&quot;: &quot;Appointment deleted successfully&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Failed to load patients&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient created successfully.&quot;,&#10;  &quot;failed_to_create_patient_booking&quot;: &quot;Failed to create patient&quot;,&#10;  &quot;select_patient&quot;: &quot;Select Patient&quot;,&#10;  &quot;search_for_patient&quot;: &quot;Search for a patient...&quot;,&#10;  &quot;create_new_patient&quot;: &quot;Create New Patient&quot;,&#10;  &quot;select_time_slot&quot;: &quot;Select Time Slot&quot;,&#10;  &quot;select_patient_for_appointment&quot;: &quot;Select a patient for the appointment&quot;,&#10;  &quot;or&quot;: &quot;or&quot;,&#10;  &quot;previous&quot;: &quot;Previous&quot;,&#10;  &quot;next&quot;: &quot;Next&quot;,&#10;  &quot;today&quot;: &quot;Today&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sun&quot;: &quot;Sun&quot;,&#10;  &quot;mon&quot;: &quot;Mon&quot;,&#10;  &quot;tue&quot;: &quot;Tue&quot;,&#10;  &quot;wed&quot;: &quot;Wed&quot;,&#10;  &quot;thu&quot;: &quot;Thu&quot;,&#10;  &quot;fri&quot;: &quot;Fri&quot;,&#10;  &quot;sat&quot;: &quot;Sat&quot;,&#10;  &quot;january&quot;: &quot;January&quot;,&#10;  &quot;february&quot;: &quot;February&quot;,&#10;  &quot;march&quot;: &quot;March&quot;,&#10;  &quot;april&quot;: &quot;April&quot;,&#10;  &quot;may&quot;: &quot;May&quot;,&#10;  &quot;june&quot;: &quot;June&quot;,&#10;  &quot;july&quot;: &quot;July&quot;,&#10;  &quot;august&quot;: &quot;August&quot;,&#10;  &quot;september&quot;: &quot;September&quot;,&#10;  &quot;october&quot;: &quot;October&quot;,&#10;  &quot;november&quot;: &quot;November&quot;,&#10;  &quot;december&quot;: &quot;December&quot;,&#10;  &quot;am&quot;: &quot;AM&quot;,&#10;  &quot;pm&quot;: &quot;PM&quot;,&#10;  &quot;select_date_time&quot;: &quot;Select Date &amp; Time&quot;,&#10;  &quot;select_date_time_description&quot;: &quot;Choose your preferred date and time for the appointment.&quot;,&#10;  &quot;appointment_duration&quot;: &quot;Appointment Duration&quot;,&#10;  &quot;available_time_slots&quot;: &quot;Available Time Slots&quot;,&#10;  &quot;or_set_custom_time&quot;: &quot;Or set custom time&quot;,&#10;  &quot;selected_appointment_time&quot;: &quot;Selected Appointment Time&quot;,&#10;  &quot;continue_to_patient_selection&quot;: &quot;Continue to Patient Selection&quot;,&#10;  &quot;for&quot;: &quot;for&quot;,&#10;  &quot;at&quot;: &quot;at&quot;,&#10;  &quot;back_to_time&quot;: &quot;Back to Time&quot;,&#10;  &quot;search_by_name_email&quot;: &quot;Search by name or email...&quot;,&#10;  &quot;or_create_new_patient&quot;: &quot;Or create new patient&quot;,&#10;  &quot;back_to_patient_search&quot;: &quot;Back to Patient Search&quot;,&#10;  &quot;confirm_appointment&quot;: &quot;Confirm Appointment&quot;,&#10;  &quot;back_to_patient&quot;: &quot;Back to Patient&quot;,&#10;&#10;  // Settings translations&#10;  // Settings translations&#10;  // Settings translations&#10;  &quot;manage_clinic_preferences&quot;: &quot;Manage your clinic preferences and configuration&quot;,&#10;  &quot;save_changes&quot;: &quot;Save Changes&quot;,&#10;  &quot;saving&quot;: &quot;Saving...&quot;,&#10;&#10;  // Settings tabs&#10;  // Settings tabs&#10;  // Settings tabs&#10;  // Settings tabs&#10;  // Settings tabs&#10;  // Settings tabs&#10;  // Localization section&#10;  // Settings tabs&#10;  // Localization section&#10;  // Settings tabs&#10;  // Localization section&#10;  // Settings tabs&#10;  // Clinic information&#10;  // Localization section&#10;  // Settings tabs&#10;  // Clinic information&#10;  // Localization section&#10;  // Settings tabs&#10;  // Clinic information&#10;  // Localization section&#10;  // Settings tabs&#10;  // Clinic information&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  // Clinic information&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  // Clinic information&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  // Settings tabs&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  &quot;general&quot;: &quot;General&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  &quot;appointments&quot;: &quot;Appointments&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  &quot;notifications&quot;: &quot;Notifications&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  &quot;display&quot;: &quot;Display&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  // Localization section&#10;  // Working hours&#10;  &quot;localization&quot;: &quot;Localization&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  &quot;language&quot;: &quot;Language&quot;,&#10;  // Working hours&#10;  &quot;country&quot;: &quot;Country&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  &quot;timezone&quot;: &quot;Timezone&quot;,&#10;  // Working hours&#10;&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  // Clinic information&#10;  // Display preferences&#10;  // Notification preferences&#10;  &quot;clinic_information&quot;: &quot;Clinic Information&quot;,&#10;  // Working hours&#10;  &quot;clinic_name&quot;: &quot;Clinic Name&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  &quot;clinic_address&quot;: &quot;Address&quot;,&#10;  // Display preferences&#10;  // Notification preferences&#10;  &quot;clinic_phone&quot;: &quot;Phone&quot;,&#10;  // Working hours&#10;  &quot;clinic_email&quot;: &quot;Email&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  &quot;enter_clinic_name&quot;: &quot;Enter clinic name&quot;,&#10;  // Display preferences&#10;  // Notification preferences&#10;  &quot;enter_clinic_address&quot;: &quot;Enter clinic address&quot;,&#10;  // Working hours&#10;  &quot;enter_phone_number&quot;: &quot;Enter phone number&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  &quot;enter_email_address&quot;: &quot;Enter email address&quot;,&#10;  // Display preferences&#10;  // Notification preferences&#10;&#10;  // Working hours&#10;  &quot;working_hours&quot;: &quot;Working Hours&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  &quot;default_appointment_duration&quot;: &quot;Default Appointment Duration&quot;,&#10;  // Display preferences&#10;  // Notification preferences&#10;  &quot;start_time&quot;: &quot;Start Time&quot;,&#10;  &quot;end_time&quot;: &quot;End Time&quot;,&#10;  &quot;working_days&quot;: &quot;Working Days&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  &quot;minutes&quot;: &quot;minutes&quot;,&#10;  // Display preferences&#10;  // Notification preferences&#10;  &quot;hour&quot;: &quot;hour&quot;,&#10;  &quot;hours&quot;: &quot;hours&quot;,&#10;  &quot;day&quot;: &quot;day&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;&#10;  // Display preferences&#10;  // Notification preferences&#10;  &quot;notification_preferences&quot;: &quot;Notification Preferences&quot;,&#10;  &quot;email_notifications&quot;: &quot;Email Notifications&quot;,&#10;  &quot;receive_notifications_email&quot;: &quot;Receive notifications via email&quot;,&#10;  &quot;sms_notifications&quot;: &quot;SMS Notifications&quot;,&#10;  &quot;receive_notifications_sms&quot;: &quot;Receive notifications via SMS&quot;,&#10;  &quot;appointment_reminders&quot;: &quot;Appointment Reminders&quot;,&#10;  &quot;send_reminders_before&quot;: &quot;Send reminders before appointments&quot;,&#10;  &quot;reminder_time&quot;: &quot;Reminder Time&quot;,&#10;  &quot;minutes_before&quot;: &quot;minutes before&quot;,&#10;  &quot;before&quot;: &quot;before&quot;,&#10;&#10;  // Display preferences&#10;  &quot;display_preferences&quot;: &quot;Display Preferences&quot;,&#10;  &quot;date_format&quot;: &quot;Date Format&quot;,&#10;  &quot;time_format&quot;: &quot;Time Format&quot;,&#10;  &quot;currency&quot;: &quot;Currency&quot;,&#10;  &quot;temperature_unit&quot;: &quot;Temperature Unit&quot;,&#10;  &quot;show_weather_widget&quot;: &quot;Show Weather Widget&quot;,&#10;  &quot;display_weather_dashboard&quot;: &quot;Display weather information on dashboard&quot;,&#10;  &quot;hour_format_12&quot;: &quot;12 Hour (AM/PM)&quot;,&#10;  &quot;hour_format_24&quot;: &quot;24 Hour&quot;,&#10;  &quot;celsius&quot;: &quot;Celsius (°C)&quot;,&#10;  &quot;fahrenheit&quot;: &quot;Fahrenheit (°F)&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;dashboard&quot;: &quot;Dashboard&quot;,&#10;  &quot;calendar&quot;: &quot;Calendar&quot;,&#10;  &quot;patients&quot;: &quot;Patients&quot;,&#10;  &quot;reports&quot;: &quot;Reports&quot;,&#10;  &quot;settings&quot;: &quot;Settings&quot;,&#10;  &quot;clinic_name&quot;: &quot;Imarisys Clinic&quot;,&#10;  &quot;patient_list&quot;: &quot;Patient List&quot;,&#10;  &quot;add_patient&quot;: &quot;Add Patient&quot;,&#10;  &quot;add_new_patient&quot;: &quot;Add New Patient&quot;,&#10;  &quot;search_patients&quot;: &quot;Search patients...&quot;,&#10;  &quot;first_name&quot;: &quot;First Name&quot;,&#10;  &quot;last_name&quot;: &quot;Last Name&quot;,&#10;  &quot;email&quot;: &quot;Email&quot;,&#10;  &quot;phone&quot;: &quot;Phone&quot;,&#10;  &quot;date_of_birth&quot;: &quot;Date of Birth&quot;,&#10;  &quot;address&quot;: &quot;Address&quot;,&#10;  &quot;save&quot;: &quot;Save&quot;,&#10;  &quot;cancel&quot;: &quot;Cancel&quot;,&#10;  &quot;edit&quot;: &quot;Edit&quot;,&#10;  &quot;delete&quot;: &quot;Delete&quot;,&#10;  &quot;view_details&quot;: &quot;View Details&quot;,&#10;  &quot;book_appointment&quot;: &quot;Book Appointment&quot;,&#10;  &quot;appointments&quot;: &quot;Appointments&quot;,&#10;  &quot;today&quot;: &quot;Today&quot;,&#10;  &quot;tomorrow&quot;: &quot;Tomorrow&quot;,&#10;  &quot;this_week&quot;: &quot;This Week&quot;,&#10;  &quot;next_week&quot;: &quot;Next Week&quot;,&#10;  &quot;no_appointments&quot;: &quot;No appointments scheduled&quot;,&#10;  &quot;appointment_time&quot;: &quot;Appointment Time&quot;,&#10;  &quot;appointment_type&quot;: &quot;Appointment Type&quot;,&#10;  &quot;notes&quot;: &quot;Notes&quot;,&#10;  &quot;status&quot;: &quot;Status&quot;,&#10;  &quot;confirmed&quot;: &quot;Confirmed&quot;,&#10;  &quot;pending&quot;: &quot;Pending&quot;,&#10;  &quot;completed&quot;: &quot;Completed&quot;,&#10;  &quot;cancelled&quot;: &quot;Cancelled&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient Created Successfully&quot;,&#10;  &quot;patient_added_to_system&quot;: &quot;has been added to the system.&quot;,&#10;  &quot;failed_to_create_patient&quot;: &quot;Failed to Create Patient&quot;,&#10;  &quot;unable_to_create_patient&quot;: &quot;Unable to create patient. Please check your input and try again.&quot;,&#10;  &quot;patient_updated_successfully&quot;: &quot;Patient Updated Successfully&quot;,&#10;  &quot;patient_info_updated&quot;: &quot;'s information has been updated.&quot;,&#10;  &quot;failed_to_update_patient&quot;: &quot;Failed to Update Patient&quot;,&#10;  &quot;unable_to_update_patient&quot;: &quot;Unable to update patient. Please try again.&quot;,&#10;  &quot;patient_deleted_successfully&quot;: &quot;Patient Deleted Successfully&quot;,&#10;  &quot;patient_removed_from_system&quot;: &quot;has been removed from the system.&quot;,&#10;  &quot;failed_to_delete_patient&quot;: &quot;Failed to Delete Patient&quot;,&#10;  &quot;unable_to_delete_patient&quot;: &quot;Unable to delete patient. Please try again.&quot;,&#10;  &quot;patient_not_found&quot;: &quot;Patient not found&quot;,&#10;  &quot;back_to_list&quot;: &quot;Back to List&quot;,&#10;  &quot;edit_patient&quot;: &quot;Edit Patient&quot;,&#10;  &quot;patient_details&quot;: &quot;Patient Details&quot;,&#10;  &quot;patients_count&quot;: &quot;{count} of {total} patients&quot;,&#10;  &quot;no_patients_found&quot;: &quot;No patients found&quot;,&#10;  &quot;start_by_adding_patient&quot;: &quot;Start by adding your first patient to the system.&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Failed to Load Patients&quot;,&#10;  &quot;connection_error&quot;: &quot;Failed to load patients. Please check your connection and try again.&quot;,&#10;  &quot;confirm_delete_patient&quot;: &quot;Are you sure you want to delete {name}? This action cannot be undone.&quot;,&#10;  &quot;gender&quot;: &quot;Gender&quot;,&#10;  &quot;male&quot;: &quot;Male&quot;,&#10;  &quot;female&quot;: &quot;Female&quot;,&#10;  &quot;other&quot;: &quot;Other&quot;,&#10;  &quot;street_address&quot;: &quot;Street Address&quot;,&#10;  &quot;city&quot;: &quot;City&quot;,&#10;  &quot;state&quot;: &quot;State&quot;,&#10;  &quot;zip_code&quot;: &quot;Zip Code&quot;,&#10;  &quot;saving&quot;: &quot;Saving...&quot;,&#10;  &quot;create_patient&quot;: &quot;Create Patient&quot;,&#10;  &quot;update_patient&quot;: &quot;Update Patient&quot;,&#10;  &quot;first_name_required&quot;: &quot;First name is required&quot;,&#10;  &quot;last_name_required&quot;: &quot;Last name is required&quot;,&#10;  &quot;phone_required&quot;: &quot;Phone is required&quot;,&#10;  &quot;email_invalid&quot;: &quot;Email is invalid&quot;,&#10;  &quot;years_old&quot;: &quot;years old&quot;,&#10;  &quot;try_adjusting_search&quot;: &quot;Try adjusting your search criteria&quot;,&#10;  &quot;back_to_patients&quot;: &quot;← Back to Patients&quot;,&#10;  &quot;age&quot;: &quot;Age&quot;,&#10;  &quot;years&quot;: &quot;years&quot;,&#10;  &quot;contact_information&quot;: &quot;Contact Information&quot;,&#10;  &quot;address_information&quot;: &quot;Address Information&quot;,&#10;  &quot;upcoming_appointments&quot;: &quot;Upcoming Appointments&quot;,&#10;  &quot;previous_appointments&quot;: &quot;Previous Appointments&quot;,&#10;  &quot;no_upcoming_appointments&quot;: &quot;No upcoming appointments&quot;,&#10;  &quot;no_previous_appointments&quot;: &quot;No previous appointments&quot;,&#10;  &quot;appointment_booked&quot;: &quot;Appointment Booked&quot;,&#10;  &quot;appointment_booked_success&quot;: &quot;The appointment has been successfully booked.&quot;,&#10;  &quot;booking_failed&quot;: &quot;Booking Failed&quot;,&#10;  &quot;unable_to_book&quot;: &quot;Unable to book the appointment&quot;,&#10;  &quot;appointment_updated&quot;: &quot;Appointment Updated&quot;,&#10;  &quot;appointment_updated_success&quot;: &quot;The appointment has been successfully updated.&quot;,&#10;  &quot;update_failed&quot;: &quot;Update Failed&quot;,&#10;  &quot;unable_to_update_appointment&quot;: &quot;Unable to update the appointment&quot;,&#10;  &quot;appointment_cancelled&quot;: &quot;Appointment Cancelled&quot;,&#10;  &quot;appointment_cancelled_success&quot;: &quot;The appointment has been successfully cancelled.&quot;,&#10;  &quot;cancellation_failed&quot;: &quot;Cancellation Failed&quot;,&#10;  &quot;unable_to_cancel&quot;: &quot;Unable to cancel the appointment&quot;,&#10;  &quot;status_updated&quot;: &quot;Status Updated&quot;,&#10;  &quot;status_updated_to&quot;: &quot;Appointment status has been updated to {status}.&quot;,&#10;  &quot;unable_to_update_status&quot;: &quot;Unable to update appointment status&quot;,&#10;  &quot;appointment_deleted&quot;: &quot;Appointment Deleted&quot;,&#10;  &quot;appointment_deleted_success&quot;: &quot;The appointment has been permanently deleted.&quot;,&#10;  &quot;deletion_failed&quot;: &quot;Deletion Failed&quot;,&#10;  &quot;unable_to_delete_appointment&quot;: &quot;Unable to delete the appointment&quot;,&#10;  &quot;failed_to_load_appointments&quot;: &quot;Failed to Load Appointments&quot;,&#10;  &quot;unable_to_load_appointments&quot;: &quot;Unable to load patient appointments&quot;,&#10;  &quot;search&quot;: &quot;Search&quot;,&#10;  &quot;clear&quot;: &quot;Clear&quot;,&#10;  &quot;age_from&quot;: &quot;Age From&quot;,&#10;  &quot;age_to&quot;: &quot;Age To&quot;,&#10;  &quot;book_new_appointment&quot;: &quot;Book New Appointment&quot;,&#10;  &quot;patient&quot;: &quot;Patient&quot;,&#10;  &quot;appointment_title&quot;: &quot;Appointment Title&quot;,&#10;  &quot;appointment_title_required&quot;: &quot;Appointment Title *&quot;,&#10;  &quot;appointment_title_placeholder&quot;: &quot;e.g., Regular Checkup, Follow-up Visit&quot;,&#10;  &quot;date&quot;: &quot;Date&quot;,&#10;  &quot;date_required&quot;: &quot;Date *&quot;,&#10;  &quot;start_time&quot;: &quot;Start Time&quot;,&#10;  &quot;start_time_required&quot;: &quot;Start Time *&quot;,&#10;  &quot;end_time&quot;: &quot;End Time&quot;,&#10;  &quot;end_time_required&quot;: &quot;End Time *&quot;,&#10;  &quot;notes_optional&quot;: &quot;Notes (Optional)&quot;,&#10;  &quot;notes_placeholder&quot;: &quot;Additional notes or instructions...&quot;,&#10;  &quot;booking&quot;: &quot;Booking...&quot;,&#10;  &quot;title_required&quot;: &quot;Title is required&quot;,&#10;  &quot;date_required_error&quot;: &quot;Date is required&quot;,&#10;  &quot;date_past_error&quot;: &quot;Date cannot be in the past&quot;,&#10;  &quot;start_time_required_error&quot;: &quot;Start time is required&quot;,&#10;  &quot;end_time_required_error&quot;: &quot;End time is required&quot;,&#10;  &quot;end_time_after_start&quot;: &quot;End time must be after start time&quot;,&#10;  &quot;appointment_confirmed&quot;: &quot;Appointment Confirmed&quot;,&#10;  &quot;appointment_booked_with&quot;: &quot;Appointment with {name} has been booked successfully.&quot;,&#10;  &quot;booking_error&quot;: &quot;There was a problem booking the appointment. Please try again.&quot;,&#10;  &quot;loading_appointment_types&quot;: &quot;Loading appointment types...&quot;,&#10;  &quot;consultation_with&quot;: &quot;Consultation with {name}&quot;,&#10;  &quot;min&quot;: &quot;min&quot;,&#10;  &quot;appointment_calendar&quot;: &quot;Appointment Calendar&quot;,&#10;  &quot;manage_schedule_appointments&quot;: &quot;Manage and schedule patient appointments.&quot;,&#10;  &quot;new_appointment&quot;: &quot;New Appointment&quot;,&#10;  &quot;month&quot;: &quot;Month&quot;,&#10;  &quot;week&quot;: &quot;Week&quot;,&#10;  &quot;day&quot;: &quot;Day&quot;,&#10;  &quot;loading_appointments&quot;: &quot;Loading appointments...&quot;,&#10;  &quot;error&quot;: &quot;Error&quot;,&#10;  &quot;success&quot;: &quot;Success&quot;,&#10;  &quot;appointment_updated_successfully&quot;: &quot;Appointment updated successfully&quot;,&#10;  &quot;appointment_status_updated_successfully&quot;: &quot;Appointment status updated successfully&quot;,&#10;  &quot;appointment_cancelled_successfully&quot;: &quot;Appointment cancelled successfully&quot;,&#10;  &quot;appointment_deleted_successfully&quot;: &quot;Appointment deleted successfully&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Failed to load patients&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient created successfully.&quot;,&#10;  &quot;failed_to_create_patient_booking&quot;: &quot;Failed to create patient&quot;,&#10;  &quot;select_patient&quot;: &quot;Select Patient&quot;,&#10;  &quot;search_for_patient&quot;: &quot;Search for a patient...&quot;,&#10;  &quot;create_new_patient&quot;: &quot;Create New Patient&quot;,&#10;  &quot;select_time_slot&quot;: &quot;Select Time Slot&quot;,&#10;  &quot;select_patient_for_appointment&quot;: &quot;Select a patient for the appointment&quot;,&#10;  &quot;or&quot;: &quot;or&quot;,&#10;  &quot;previous&quot;: &quot;Previous&quot;,&#10;  &quot;next&quot;: &quot;Next&quot;,&#10;  &quot;today&quot;: &quot;Today&quot;,&#10;  &quot;sunday&quot;: &quot;Sunday&quot;,&#10;  &quot;monday&quot;: &quot;Monday&quot;,&#10;  &quot;tuesday&quot;: &quot;Tuesday&quot;,&#10;  &quot;wednesday&quot;: &quot;Wednesday&quot;,&#10;  &quot;thursday&quot;: &quot;Thursday&quot;,&#10;  &quot;friday&quot;: &quot;Friday&quot;,&#10;  &quot;saturday&quot;: &quot;Saturday&quot;,&#10;  &quot;sun&quot;: &quot;Sun&quot;,&#10;  &quot;mon&quot;: &quot;Mon&quot;,&#10;  &quot;tue&quot;: &quot;Tue&quot;,&#10;  &quot;wed&quot;: &quot;Wed&quot;,&#10;  &quot;thu&quot;: &quot;Thu&quot;,&#10;  &quot;fri&quot;: &quot;Fri&quot;,&#10;  &quot;sat&quot;: &quot;Sat&quot;,&#10;  &quot;january&quot;: &quot;January&quot;,&#10;  &quot;february&quot;: &quot;February&quot;,&#10;  &quot;march&quot;: &quot;March&quot;,&#10;  &quot;april&quot;: &quot;April&quot;,&#10;  &quot;may&quot;: &quot;May&quot;,&#10;  &quot;june&quot;: &quot;June&quot;,&#10;  &quot;july&quot;: &quot;July&quot;,&#10;  &quot;august&quot;: &quot;August&quot;,&#10;  &quot;september&quot;: &quot;September&quot;,&#10;  &quot;october&quot;: &quot;October&quot;,&#10;  &quot;november&quot;: &quot;November&quot;,&#10;  &quot;december&quot;: &quot;December&quot;,&#10;  &quot;am&quot;: &quot;AM&quot;,&#10;  &quot;pm&quot;: &quot;PM&quot;,&#10;  &quot;select_date_time&quot;: &quot;Select Date &amp; Time&quot;,&#10;  &quot;select_date_time_description&quot;: &quot;Choose your preferred date and time for the appointment.&quot;,&#10;  &quot;appointment_duration&quot;: &quot;Appointment Duration&quot;,&#10;  &quot;available_time_slots&quot;: &quot;Available Time Slots&quot;,&#10;  &quot;or_set_custom_time&quot;: &quot;Or set custom time&quot;,&#10;  &quot;selected_appointment_time&quot;: &quot;Selected Appointment Time&quot;,&#10;  &quot;continue_to_patient_selection&quot;: &quot;Continue to Patient Selection&quot;,&#10;  &quot;for&quot;: &quot;for&quot;,&#10;  &quot;at&quot;: &quot;at&quot;,&#10;  &quot;back_to_time&quot;: &quot;Back to Time&quot;,&#10;  &quot;search_by_name_email&quot;: &quot;Search by name or email...&quot;,&#10;  &quot;or_create_new_patient&quot;: &quot;Or create new patient&quot;,&#10;  &quot;back_to_patient_search&quot;: &quot;Back to Patient Search&quot;,&#10;  &quot;confirm_appointment&quot;: &quot;Confirm Appointment&quot;,&#10;  &quot;back_to_patient&quot;: &quot;Back to Patient&quot;,&#10;&#10;  &quot;settings_saved_successfully&quot;: &quot;Settings saved successfully&quot;,&#10;  &quot;failed_to_save_settings&quot;: &quot;Failed to save settings&quot;,&#10;  &quot;failed_to_load_settings&quot;: &quot;Failed to load settings&quot;,&#10;  &quot;manage_clinic_preferences&quot;: &quot;Manage your clinic preferences and configuration&quot;,&#10;  &quot;save_changes&quot;: &quot;Save Changes&quot;,&#10;  &quot;saving&quot;: &quot;Saving...&quot;,&#10;&#10;  &quot;general&quot;: &quot;General&quot;,&#10;  &quot;appointments&quot;: &quot;Appointments&quot;,&#10;  &quot;notifications&quot;: &quot;Notifications&quot;,&#10;  &quot;display&quot;: &quot;Display&quot;,&#10;&#10;  &quot;localization&quot;: &quot;Localization&quot;,&#10;  &quot;language&quot;: &quot;Language&quot;,&#10;  &quot;country&quot;: &quot;Country&quot;,&#10;  &quot;timezone&quot;: &quot;Timezone&quot;,&#10;&#10;  &quot;clinic_information&quot;: &quot;Clinic Information&quot;,&#10;  &quot;clinic_name&quot;: &quot;Clinic Name&quot;,&#10;  &quot;clinic_address&quot;: &quot;Address&quot;,&#10;  &quot;clinic_phone&quot;: &quot;Phone&quot;,&#10;  &quot;clinic_email&quot;: &quot;Email&quot;,&#10;  &quot;enter_clinic_name&quot;: &quot;Enter clinic name&quot;,&#10;  &quot;enter_clinic_address&quot;: &quot;Enter clinic address&quot;,&#10;  &quot;enter_phone_number&quot;: &quot;Enter phone number&quot;,&#10;  &quot;enter_email_address&quot;: &quot;Enter email address&quot;,&#10;&#10;  &quot;working_hours&quot;: &quot;Working Hours&quot;,&#10;  &quot;default_appointment_duration&quot;: &quot;Default Appointment Duration&quot;,&#10;  &quot;start_time&quot;: &quot;Start Time&quot;,&#10;  &quot;end_time&quot;: &quot;End Time&quot;,&#10;  &quot;working_days&quot;: &quot;Working Days&quot;,&#10;  &quot;minutes&quot;: &quot;minutes&quot;,&#10;  &quot;hour&quot;: &quot;hour&quot;,&#10;  &quot;hours&quot;: &quot;hours&quot;,&#10;  &quot;day&quot;: &quot;day&quot;,&#10;&#10;  &quot;notification_preferences&quot;: &quot;Notification Preferences&quot;,&#10;  &quot;email_notifications&quot;: &quot;Email Notifications&quot;,&#10;  &quot;receive_notifications_email&quot;: &quot;Receive notifications via email&quot;,&#10;  &quot;sms_notifications&quot;: &quot;SMS Notifications&quot;,&#10;  &quot;receive_notifications_sms&quot;: &quot;Receive notifications via SMS&quot;,&#10;  &quot;appointment_reminders&quot;: &quot;Appointment Reminders&quot;,&#10;  &quot;send_reminders_before&quot;: &quot;Send reminders before appointments&quot;,&#10;  &quot;reminder_time&quot;: &quot;Reminder Time&quot;,&#10;  &quot;minutes_before&quot;: &quot;minutes before&quot;,&#10;  &quot;before&quot;: &quot;before&quot;,&#10;&#10;  &quot;display_preferences&quot;: &quot;Display Preferences&quot;,&#10;  &quot;date_format&quot;: &quot;Date Format&quot;,&#10;  &quot;time_format&quot;: &quot;Time Format&quot;,&#10;  &quot;currency&quot;: &quot;Currency&quot;,&#10;  &quot;temperature_unit&quot;: &quot;Temperature Unit&quot;,&#10;  &quot;show_weather_widget&quot;: &quot;Show Weather Widget&quot;,&#10;  &quot;display_weather_dashboard&quot;: &quot;Display weather information on dashboard&quot;,&#10;  &quot;hour_format_12&quot;: &quot;12 Hour (AM/PM)&quot;,&#10;  &quot;hour_format_24&quot;: &quot;24 Hour&quot;,&#10;  &quot;celsius&quot;: &quot;Celsius (°C)&quot;,&#10;  &quot;fahrenheit&quot;: &quot;Fahrenheit (°F)&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/i18n/locales/fr.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/i18n/locales/fr.json" />
              <option name="originalContent" value="{&#10;  &quot;dashboard&quot;: &quot;Tableau de bord&quot;,&#10;  &quot;calendar&quot;: &quot;Calendrier&quot;,&#10;  &quot;patients&quot;: &quot;Patients&quot;,&#10;  &quot;reports&quot;: &quot;Rapports&quot;,&#10;  &quot;settings&quot;: &quot;Paramètres&quot;,&#10;  &quot;clinic_name&quot;: &quot;Imarisys Clinic&quot;,&#10;  &quot;patient_list&quot;: &quot;Liste des patients&quot;,&#10;  &quot;add_patient&quot;: &quot;Ajouter un patient&quot;,&#10;  &quot;add_new_patient&quot;: &quot;Ajouter un nouveau patient&quot;,&#10;  &quot;search_patients&quot;: &quot;Rechercher des patients...&quot;,&#10;  &quot;first_name&quot;: &quot;Prénom&quot;,&#10;  &quot;last_name&quot;: &quot;Nom de famille&quot;,&#10;  &quot;email&quot;: &quot;E-mail&quot;,&#10;  &quot;phone&quot;: &quot;Téléphone&quot;,&#10;  &quot;date_of_birth&quot;: &quot;Date de naissance&quot;,&#10;  &quot;address&quot;: &quot;Adresse&quot;,&#10;  &quot;save&quot;: &quot;Enregistrer&quot;,&#10;  &quot;cancel&quot;: &quot;Annuler&quot;,&#10;  &quot;edit&quot;: &quot;Modifier&quot;,&#10;  &quot;delete&quot;: &quot;Supprimer&quot;,&#10;  &quot;view_details&quot;: &quot;Voir les détails&quot;,&#10;  &quot;book_appointment&quot;: &quot;Prendre rendez-vous&quot;,&#10;  &quot;appointments&quot;: &quot;Rendez-vous&quot;,&#10;  &quot;today&quot;: &quot;Aujourd'hui&quot;,&#10;  &quot;tomorrow&quot;: &quot;Demain&quot;,&#10;  &quot;this_week&quot;: &quot;Cette semaine&quot;,&#10;  &quot;next_week&quot;: &quot;La semaine prochaine&quot;,&#10;  &quot;no_appointments&quot;: &quot;Aucun rendez-vous programmé&quot;,&#10;  &quot;appointment_time&quot;: &quot;Heure du rendez-vous&quot;,&#10;  &quot;appointment_type&quot;: &quot;Type de rendez-vous&quot;,&#10;  &quot;notes&quot;: &quot;Notes&quot;,&#10;  &quot;status&quot;: &quot;Statut&quot;,&#10;  &quot;confirmed&quot;: &quot;Confirmé&quot;,&#10;  &quot;pending&quot;: &quot;En attente&quot;,&#10;  &quot;completed&quot;: &quot;Terminé&quot;,&#10;  &quot;cancelled&quot;: &quot;Annulé&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient créé avec succès&quot;,&#10;  &quot;patient_added_to_system&quot;: &quot;a été ajouté au système.&quot;,&#10;  &quot;failed_to_create_patient&quot;: &quot;Échec de la création du patient&quot;,&#10;  &quot;unable_to_create_patient&quot;: &quot;Impossible de créer le patient. Veuillez vérifier vos données et réessayer.&quot;,&#10;  &quot;patient_updated_successfully&quot;: &quot;Patient mis à jour avec succès&quot;,&#10;  &quot;patient_info_updated&quot;: &quot;Les informations ont été mises à jour.&quot;,&#10;  &quot;failed_to_update_patient&quot;: &quot;Échec de la mise à jour du patient&quot;,&#10;  &quot;unable_to_update_patient&quot;: &quot;Impossible de mettre à jour le patient. Veuillez réessayer.&quot;,&#10;  &quot;patient_deleted_successfully&quot;: &quot;Patient supprimé avec succès&quot;,&#10;  &quot;patient_removed_from_system&quot;: &quot;a été retiré du système.&quot;,&#10;  &quot;failed_to_delete_patient&quot;: &quot;Échec de la suppression du patient&quot;,&#10;  &quot;unable_to_delete_patient&quot;: &quot;Impossible de supprimer le patient. Veuillez réessayer.&quot;,&#10;  &quot;patient_not_found&quot;: &quot;Patient non trouvé&quot;,&#10;  &quot;back_to_list&quot;: &quot;Retour à la liste&quot;,&#10;  &quot;edit_patient&quot;: &quot;Modifier le patient&quot;,&#10;  &quot;patient_details&quot;: &quot;Détails du patient&quot;,&#10;  &quot;patients_count&quot;: &quot;{count} sur {total} patients&quot;,&#10;  &quot;no_patients_found&quot;: &quot;Aucun patient trouvé&quot;,&#10;  &quot;start_by_adding_patient&quot;: &quot;Commencez par ajouter votre premier patient au système.&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Échec du chargement des patients&quot;,&#10;  &quot;connection_error&quot;: &quot;Échec du chargement des patients. Veuillez vérifier votre connexion et réessayer.&quot;,&#10;  &quot;confirm_delete_patient&quot;: &quot;Êtes-vous sûr de vouloir supprimer {name} ? Cette action ne peut pas être annulée.&quot;,&#10;  &quot;gender&quot;: &quot;Sexe&quot;,&#10;  &quot;male&quot;: &quot;Homme&quot;,&#10;  &quot;female&quot;: &quot;Femme&quot;,&#10;  &quot;other&quot;: &quot;Autre&quot;,&#10;  &quot;street_address&quot;: &quot;Adresse&quot;,&#10;  &quot;city&quot;: &quot;Ville&quot;,&#10;  &quot;state&quot;: &quot;Province/État&quot;,&#10;  &quot;zip_code&quot;: &quot;Code postal&quot;,&#10;  &quot;saving&quot;: &quot;Enregistrement...&quot;,&#10;  &quot;create_patient&quot;: &quot;Créer le patient&quot;,&#10;  &quot;update_patient&quot;: &quot;Mettre à jour le patient&quot;,&#10;  &quot;first_name_required&quot;: &quot;Le prénom est requis&quot;,&#10;  &quot;last_name_required&quot;: &quot;Le nom de famille est requis&quot;,&#10;  &quot;phone_required&quot;: &quot;Le téléphone est requis&quot;,&#10;  &quot;email_invalid&quot;: &quot;L'e-mail n'est pas valide&quot;,&#10;  &quot;years_old&quot;: &quot;ans&quot;,&#10;  &quot;try_adjusting_search&quot;: &quot;Essayez d'ajuster vos critères de recherche&quot;,&#10;  &quot;back_to_patients&quot;: &quot;← Retour aux patients&quot;,&#10;  &quot;age&quot;: &quot;Âge&quot;,&#10;  &quot;years&quot;: &quot;ans&quot;,&#10;  &quot;contact_information&quot;: &quot;Informations de contact&quot;,&#10;  &quot;address_information&quot;: &quot;Informations d'adresse&quot;,&#10;  &quot;upcoming_appointments&quot;: &quot;Rendez-vous à venir&quot;,&#10;  &quot;previous_appointments&quot;: &quot;Rendez-vous précédents&quot;,&#10;  &quot;no_upcoming_appointments&quot;: &quot;Aucun rendez-vous à venir&quot;,&#10;  &quot;no_previous_appointments&quot;: &quot;Aucun rendez-vous précédent&quot;,&#10;  &quot;appointment_booked&quot;: &quot;Rendez-vous pris&quot;,&#10;  &quot;appointment_booked_success&quot;: &quot;Le rendez-vous a été pris avec succès.&quot;,&#10;  &quot;booking_failed&quot;: &quot;Échec de la prise de rendez-vous&quot;,&#10;  &quot;unable_to_book&quot;: &quot;Impossible de prendre le rendez-vous&quot;,&#10;  &quot;appointment_updated&quot;: &quot;Rendez-vous mis à jour&quot;,&#10;  &quot;appointment_updated_success&quot;: &quot;Le rendez-vous a été mis à jour avec succès.&quot;,&#10;  &quot;update_failed&quot;: &quot;Échec de la mise à jour&quot;,&#10;  &quot;unable_to_update_appointment&quot;: &quot;Impossible de mettre à jour le rendez-vous&quot;,&#10;  &quot;appointment_cancelled&quot;: &quot;Rendez-vous annulé&quot;,&#10;  &quot;appointment_cancelled_success&quot;: &quot;Le rendez-vous a été annulé avec succès.&quot;,&#10;  &quot;cancellation_failed&quot;: &quot;Échec de l'annulation&quot;,&#10;  &quot;unable_to_cancel&quot;: &quot;Impossible d'annuler le rendez-vous&quot;,&#10;  &quot;status_updated&quot;: &quot;Statut mis à jour&quot;,&#10;  &quot;status_updated_to&quot;: &quot;Le statut du rendez-vous a été mis à jour à {status}.&quot;,&#10;  &quot;unable_to_update_status&quot;: &quot;Impossible de mettre à jour le statut du rendez-vous&quot;,&#10;  &quot;appointment_deleted&quot;: &quot;Rendez-vous supprimé&quot;,&#10;  &quot;appointment_deleted_success&quot;: &quot;Le rendez-vous a été supprimé définitivement.&quot;,&#10;  &quot;deletion_failed&quot;: &quot;Échec de la suppression&quot;,&#10;  &quot;unable_to_delete_appointment&quot;: &quot;Impossible de supprimer le rendez-vous&quot;,&#10;  &quot;failed_to_load_appointments&quot;: &quot;Échec du chargement des rendez-vous&quot;,&#10;  &quot;unable_to_load_appointments&quot;: &quot;Impossible de charger les rendez-vous du patient&quot;,&#10;  &quot;search&quot;: &quot;Rechercher&quot;,&#10;  &quot;clear&quot;: &quot;Effacer&quot;,&#10;  &quot;age_from&quot;: &quot;Âge de&quot;,&#10;  &quot;age_to&quot;: &quot;Âge à&quot;,&#10;  &quot;book_new_appointment&quot;: &quot;Prendre un nouveau rendez-vous&quot;,&#10;  &quot;patient&quot;: &quot;Patient&quot;,&#10;  &quot;appointment_title&quot;: &quot;Titre du rendez-vous&quot;,&#10;  &quot;appointment_title_required&quot;: &quot;Titre du rendez-vous *&quot;,&#10;  &quot;appointment_title_placeholder&quot;: &quot;ex. Visite de routine, Visite de suivi&quot;,&#10;  &quot;date&quot;: &quot;Date&quot;,&#10;  &quot;date_required&quot;: &quot;Date *&quot;,&#10;  &quot;start_time&quot;: &quot;Heure de début&quot;,&#10;  &quot;start_time_required&quot;: &quot;Heure de début *&quot;,&#10;  &quot;end_time&quot;: &quot;Heure de fin&quot;,&#10;  &quot;end_time_required&quot;: &quot;Heure de fin *&quot;,&#10;  &quot;notes_optional&quot;: &quot;Notes (Optionnel)&quot;,&#10;  &quot;notes_placeholder&quot;: &quot;Notes ou instructions supplémentaires...&quot;,&#10;  &quot;booking&quot;: &quot;Réservation...&quot;,&#10;  &quot;title_required&quot;: &quot;Le titre est requis&quot;,&#10;  &quot;date_required_error&quot;: &quot;La date est requise&quot;,&#10;  &quot;date_past_error&quot;: &quot;La date ne peut pas être dans le passé&quot;,&#10;  &quot;start_time_required_error&quot;: &quot;L'heure de début est requise&quot;,&#10;  &quot;end_time_required_error&quot;: &quot;L'heure de fin est requise&quot;,&#10;  &quot;end_time_after_start&quot;: &quot;L'heure de fin doit être après l'heure de début&quot;,&#10;  &quot;appointment_confirmed&quot;: &quot;Rendez-vous confirmé&quot;,&#10;  &quot;appointment_booked_with&quot;: &quot;Rendez-vous avec {name} a été pris avec succès.&quot;,&#10;  &quot;booking_error&quot;: &quot;Il y a eu un problème lors de la réservation. Veuillez réessayer.&quot;,&#10;  &quot;loading_appointment_types&quot;: &quot;Chargement des types de rendez-vous...&quot;,&#10;  &quot;consultation_with&quot;: &quot;Consultation avec {name}&quot;,&#10;  &quot;min&quot;: &quot;min&quot;,&#10;  &quot;appointment_calendar&quot;: &quot;Calendrier des rendez-vous&quot;,&#10;  &quot;manage_schedule_appointments&quot;: &quot;Gérer et planifier les rendez-vous des patients.&quot;,&#10;  &quot;new_appointment&quot;: &quot;Nouveau rendez-vous&quot;,&#10;  &quot;month&quot;: &quot;Mois&quot;,&#10;  &quot;week&quot;: &quot;Semaine&quot;,&#10;  &quot;day&quot;: &quot;Jour&quot;,&#10;  &quot;loading_appointments&quot;: &quot;Chargement des rendez-vous...&quot;,&#10;  &quot;error&quot;: &quot;Erreur&quot;,&#10;  &quot;success&quot;: &quot;Succès&quot;,&#10;  &quot;appointment_updated_successfully&quot;: &quot;Rendez-vous mis à jour avec succès&quot;,&#10;  &quot;appointment_status_updated_successfully&quot;: &quot;Statut du rendez-vous mis à jour avec succès&quot;,&#10;  &quot;appointment_cancelled_successfully&quot;: &quot;Rendez-vous annulé avec succès&quot;,&#10;  &quot;appointment_deleted_successfully&quot;: &quot;Rendez-vous supprimé avec succès&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Échec du chargement des patients&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient créé avec succès.&quot;,&#10;  &quot;failed_to_create_patient_booking&quot;: &quot;Échec de la création du patient&quot;,&#10;  &quot;select_patient&quot;: &quot;Sélectionner un patient&quot;,&#10;  &quot;search_for_patient&quot;: &quot;Rechercher un patient...&quot;,&#10;  &quot;create_new_patient&quot;: &quot;Créer un nouveau patient&quot;,&#10;  &quot;select_time_slot&quot;: &quot;Sélectionner un créneau&quot;,&#10;  &quot;select_patient_for_appointment&quot;: &quot;Sélectionner un patient pour le rendez-vous&quot;,&#10;  &quot;or&quot;: &quot;ou&quot;,&#10;  &quot;previous&quot;: &quot;Précédent&quot;,&#10;  &quot;next&quot;: &quot;Suivant&quot;,&#10;  &quot;today&quot;: &quot;Aujourd'hui&quot;,&#10;  &quot;sunday&quot;: &quot;Dimanche&quot;,&#10;  &quot;monday&quot;: &quot;Lundi&quot;,&#10;  &quot;tuesday&quot;: &quot;Mardi&quot;,&#10;  &quot;wednesday&quot;: &quot;Mercredi&quot;,&#10;  &quot;thursday&quot;: &quot;Jeudi&quot;,&#10;  &quot;friday&quot;: &quot;Vendredi&quot;,&#10;  &quot;saturday&quot;: &quot;Samedi&quot;,&#10;  &quot;sun&quot;: &quot;Dim&quot;,&#10;  &quot;mon&quot;: &quot;Lun&quot;,&#10;  &quot;tue&quot;: &quot;Mar&quot;,&#10;  &quot;wed&quot;: &quot;Mer&quot;,&#10;  &quot;thu&quot;: &quot;Jeu&quot;,&#10;  &quot;fri&quot;: &quot;Ven&quot;,&#10;  &quot;sat&quot;: &quot;Sam&quot;,&#10;  &quot;january&quot;: &quot;Janvier&quot;,&#10;  &quot;february&quot;: &quot;Février&quot;,&#10;  &quot;march&quot;: &quot;Mars&quot;,&#10;  &quot;april&quot;: &quot;Avril&quot;,&#10;  &quot;may&quot;: &quot;Mai&quot;,&#10;  &quot;june&quot;: &quot;Juin&quot;,&#10;  &quot;july&quot;: &quot;Juillet&quot;,&#10;  &quot;august&quot;: &quot;Août&quot;,&#10;  &quot;september&quot;: &quot;Septembre&quot;,&#10;  &quot;october&quot;: &quot;Octobre&quot;,&#10;  &quot;november&quot;: &quot;Novembre&quot;,&#10;  &quot;december&quot;: &quot;Décembre&quot;,&#10;  &quot;am&quot;: &quot;AM&quot;,&#10;  &quot;pm&quot;: &quot;PM&quot;,&#10;  &quot;select_date_time&quot;: &quot;Sélectionner date et heure&quot;,&#10;  &quot;select_date_time_description&quot;: &quot;Choisissez votre date et heure préférées pour le rendez-vous.&quot;,&#10;  &quot;appointment_duration&quot;: &quot;Durée du rendez-vous&quot;,&#10;  &quot;available_time_slots&quot;: &quot;Créneaux disponibles&quot;,&#10;  &quot;or_set_custom_time&quot;: &quot;Ou définir une heure personnalisée&quot;,&#10;  &quot;selected_appointment_time&quot;: &quot;Heure de rendez-vous sélectionnée&quot;,&#10;  &quot;continue_to_patient_selection&quot;: &quot;Continuer vers la sélection du patient&quot;,&#10;  &quot;for&quot;: &quot;pour&quot;,&#10;  &quot;at&quot;: &quot;à&quot;,&#10;  &quot;back_to_time&quot;: &quot;Retour à l'heure&quot;,&#10;  &quot;search_by_name_email&quot;: &quot;Rechercher par nom ou e-mail...&quot;,&#10;  &quot;or_create_new_patient&quot;: &quot;Ou créer un nouveau patient&quot;,&#10;  &quot;back_to_patient_search&quot;: &quot;Retour à la recherche de patient&quot;,&#10;  &quot;confirm_appointment&quot;: &quot;Confirmer le rendez-vous&quot;,&#10;  &quot;back_to_patient&quot;: &quot;Retour au patient&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;dashboard&quot;: &quot;Tableau de bord&quot;,&#10;  &quot;calendar&quot;: &quot;Calendrier&quot;,&#10;  &quot;patients&quot;: &quot;Patients&quot;,&#10;  &quot;reports&quot;: &quot;Rapports&quot;,&#10;  &quot;settings&quot;: &quot;Paramètres&quot;,&#10;  &quot;clinic_name&quot;: &quot;Imarisys Clinic&quot;,&#10;  &quot;patient_list&quot;: &quot;Liste des patients&quot;,&#10;  &quot;add_patient&quot;: &quot;Ajouter un patient&quot;,&#10;  &quot;add_new_patient&quot;: &quot;Ajouter un nouveau patient&quot;,&#10;  &quot;search_patients&quot;: &quot;Rechercher des patients...&quot;,&#10;  &quot;first_name&quot;: &quot;Prénom&quot;,&#10;  &quot;last_name&quot;: &quot;Nom de famille&quot;,&#10;  &quot;email&quot;: &quot;E-mail&quot;,&#10;  &quot;phone&quot;: &quot;Téléphone&quot;,&#10;  &quot;date_of_birth&quot;: &quot;Date de naissance&quot;,&#10;  &quot;address&quot;: &quot;Adresse&quot;,&#10;  &quot;save&quot;: &quot;Enregistrer&quot;,&#10;  &quot;cancel&quot;: &quot;Annuler&quot;,&#10;  &quot;edit&quot;: &quot;Modifier&quot;,&#10;  &quot;delete&quot;: &quot;Supprimer&quot;,&#10;  &quot;view_details&quot;: &quot;Voir les détails&quot;,&#10;  &quot;book_appointment&quot;: &quot;Prendre rendez-vous&quot;,&#10;  &quot;appointments&quot;: &quot;Rendez-vous&quot;,&#10;  &quot;today&quot;: &quot;Aujourd'hui&quot;,&#10;  &quot;tomorrow&quot;: &quot;Demain&quot;,&#10;  &quot;this_week&quot;: &quot;Cette semaine&quot;,&#10;  &quot;next_week&quot;: &quot;La semaine prochaine&quot;,&#10;  &quot;no_appointments&quot;: &quot;Aucun rendez-vous programmé&quot;,&#10;  &quot;appointment_time&quot;: &quot;Heure du rendez-vous&quot;,&#10;  &quot;appointment_type&quot;: &quot;Type de rendez-vous&quot;,&#10;  &quot;notes&quot;: &quot;Notes&quot;,&#10;  &quot;status&quot;: &quot;Statut&quot;,&#10;  &quot;confirmed&quot;: &quot;Confirmé&quot;,&#10;  &quot;pending&quot;: &quot;En attente&quot;,&#10;  &quot;completed&quot;: &quot;Terminé&quot;,&#10;  &quot;cancelled&quot;: &quot;Annulé&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient créé avec succès&quot;,&#10;  &quot;patient_added_to_system&quot;: &quot;a été ajouté au système.&quot;,&#10;  &quot;failed_to_create_patient&quot;: &quot;Échec de la création du patient&quot;,&#10;  &quot;unable_to_create_patient&quot;: &quot;Impossible de créer le patient. Veuillez vérifier vos données et réessayer.&quot;,&#10;  &quot;patient_updated_successfully&quot;: &quot;Patient mis à jour avec succès&quot;,&#10;  &quot;patient_info_updated&quot;: &quot;Les informations ont été mises à jour.&quot;,&#10;  &quot;failed_to_update_patient&quot;: &quot;Échec de la mise à jour du patient&quot;,&#10;  &quot;unable_to_update_patient&quot;: &quot;Impossible de mettre à jour le patient. Veuillez réessayer.&quot;,&#10;  &quot;patient_deleted_successfully&quot;: &quot;Patient supprimé avec succès&quot;,&#10;  &quot;patient_removed_from_system&quot;: &quot;a été retiré du système.&quot;,&#10;  &quot;failed_to_delete_patient&quot;: &quot;Échec de la suppression du patient&quot;,&#10;  &quot;unable_to_delete_patient&quot;: &quot;Impossible de supprimer le patient. Veuillez réessayer.&quot;,&#10;  &quot;patient_not_found&quot;: &quot;Patient non trouvé&quot;,&#10;  &quot;back_to_list&quot;: &quot;Retour à la liste&quot;,&#10;  &quot;edit_patient&quot;: &quot;Modifier le patient&quot;,&#10;  &quot;patient_details&quot;: &quot;Détails du patient&quot;,&#10;  &quot;patients_count&quot;: &quot;{count} sur {total} patients&quot;,&#10;  &quot;no_patients_found&quot;: &quot;Aucun patient trouvé&quot;,&#10;  &quot;start_by_adding_patient&quot;: &quot;Commencez par ajouter votre premier patient au système.&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Échec du chargement des patients&quot;,&#10;  &quot;connection_error&quot;: &quot;Échec du chargement des patients. Vérifiez votre connexion et réessayez.&quot;,&#10;  &quot;confirm_delete_patient&quot;: &quot;Êtes-vous sûr de vouloir supprimer {name} ? Cette action ne peut pas être annulée.&quot;,&#10;  &quot;gender&quot;: &quot;Genre&quot;,&#10;  &quot;male&quot;: &quot;Homme&quot;,&#10;  &quot;female&quot;: &quot;Femme&quot;,&#10;  &quot;other&quot;: &quot;Autre&quot;,&#10;  &quot;street_address&quot;: &quot;Adresse&quot;,&#10;  &quot;city&quot;: &quot;Ville&quot;,&#10;  &quot;state&quot;: &quot;État/Province&quot;,&#10;  &quot;zip_code&quot;: &quot;Code postal&quot;,&#10;  &quot;saving&quot;: &quot;Enregistrement...&quot;,&#10;  &quot;create_patient&quot;: &quot;Créer un patient&quot;,&#10;  &quot;update_patient&quot;: &quot;Mettre à jour le patient&quot;,&#10;  &quot;first_name_required&quot;: &quot;Le prénom est requis&quot;,&#10;  &quot;last_name_required&quot;: &quot;Le nom de famille est requis&quot;,&#10;  &quot;phone_required&quot;: &quot;Le téléphone est requis&quot;,&#10;  &quot;email_invalid&quot;: &quot;L'e-mail n'est pas valide&quot;,&#10;  &quot;years_old&quot;: &quot;ans&quot;,&#10;  &quot;try_adjusting_search&quot;: &quot;Essayez d'ajuster vos critères de recherche&quot;,&#10;  &quot;back_to_patients&quot;: &quot;← Retour aux patients&quot;,&#10;  &quot;age&quot;: &quot;Âge&quot;,&#10;  &quot;years&quot;: &quot;ans&quot;,&#10;  &quot;contact_information&quot;: &quot;Informations de contact&quot;,&#10;  &quot;address_information&quot;: &quot;Informations d'adresse&quot;,&#10;  &quot;upcoming_appointments&quot;: &quot;Rendez-vous à venir&quot;,&#10;  &quot;previous_appointments&quot;: &quot;Rendez-vous précédents&quot;,&#10;  &quot;no_upcoming_appointments&quot;: &quot;Aucun rendez-vous à venir&quot;,&#10;  &quot;no_previous_appointments&quot;: &quot;Aucun rendez-vous précédent&quot;,&#10;  &quot;appointment_booked&quot;: &quot;Rendez-vous réservé&quot;,&#10;  &quot;appointment_booked_success&quot;: &quot;Le rendez-vous a été réservé avec succès.&quot;,&#10;  &quot;booking_failed&quot;: &quot;Échec de la réservation&quot;,&#10;  &quot;unable_to_book&quot;: &quot;Impossible de réserver le rendez-vous&quot;,&#10;  &quot;appointment_updated&quot;: &quot;Rendez-vous mis à jour&quot;,&#10;  &quot;appointment_updated_success&quot;: &quot;Le rendez-vous a été mis à jour avec succès.&quot;,&#10;  &quot;update_failed&quot;: &quot;Échec de la mise à jour&quot;,&#10;  &quot;unable_to_update_appointment&quot;: &quot;Impossible de mettre à jour le rendez-vous&quot;,&#10;  &quot;appointment_cancelled&quot;: &quot;Rendez-vous annulé&quot;,&#10;  &quot;appointment_cancelled_success&quot;: &quot;Le rendez-vous a été annulé avec succès.&quot;,&#10;  &quot;cancellation_failed&quot;: &quot;Échec de l'annulation&quot;,&#10;  &quot;unable_to_cancel&quot;: &quot;Impossible d'annuler le rendez-vous&quot;,&#10;  &quot;status_updated&quot;: &quot;Statut mis à jour&quot;,&#10;  &quot;status_updated_to&quot;: &quot;Le statut du rendez-vous a été mis à jour vers {status}.&quot;,&#10;  &quot;unable_to_update_status&quot;: &quot;Impossible de mettre à jour le statut du rendez-vous&quot;,&#10;  &quot;appointment_deleted&quot;: &quot;Rendez-vous supprimé&quot;,&#10;  &quot;appointment_deleted_success&quot;: &quot;Le rendez-vous a été définitivement supprimé.&quot;,&#10;  &quot;deletion_failed&quot;: &quot;Échec de la suppression&quot;,&#10;  &quot;unable_to_delete_appointment&quot;: &quot;Impossible de supprimer le rendez-vous&quot;,&#10;  &quot;failed_to_load_appointments&quot;: &quot;Échec du chargement des rendez-vous&quot;,&#10;  &quot;unable_to_load_appointments&quot;: &quot;Impossible de charger les rendez-vous du patient&quot;,&#10;  &quot;search&quot;: &quot;Rechercher&quot;,&#10;  &quot;clear&quot;: &quot;Effacer&quot;,&#10;  &quot;age_from&quot;: &quot;Âge de&quot;,&#10;  &quot;age_to&quot;: &quot;Âge à&quot;,&#10;  &quot;book_new_appointment&quot;: &quot;Réserver un nouveau rendez-vous&quot;,&#10;  &quot;patient&quot;: &quot;Patient&quot;,&#10;  &quot;appointment_title&quot;: &quot;Titre du rendez-vous&quot;,&#10;  &quot;appointment_title_required&quot;: &quot;Titre du rendez-vous *&quot;,&#10;  &quot;appointment_title_placeholder&quot;: &quot;ex. Examen de routine, Visite de suivi&quot;,&#10;  &quot;date&quot;: &quot;Date&quot;,&#10;  &quot;date_required&quot;: &quot;Date *&quot;,&#10;  &quot;start_time&quot;: &quot;Heure de début&quot;,&#10;  &quot;start_time_required&quot;: &quot;Heure de début *&quot;,&#10;  &quot;end_time&quot;: &quot;Heure de fin&quot;,&#10;  &quot;end_time_required&quot;: &quot;Heure de fin *&quot;,&#10;  &quot;notes_optional&quot;: &quot;Notes (Optionnel)&quot;,&#10;  &quot;notes_placeholder&quot;: &quot;Notes ou instructions supplémentaires...&quot;,&#10;  &quot;booking&quot;: &quot;Réservation...&quot;,&#10;  &quot;title_required&quot;: &quot;Le titre est requis&quot;,&#10;  &quot;date_required_error&quot;: &quot;La date est requise&quot;,&#10;  &quot;date_past_error&quot;: &quot;La date ne peut pas être dans le passé&quot;,&#10;  &quot;start_time_required_error&quot;: &quot;L'heure de début est requise&quot;,&#10;  &quot;end_time_required_error&quot;: &quot;L'heure de fin est requise&quot;,&#10;  &quot;end_time_after_start&quot;: &quot;L'heure de fin doit être après l'heure de début&quot;,&#10;  &quot;appointment_confirmed&quot;: &quot;Rendez-vous confirmé&quot;,&#10;  &quot;appointment_booked_with&quot;: &quot;Rendez-vous avec {name} réservé avec succès.&quot;,&#10;  &quot;booking_error&quot;: &quot;Il y a eu un problème lors de la réservation du rendez-vous. Veuillez réessayer.&quot;,&#10;  &quot;loading_appointment_types&quot;: &quot;Chargement des types de rendez-vous...&quot;,&#10;  &quot;consultation_with&quot;: &quot;Consultation avec {name}&quot;,&#10;  &quot;min&quot;: &quot;min&quot;,&#10;  &quot;appointment_calendar&quot;: &quot;Calendrier des rendez-vous&quot;,&#10;  &quot;manage_schedule_appointments&quot;: &quot;Gérer et planifier les rendez-vous des patients.&quot;,&#10;  &quot;new_appointment&quot;: &quot;Nouveau rendez-vous&quot;,&#10;  &quot;month&quot;: &quot;Mois&quot;,&#10;  &quot;week&quot;: &quot;Semaine&quot;,&#10;  &quot;day&quot;: &quot;Jour&quot;,&#10;  &quot;loading_appointments&quot;: &quot;Chargement des rendez-vous...&quot;,&#10;  &quot;error&quot;: &quot;Erreur&quot;,&#10;  &quot;success&quot;: &quot;Succès&quot;,&#10;  &quot;appointment_updated_successfully&quot;: &quot;Rendez-vous mis à jour avec succès&quot;,&#10;  &quot;appointment_status_updated_successfully&quot;: &quot;Statut du rendez-vous mis à jour avec succès&quot;,&#10;  &quot;appointment_cancelled_successfully&quot;: &quot;Rendez-vous annulé avec succès&quot;,&#10;  &quot;appointment_deleted_successfully&quot;: &quot;Rendez-vous supprimé avec succès&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Échec du chargement des patients&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient créé avec succès.&quot;,&#10;  &quot;failed_to_create_patient_booking&quot;: &quot;Échec de la création du patient&quot;,&#10;  &quot;select_patient&quot;: &quot;Sélectionner un patient&quot;,&#10;  &quot;search_for_patient&quot;: &quot;Rechercher un patient...&quot;,&#10;  &quot;create_new_patient&quot;: &quot;Créer un nouveau patient&quot;,&#10;  &quot;select_time_slot&quot;: &quot;Sélectionner un créneau horaire&quot;,&#10;  &quot;select_patient_for_appointment&quot;: &quot;Sélectionner un patient pour le rendez-vous&quot;,&#10;  &quot;or&quot;: &quot;ou&quot;,&#10;  &quot;previous&quot;: &quot;Précédent&quot;,&#10;  &quot;next&quot;: &quot;Suivant&quot;,&#10;  &quot;today&quot;: &quot;Aujourd'hui&quot;,&#10;  &quot;sunday&quot;: &quot;Dimanche&quot;,&#10;  &quot;monday&quot;: &quot;Lundi&quot;,&#10;  &quot;tuesday&quot;: &quot;Mardi&quot;,&#10;  &quot;wednesday&quot;: &quot;Mercredi&quot;,&#10;  &quot;thursday&quot;: &quot;Jeudi&quot;,&#10;  &quot;friday&quot;: &quot;Vendredi&quot;,&#10;  &quot;saturday&quot;: &quot;Samedi&quot;,&#10;  &quot;sun&quot;: &quot;Dim&quot;,&#10;  &quot;mon&quot;: &quot;Lun&quot;,&#10;  &quot;tue&quot;: &quot;Mar&quot;,&#10;  &quot;wed&quot;: &quot;Mer&quot;,&#10;  &quot;thu&quot;: &quot;Jeu&quot;,&#10;  &quot;fri&quot;: &quot;Ven&quot;,&#10;  &quot;sat&quot;: &quot;Sam&quot;,&#10;  &quot;january&quot;: &quot;Janvier&quot;,&#10;  &quot;february&quot;: &quot;Février&quot;,&#10;  &quot;march&quot;: &quot;Mars&quot;,&#10;  &quot;april&quot;: &quot;Avril&quot;,&#10;  &quot;may&quot;: &quot;Mai&quot;,&#10;  &quot;june&quot;: &quot;Juin&quot;,&#10;  &quot;july&quot;: &quot;Juillet&quot;,&#10;  &quot;august&quot;: &quot;Août&quot;,&#10;  &quot;september&quot;: &quot;Septembre&quot;,&#10;  &quot;october&quot;: &quot;Octobre&quot;,&#10;  &quot;november&quot;: &quot;Novembre&quot;,&#10;  &quot;december&quot;: &quot;Décembre&quot;,&#10;  &quot;am&quot;: &quot;AM&quot;,&#10;  &quot;pm&quot;: &quot;PM&quot;,&#10;  &quot;select_date_time&quot;: &quot;Sélectionner la date et l'heure&quot;,&#10;  &quot;select_date_time_description&quot;: &quot;Choisissez votre date et heure préférées pour le rendez-vous.&quot;,&#10;  &quot;appointment_duration&quot;: &quot;Durée du rendez-vous&quot;,&#10;  &quot;available_time_slots&quot;: &quot;Créneaux horaires disponibles&quot;,&#10;  &quot;or_set_custom_time&quot;: &quot;Ou définir une heure personnalisée&quot;,&#10;  &quot;selected_appointment_time&quot;: &quot;Heure de rendez-vous sélectionnée&quot;,&#10;  &quot;continue_to_patient_selection&quot;: &quot;Continuer vers la sélection du patient&quot;,&#10;  &quot;for&quot;: &quot;pour&quot;,&#10;  &quot;at&quot;: &quot;à&quot;,&#10;  &quot;back_to_time&quot;: &quot;Retour à l'heure&quot;,&#10;  &quot;search_by_name_email&quot;: &quot;Rechercher par nom ou e-mail...&quot;,&#10;  &quot;or_create_new_patient&quot;: &quot;Ou créer un nouveau patient&quot;,&#10;  &quot;back_to_patient_search&quot;: &quot;Retour à la recherche de patient&quot;,&#10;  &quot;confirm_appointment&quot;: &quot;Confirmer le rendez-vous&quot;,&#10;  &quot;back_to_patient&quot;: &quot;Retour au patient&quot;,&#10;&#10;  &quot;settings_saved_successfully&quot;: &quot;Paramètres sauvegardés avec succès&quot;,&#10;  &quot;failed_to_save_settings&quot;: &quot;Échec de la sauvegarde des paramètres&quot;,&#10;  &quot;failed_to_load_settings&quot;: &quot;Échec du chargement des paramètres&quot;,&#10;  &quot;manage_clinic_preferences&quot;: &quot;Gérer les préférences et la configuration de votre clinique&quot;,&#10;  &quot;save_changes&quot;: &quot;Sauvegarder les modifications&quot;,&#10;  &quot;saving&quot;: &quot;Sauvegarde...&quot;,&#10;&#10;  &quot;general&quot;: &quot;Général&quot;,&#10;  &quot;appointments&quot;: &quot;Rendez-vous&quot;,&#10;  &quot;notifications&quot;: &quot;Notifications&quot;,&#10;  &quot;display&quot;: &quot;Affichage&quot;,&#10;&#10;  &quot;localization&quot;: &quot;Localisation&quot;,&#10;  &quot;language&quot;: &quot;Langue&quot;,&#10;  &quot;country&quot;: &quot;Pays&quot;,&#10;  &quot;timezone&quot;: &quot;Fuseau horaire&quot;,&#10;&#10;  &quot;clinic_information&quot;: &quot;Informations de la clinique&quot;,&#10;  &quot;clinic_name&quot;: &quot;Nom de la clinique&quot;,&#10;  &quot;clinic_address&quot;: &quot;Adresse&quot;,&#10;  &quot;clinic_phone&quot;: &quot;Téléphone&quot;,&#10;  &quot;clinic_email&quot;: &quot;E-mail&quot;,&#10;  &quot;enter_clinic_name&quot;: &quot;Entrez le nom de la clinique&quot;,&#10;  &quot;enter_clinic_address&quot;: &quot;Entrez l'adresse de la clinique&quot;,&#10;  &quot;enter_phone_number&quot;: &quot;Entrez le numéro de téléphone&quot;,&#10;  &quot;enter_email_address&quot;: &quot;Entrez l'adresse e-mail&quot;,&#10;&#10;  &quot;working_hours&quot;: &quot;Heures de travail&quot;,&#10;  &quot;default_appointment_duration&quot;: &quot;Durée par défaut du rendez-vous&quot;,&#10;  &quot;start_time&quot;: &quot;Heure de début&quot;,&#10;  &quot;end_time&quot;: &quot;Heure de fin&quot;,&#10;  &quot;working_days&quot;: &quot;Jours de travail&quot;,&#10;  &quot;minutes&quot;: &quot;minutes&quot;,&#10;  &quot;hour&quot;: &quot;heure&quot;,&#10;  &quot;hours&quot;: &quot;heures&quot;,&#10;  &quot;day&quot;: &quot;jour&quot;,&#10;&#10;  &quot;notification_preferences&quot;: &quot;Préférences de notification&quot;,&#10;  &quot;email_notifications&quot;: &quot;Notifications par e-mail&quot;,&#10;  &quot;receive_notifications_email&quot;: &quot;Recevoir des notifications par e-mail&quot;,&#10;  &quot;sms_notifications&quot;: &quot;Notifications SMS&quot;,&#10;  &quot;receive_notifications_sms&quot;: &quot;Recevoir des notifications par SMS&quot;,&#10;  &quot;appointment_reminders&quot;: &quot;Rappels de rendez-vous&quot;,&#10;  &quot;send_reminders_before&quot;: &quot;Envoyer des rappels avant les rendez-vous&quot;,&#10;  &quot;reminder_time&quot;: &quot;Heure du rappel&quot;,&#10;  &quot;minutes_before&quot;: &quot;minutes avant&quot;,&#10;  &quot;before&quot;: &quot;avant&quot;,&#10;&#10;  &quot;display_preferences&quot;: &quot;Préférences d'affichage&quot;,&#10;  &quot;date_format&quot;: &quot;Format de date&quot;,&#10;  &quot;time_format&quot;: &quot;Format d'heure&quot;,&#10;  &quot;currency&quot;: &quot;Devise&quot;,&#10;  &quot;temperature_unit&quot;: &quot;Unité de température&quot;,&#10;  &quot;show_weather_widget&quot;: &quot;Afficher le widget météo&quot;,&#10;  &quot;display_weather_dashboard&quot;: &quot;Afficher les informations météo sur le tableau de bord&quot;,&#10;  &quot;hour_format_12&quot;: &quot;12 heures (AM/PM)&quot;,&#10;  &quot;hour_format_24&quot;: &quot;24 heures&quot;,&#10;  &quot;celsius&quot;: &quot;Celsius (°C)&quot;,&#10;  &quot;fahrenheit&quot;: &quot;Fahrenheit (°F)&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/Calendar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/Calendar.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useCallback } from 'react';&#10;import { useTranslation } from '../context/TranslationContext';&#10;import { DashboardLayout } from '../components/layout/DashboardLayout';&#10;import { MonthView } from '../components/calendar/MonthView';&#10;import { WeeklyView } from '../components/calendar/WeeklyView';&#10;import { DayView } from '../components/calendar/DayView';&#10;import { AppointmentDetail } from '../components/patients/AppointmentDetail';&#10;import { AppointmentBookingForm } from '../components/patients/AppointmentBookingForm';&#10;import { PatientForm } from '../components/patients/PatientForm';&#10;import { ConfirmDialog } from '../components/common/ConfirmDialog';&#10;import { AppointmentService } from '../services/appointmentService';&#10;import { PatientService } from '../services/patientService';&#10;import { SettingsService, settingsEventDispatcher } from '../services/settingsService';&#10;import { Appointment, AppointmentUpdate, AppointmentStatus, AppointmentCreate } from '../types/Appointment';&#10;import { Patient, PatientCreate, PatientUpdate } from '../types/Patient';&#10;import { useNotification } from '../context/NotificationContext';&#10;import '../styles/calendar-day.css'; // Import the calendar day CSS&#10;import { RescheduleConfirmation } from '../components/calendar/RescheduleConfirmation';&#10;&#10;type CalendarView = 'month' | 'week' | 'day';&#10;&#10;export const Calendar: React.FC = () =&gt; {&#10;  const { t } = useTranslation();&#10;  const [currentDate, setCurrentDate] = useState(new Date());&#10;  const [view, setView] = useState&lt;CalendarView&gt;('week');&#10;  const [appointments, setAppointments] = useState&lt;Appointment[]&gt;([]);&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [selectedAppointment, setSelectedAppointment] = useState&lt;Appointment | null&gt;(null);&#10;  const [selectedPatient, setSelectedPatient] = useState&lt;Patient | null&gt;(null);&#10;  const [appointmentLoading, setAppointmentLoading] = useState(false);&#10;  const [showNewAppointmentForm, setShowNewAppointmentForm] = useState(false);&#10;  const [selectedPatientForBooking, setSelectedPatientForBooking] = useState&lt;Patient | null&gt;(null);&#10;  const [patients, setPatients] = useState&lt;Patient[]&gt;([]);&#10;  const [bookingStep, setBookingStep] = useState&lt;'patient' | 'appointment'&gt;('patient');&#10;  const [selectedTimeSlot, setSelectedTimeSlot] = useState&lt;{date: string, time: string, endTime?: string} | null&gt;(null);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [isSearchingPatients, setIsSearchingPatients] = useState(false);&#10;  const [showCreatePatientForm, setShowCreatePatientForm] = useState(false);&#10;&#10;  // Working hours from settings&#10;  const [workingHours, setWorkingHours] = useState({&#10;    startTime: '08:00',&#10;    endTime: '17:00'&#10;  });&#10;&#10;  // Working days from settings&#10;  const [workingDays, setWorkingDays] = useState&lt;string[]&gt;([&#10;    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'&#10;  ]);&#10;&#10;  // Reschedule confirmation state&#10;  const [showRescheduleConfirmation, setShowRescheduleConfirmation] = useState(false);&#10;  const [rescheduleData, setRescheduleData] = useState&lt;{&#10;    appointment: Appointment;&#10;    patient: Patient;&#10;    newDate: string;&#10;    newStartTime: string;&#10;    newEndTime: string;&#10;  } | null&gt;(null);&#10;&#10;  // Drag and drop state&#10;  const [isDragging, setIsDragging] = useState(false);&#10;  const [dragStart, setDragStart] = useState&lt;{date: string, time: string} | null&gt;(null);&#10;  const [dragEnd, setDragEnd] = useState&lt;{date: string, time: string} | null&gt;(null);&#10;&#10;  // Confirmation dialog state&#10;  const [showCancelConfirm, setShowCancelConfirm] = useState(false);&#10;  const [appointmentToCancel, setAppointmentToCancel] = useState&lt;string | null&gt;(null);&#10;  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);&#10;  const [appointmentToDelete, setAppointmentToDelete] = useState&lt;string | null&gt;(null);&#10;&#10;  const { showNotification } = useNotification();&#10;&#10;  // Load appointments from API&#10;  const loadAppointments = async () =&gt; {&#10;    setLoading(true);&#10;    setError(null);&#10;    try {&#10;      // Calculate date range based on current view&#10;      const startDate = getViewStartDate();&#10;      const days = getViewDays();&#10;&#10;      const appointmentData = await AppointmentService.listAppointmentsByRange(&#10;        startDate.toISOString().split('T')[0],&#10;        days&#10;      );&#10;      setAppointments(appointmentData);&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to load appointments');&#10;      console.error('Error loading appointments:', err);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  // Load patients for appointment booking&#10;  const loadPatients = async () =&gt; {&#10;    try {&#10;      const response = await PatientService.listPatients();&#10;      setPatients(response.data);&#10;    } catch (err) {&#10;      console.error('Error loading patients:', err);&#10;    }&#10;  };&#10;&#10;  // Load settings for working hours&#10;  const loadSettings = async () =&gt; {&#10;    try {&#10;      const settings = await SettingsService.getSettings();&#10;      setWorkingHours({&#10;        startTime: settings.appointments_start_time || '08:00',&#10;        endTime: settings.appointments_end_time || '17:00'&#10;      });&#10;      setWorkingDays(settings.appointments_working_days || ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']);&#10;    } catch (err) {&#10;      console.error('Error loading settings:', err);&#10;    }&#10;  };&#10;&#10;  // Load data on component mount and when date/view changes&#10;  useEffect(() =&gt; {&#10;    loadAppointments();&#10;    loadPatients();&#10;    loadSettings();&#10;  }, [currentDate, view]);&#10;&#10;  // Listen for settings updates&#10;  useEffect(() =&gt; {&#10;    const handleSettingsUpdate = (event: any) =&gt; {&#10;      const updatedSettings = event.detail;&#10;      if (updatedSettings?.appointments_start_time || updatedSettings?.appointments_end_time) {&#10;        setWorkingHours({&#10;          startTime: updatedSettings.appointments_start_time || workingHours.startTime,&#10;          endTime: updatedSettings.appointments_end_time || workingHours.endTime&#10;        });&#10;      }&#10;      if (updatedSettings?.working_days) {&#10;        setWorkingDays(updatedSettings.working_days);&#10;      }&#10;    };&#10;&#10;    settingsEventDispatcher.addEventListener('settingsUpdated', handleSettingsUpdate);&#10;&#10;    return () =&gt; {&#10;      settingsEventDispatcher.removeEventListener('settingsUpdated', handleSettingsUpdate);&#10;    };&#10;  }, [workingHours, workingDays]);&#10;&#10;  // Handle appointment creation&#10;  const handleCreateAppointment = async (appointmentData: AppointmentCreate) =&gt; {&#10;    setAppointmentLoading(true);&#10;    try {&#10;      const newAppointment = await AppointmentService.createAppointment(appointmentData);&#10;      setAppointments(prev =&gt; [...prev, newAppointment]);&#10;      setShowNewAppointmentForm(false);&#10;      setSelectedTimeSlot(null);&#10;      showNotification('success', 'Success', 'Appointment created successfully');&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to create appointment');&#10;      console.error('Error creating appointment:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle appointment update&#10;  const handleUpdateAppointment = async (appointmentId: string, appointmentData: AppointmentUpdate) =&gt; {&#10;    setAppointmentLoading(true);&#10;    try {&#10;      const updatedAppointment = await AppointmentService.updateAppointment(appointmentId, appointmentData);&#10;      setAppointments(prev =&gt; prev.map(apt =&gt; apt.id === appointmentId ? updatedAppointment : apt));&#10;      setSelectedAppointment(updatedAppointment);&#10;      showNotification('success', 'Success', 'Appointment updated successfully');&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to update appointment');&#10;      console.error('Error updating appointment:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle appointment status update&#10;  const handleUpdateAppointmentStatus = async (appointmentId: string, status: AppointmentStatus) =&gt; {&#10;    setAppointmentLoading(true);&#10;    try {&#10;      const updatedAppointment = await AppointmentService.updateAppointment(appointmentId, { status });&#10;      setAppointments(prev =&gt; prev.map(apt =&gt; apt.id === appointmentId ? updatedAppointment : apt));&#10;      setSelectedAppointment(updatedAppointment);&#10;      showNotification('success', 'Success', `Appointment ${status.toLowerCase()}`);&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to update appointment status');&#10;      console.error('Error updating appointment status:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle appointment deletion&#10;  const handleDeleteAppointment = async (appointmentId: string) =&gt; {&#10;    setAppointmentToDelete(appointmentId);&#10;    setShowDeleteConfirm(true);&#10;  };&#10;&#10;  // Actual deletion logic (called from confirmation dialog)&#10;  const performDeleteAppointment = async (appointmentId: string) =&gt; {&#10;    setAppointmentLoading(true);&#10;    try {&#10;      await AppointmentService.deleteAppointment(appointmentId);&#10;      setAppointments(prev =&gt; prev.filter(apt =&gt; apt.id !== appointmentId));&#10;      setSelectedAppointment(null);&#10;      showNotification('success', 'Success', 'Appointment deleted successfully');&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to delete appointment');&#10;      console.error('Error deleting appointment:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle appointment cancellation&#10;  const handleCancelAppointment = async (appointmentId: string) =&gt; {&#10;    setAppointmentToCancel(appointmentId);&#10;    setShowCancelConfirm(true);&#10;  };&#10;&#10;  // Actual cancellation logic (called from confirmation dialog)&#10;  const performCancelAppointment = async (appointmentId: string) =&gt; {&#10;    setAppointmentLoading(true);&#10;    try {&#10;      const updatedAppointment = await AppointmentService.updateAppointment(appointmentId, { status: 'Cancelled' });&#10;      setAppointments(prev =&gt; prev.map(apt =&gt; apt.id === appointmentId ? updatedAppointment : apt));&#10;      setSelectedAppointment(updatedAppointment);&#10;      showNotification('success', 'Success', 'Appointment cancelled');&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to cancel appointment');&#10;      console.error('Error cancelling appointment:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle new appointment flow&#10;  const handleNewAppointmentClick = () =&gt; {&#10;    setShowNewAppointmentForm(true);&#10;    setBookingStep('patient');&#10;    setSelectedPatientForBooking(null);&#10;    setSearchQuery('');&#10;    setShowCreatePatientForm(false);&#10;  };&#10;&#10;  // Handle patient selection for booking&#10;  const handlePatientSelect = (patient: Patient) =&gt; {&#10;    // Set the selected patient and transition to appointment booking step&#10;    setSelectedPatientForBooking(patient);&#10;    setBookingStep('appointment');&#10;  };&#10;&#10;  // Reset booking flow when closing the modal&#10;  const closeNewAppointmentModal = () =&gt; {&#10;    setShowNewAppointmentForm(false);&#10;&#10;    // Reset the booking flow after the animation completes&#10;    setTimeout(() =&gt; {&#10;      setBookingStep('patient');&#10;      setSelectedPatientForBooking(null);&#10;      setSelectedTimeSlot(null);&#10;      setShowCreatePatientForm(false);&#10;      setSearchQuery('');&#10;    }, 300);&#10;  };&#10;&#10;  // Handle patient creation&#10;  const handleCreatePatient = async (patientData: PatientCreate | PatientUpdate): Promise&lt;void&gt; =&gt; {&#10;    try {&#10;      // Create clean data object with only non-empty fields&#10;      const createData: any = {&#10;        first_name: patientData.first_name || '',&#10;        last_name: patientData.last_name || '',&#10;        phone: patientData.phone || '',&#10;        gender: patientData.gender || 'male',&#10;      };&#10;&#10;      // Only add optional fields if they have values&#10;      if (patientData.email &amp;&amp; patientData.email.trim()) {&#10;        createData.email = patientData.email.trim();&#10;      }&#10;      if (patientData.date_of_birth &amp;&amp; patientData.date_of_birth.trim()) {&#10;        createData.date_of_birth = patientData.date_of_birth.trim();&#10;      }&#10;      if (patientData.street &amp;&amp; patientData.street.trim()) {&#10;        createData.street = patientData.street.trim();&#10;      }&#10;      if (patientData.city &amp;&amp; patientData.city.trim()) {&#10;        createData.city = patientData.city.trim();&#10;      }&#10;      if (patientData.state &amp;&amp; patientData.state.trim()) {&#10;        createData.state = patientData.state.trim();&#10;      }&#10;      if (patientData.zip_code &amp;&amp; patientData.zip_code.trim()) {&#10;        createData.zip_code = patientData.zip_code.trim();&#10;      }&#10;&#10;      const newPatient = await PatientService.createPatient(createData);&#10;      setPatients(prev =&gt; [...prev, newPatient]);&#10;      setSelectedPatientForBooking(newPatient);&#10;      setShowCreatePatientForm(false);&#10;      setBookingStep('appointment');&#10;      showNotification('success', 'Success', 'Patient created successfully');&#10;    } catch (err) {&#10;      console.error('Error creating patient:', err);&#10;      showNotification('error', 'Error', 'Failed to create patient');&#10;      // Re-throw the error so PatientForm can handle it appropriately&#10;      throw err;&#10;    }&#10;  };&#10;&#10;  // Handle appointment booking completion&#10;  const handleAppointmentBookingComplete = async (appointmentData: AppointmentCreate) =&gt; {&#10;    await handleCreateAppointment(appointmentData);&#10;    // Reset booking state&#10;    setBookingStep('patient');&#10;    setSelectedPatientForBooking(null);&#10;    setSearchQuery('');&#10;    setShowCreatePatientForm(false);&#10;  };&#10;&#10;  // Search patients using API&#10;  const searchPatients = useCallback(async (query: string) =&gt; {&#10;    if (!query.trim()) {&#10;      loadPatients();&#10;      return;&#10;    }&#10;&#10;    setIsSearchingPatients(true);&#10;    try {&#10;      const response = await PatientService.searchPatients(query.trim(), 0, 100);&#10;      setPatients(response.data);&#10;    } catch (err) {&#10;      console.error('Error searching patients:', err);&#10;      showNotification('error', 'Error', 'Failed to search patients');&#10;    } finally {&#10;      setIsSearchingPatients(false);&#10;    }&#10;  }, []);&#10;&#10;  // Debounced search effect for patients&#10;  useEffect(() =&gt; {&#10;    const timeoutId = setTimeout(() =&gt; {&#10;      if (searchQuery.trim()) {&#10;        searchPatients(searchQuery);&#10;      } else {&#10;        loadPatients();&#10;      }&#10;    }, 300); // 300ms debounce&#10;&#10;    return () =&gt; clearTimeout(timeoutId);&#10;  }, [searchQuery, searchPatients]);&#10;&#10;  // Helper functions for date calculations&#10;  const getViewStartDate = () =&gt; {&#10;    const date = new Date(currentDate);&#10;    if (view === 'week') {&#10;      date.setDate(date.getDate() - date.getDay()); // Start of week&#10;    } else if (view === 'month') {&#10;      date.setDate(1); // Start of month&#10;    }&#10;    return date;&#10;  };&#10;&#10;  const getViewDays = () =&gt; {&#10;    switch (view) {&#10;      case 'day': return 1;&#10;      case 'week': return 7;&#10;      case 'month': return 31; // Approximate&#10;      default: return 7;&#10;    }&#10;  };&#10;&#10;  const getStatusColor = (status: AppointmentStatus) =&gt; {&#10;    switch (status) {&#10;      case 'Completed': return 'bg-green-100 text-green-800';&#10;      case 'Booked': return 'bg-blue-100 text-blue-800';&#10;      case 'Cancelled': return 'bg-red-100 text-red-800';&#10;      case 'No Show': return 'bg-orange-100 text-orange-800';&#10;      default: return 'bg-gray-100 text-gray-800';&#10;    }&#10;  };&#10;&#10;  // Get background color for appointment status&#10;  const getAppointmentBackgroundColor = (status: AppointmentStatus) =&gt; {&#10;    switch (status) {&#10;      case 'Completed': return '#dcfce7'; // Light green&#10;      case 'Booked': return '#dbeafe';    // Light blue&#10;      case 'Cancelled': return '#fee2e2';  // Light red&#10;      case 'No Show': return '#ffedd5';    // Light orange&#10;      default: return '#f3f4f6';          // Light gray&#10;    }&#10;  };&#10;&#10;  // Get text color for appointment status&#10;  const getAppointmentTextColor = (status: AppointmentStatus) =&gt; {&#10;    switch (status) {&#10;      case 'Completed': return '#166534'; // Dark green&#10;      case 'Booked': return '#1e40af';    // Dark blue&#10;      case 'Cancelled': return '#b91c1c';  // Dark red&#10;      case 'No Show': return '#c2410c';    // Dark orange&#10;      default: return '#4b5563';          // Dark gray&#10;    }&#10;  };&#10;&#10;  const formatDate = (date: Date) =&gt; {&#10;    return date.toLocaleDateString('en-US', {&#10;      weekday: 'long',&#10;      year: 'numeric',&#10;      month: 'long',&#10;      day: 'numeric'&#10;    });&#10;  };&#10;&#10;  const navigateDate = (direction: 'prev' | 'next') =&gt; {&#10;    const newDate = new Date(currentDate);&#10;    if (view === 'day') {&#10;      newDate.setDate(newDate.getDate() + (direction === 'next' ? 1 : -1));&#10;    } else if (view === 'week') {&#10;      newDate.setDate(newDate.getDate() + (direction === 'next' ? 7 : -7));&#10;    } else {&#10;      newDate.setMonth(newDate.getMonth() + (direction === 'next' ? 1 : -1));&#10;    }&#10;    setCurrentDate(newDate);&#10;  };&#10;&#10;  // Format appointment time from API response&#10;  const formatAppointmentTime = (appointment: Appointment) =&gt; {&#10;    if (appointment.start_time) {&#10;      // Convert time format (e.g., &quot;09:00:00.000000&quot;) to &quot;09:00&quot;&#10;      return appointment.start_time.split(':').slice(0, 2).join(':');&#10;    }&#10;    return '00:00';&#10;  };&#10;&#10;  // Get appointment date from API response&#10;  const getAppointmentDate = (appointment: Appointment) =&gt; {&#10;    if (appointment.date) {&#10;      return appointment.date.split('T')[0]; // Extract date part from ISO string&#10;    }&#10;    return new Date().toISOString().split('T')[0];&#10;  };&#10;&#10;  // Get patient name from appointment&#10;  const getPatientName = (appointment: Appointment) =&gt; {&#10;    return `${appointment.patient_first_name} ${appointment.patient_last_name}`;&#10;  };&#10;&#10;  // Calculate appointment duration in minutes&#10;  const getAppointmentDuration = (appointment: Appointment) =&gt; {&#10;    if (appointment.start_time &amp;&amp; appointment.end_time) {&#10;      const start = new Date(`2000-01-01T${appointment.start_time}`);&#10;      const end = new Date(`2000-01-01T${appointment.end_time}`);&#10;      return Math.round((end.getTime() - start.getTime()) / (1000 * 60)); // Duration in minutes&#10;    }&#10;    return 30; // Default duration&#10;  };&#10;&#10;  // Load patient data for the selected appointment&#10;  const loadPatientForAppointment = useCallback(async (appointment: Appointment) =&gt; {&#10;    if (!appointment || !appointment.patient_id) return;&#10;&#10;    try {&#10;      setAppointmentLoading(true);&#10;      const patientData = await PatientService.getPatient(appointment.patient_id);&#10;      setSelectedPatient(patientData);&#10;    } catch (err) {&#10;      console.error('Error loading patient data:', err);&#10;      setError(err instanceof Error ? err.message : 'Failed to load patient data');&#10;      showNotification('error', 'Error', 'Failed to load patient data');&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  }, [showNotification]);&#10;&#10;  // Handle appointment selection&#10;  useEffect(() =&gt; {&#10;    if (selectedAppointment) {&#10;      loadPatientForAppointment(selectedAppointment);&#10;    } else {&#10;      setSelectedPatient(null);&#10;    }&#10;  }, [selectedAppointment, loadPatientForAppointment]);&#10;&#10;  // Format appointments data for MonthView component&#10;  const groupAppointmentsByDate = () =&gt; {&#10;    const grouped: Record&lt;string, any[]&gt; = {};&#10;&#10;    appointments.forEach(appointment =&gt; {&#10;      const dateStr = getAppointmentDate(appointment);&#10;&#10;      if (!grouped[dateStr]) {&#10;        grouped[dateStr] = [];&#10;      }&#10;&#10;      grouped[dateStr].push({&#10;        id: appointment.id,&#10;        patientName: getPatientName(appointment),&#10;        time: formatAppointmentTime(appointment),&#10;        duration: getAppointmentDuration(appointment),&#10;        type: appointment.type,&#10;        status: appointment.status,&#10;        title: appointment.type || 'Appointment'&#10;      });&#10;    });&#10;&#10;    return grouped;&#10;  };&#10;&#10;  const renderCalendarHeader = () =&gt; (&#10;    &lt;div className=&quot;card mb-8&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-primary-600 mb-2&quot;&gt;Calendar&lt;/h1&gt;&#10;          &lt;p className=&quot;text-neutral-600&quot;&gt;{formatDate(currentDate)}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* View Toggle */}&#10;        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;          &lt;div className=&quot;bg-neutral-100 rounded-xl p-1 flex border border-neutral-200&quot;&gt;&#10;            {(['month', 'week', 'day'] as CalendarView[]).map((viewType) =&gt; (&#10;              &lt;button&#10;                key={viewType}&#10;                onClick={() =&gt; setView(viewType)}&#10;                className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 ${&#10;                  view === viewType&#10;                    ? 'bg-primary-500 text-white shadow-primary'&#10;                    : 'text-neutral-600 hover:text-primary-600 hover:bg-white'&#10;                }`}&#10;              &gt;&#10;                {viewType.charAt(0).toUpperCase() + viewType.slice(1)}&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Navigation and Actions */}&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;button&#10;            onClick={() =&gt; navigateDate('prev')}&#10;            className=&quot;btn-secondary p-3&quot;&#10;          &gt;&#10;            &lt;span className=&quot;material-icons-round&quot;&gt;chevron_left&lt;/span&gt;&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            onClick={() =&gt; setCurrentDate(new Date())}&#10;            className=&quot;btn-secondary&quot;&#10;          &gt;&#10;            Today&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            onClick={() =&gt; navigateDate('next')}&#10;            className=&quot;btn-secondary p-3&quot;&#10;          &gt;&#10;            &lt;span className=&quot;material-icons-round&quot;&gt;chevron_right&lt;/span&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;button&#10;            onClick={handleNewAppointmentClick}&#10;            className=&quot;btn-primary&quot;&#10;          &gt;&#10;            &lt;span className=&quot;material-icons-round mr-2&quot;&gt;add&lt;/span&gt;&#10;            New Appointment&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;&#10;  // Generate time slots based on working hours for drag and drop logic&#10;  const generateTimeSlots = () =&gt; {&#10;    const startHour = parseInt(workingHours.startTime.split(':')[0]);&#10;    const endHour = parseInt(workingHours.endTime.split(':')[0]);&#10;    const totalHours = endHour - startHour;&#10;    const slotsPerHour = 4; // 15-minute intervals&#10;    const totalSlots = totalHours * slotsPerHour;&#10;&#10;    return Array.from({ length: totalSlots }, (_, i) =&gt; {&#10;      const hour = Math.floor(i / slotsPerHour) + startHour;&#10;      const minutes = (i % slotsPerHour) * 15;&#10;      return `${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;&#10;    });&#10;  };&#10;&#10;  // Drag and drop handlers&#10;  const handleMouseDown = (e: React.MouseEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    setIsDragging(true);&#10;    setDragStart({ date, time });&#10;    setDragEnd({ date, time });&#10;    console.log('Starting drag at:', date, time);&#10;  };&#10;&#10;  const handleMouseEnter = (date: string, time: string) =&gt; {&#10;    if (isDragging &amp;&amp; dragStart &amp;&amp; dragStart.date === date) {&#10;      setDragEnd({ date, time });&#10;    }&#10;  };&#10;&#10;  const handleMouseUp = () =&gt; {&#10;    if (isDragging &amp;&amp; dragStart &amp;&amp; dragEnd) {&#10;      const timeSlots = generateTimeSlots();&#10;&#10;      const startIndex = timeSlots.indexOf(dragStart.time);&#10;      const endIndex = timeSlots.indexOf(dragEnd.time);&#10;&#10;      if (startIndex !== -1 &amp;&amp; endIndex !== -1) {&#10;        const minIndex = Math.min(startIndex, endIndex);&#10;        const maxIndex = Math.max(startIndex, endIndex);&#10;        const startTime = timeSlots[minIndex];&#10;        const endTime = timeSlots[maxIndex + 1] || timeSlots[maxIndex]; // End time is next slot or same if last&#10;&#10;        console.log('Drag completed:', {&#10;          date: dragStart.date,&#10;          startTime,&#10;          endTime&#10;        });&#10;&#10;        setSelectedTimeSlot({&#10;          date: dragStart.date,&#10;          time: startTime,&#10;          endTime&#10;        });&#10;&#10;        handleNewAppointmentClick();&#10;      }&#10;    }&#10;&#10;    setIsDragging(false);&#10;    setDragStart(null);&#10;    setDragEnd(null);&#10;  };&#10;&#10;  // Check if a slot is selected in the drag&#10;  const isSlotSelected = (date: string, time: string) =&gt; {&#10;    if (!isDragging || !dragStart || !dragEnd || dragStart.date !== date) {&#10;      return false;&#10;    }&#10;&#10;    const timeSlots = generateTimeSlots();&#10;&#10;    const currentIndex = timeSlots.indexOf(time);&#10;    const startIndex = timeSlots.indexOf(dragStart.time);&#10;    const endIndex = timeSlots.indexOf(dragEnd.time);&#10;&#10;    if (currentIndex === -1 || startIndex === -1 || endIndex === -1) {&#10;      return false;&#10;    }&#10;&#10;    const minIndex = Math.min(startIndex, endIndex);&#10;    const maxIndex = Math.max(startIndex, endIndex);&#10;&#10;    return currentIndex &gt;= minIndex &amp;&amp; currentIndex &lt;= maxIndex;&#10;  };&#10;&#10;  // Handle appointment rescheduling via drag and drop&#10;  const handleAppointmentDrop = async (appointment: Appointment, newDate: string, newTime: string) =&gt; {&#10;    // Calculate new end time based on appointment duration&#10;    const duration = getAppointmentDuration(appointment);&#10;    const [hours, minutes] = newTime.split(':').map(Number);&#10;    const newStartTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:00`;&#10;    &#10;    // Calculate end time&#10;    const totalMinutes = hours * 60 + minutes + duration;&#10;    const endHours = Math.floor(totalMinutes / 60);&#10;    const endMinutes = totalMinutes % 60;&#10;    const newEndTime = `${endHours.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}:00`;&#10;&#10;    // Load patient data and show reschedule confirmation&#10;    try {&#10;      setAppointmentLoading(true);&#10;      const patientData = await PatientService.getPatient(appointment.patient_id);&#10;      &#10;      setRescheduleData({&#10;        appointment,&#10;        patient: patientData,&#10;        newDate,&#10;        newStartTime,&#10;        newEndTime&#10;      });&#10;      setShowRescheduleConfirmation(true);&#10;    } catch (err) {&#10;      console.error('Error loading patient data:', err);&#10;      showNotification('error', 'Error', 'Failed to load patient data');&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle reschedule confirmation&#10;  const handleRescheduleConfirm = async (appointmentData: AppointmentUpdate) =&gt; {&#10;    if (!rescheduleData) return;&#10;&#10;    try {&#10;      setAppointmentLoading(true);&#10;      const updatedAppointment = await AppointmentService.updateAppointment(rescheduleData.appointment.id, appointmentData);&#10;      setAppointments(prev =&gt; prev.map(apt =&gt; apt.id === rescheduleData.appointment.id ? updatedAppointment : apt));&#10;      showNotification('success', 'Success', 'Appointment rescheduled successfully');&#10;      setShowRescheduleConfirmation(false);&#10;      setRescheduleData(null);&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to reschedule appointment');&#10;      showNotification('error', 'Error', 'Failed to reschedule appointment');&#10;      console.error('Error rescheduling appointment:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle reschedule cancel&#10;  const handleRescheduleCancel = () =&gt; {&#10;    setShowRescheduleConfirmation(false);&#10;    setRescheduleData(null);&#10;  };&#10;&#10;  // Handle day click to switch to daily view&#10;  const handleDayClick = (selectedDate: Date) =&gt; {&#10;    setCurrentDate(selectedDate);&#10;    setView('day');&#10;  };&#10;&#10;  return (&#10;    &lt;DashboardLayout&gt;&#10;      &lt;div className=&quot;fade-in-element&quot;&gt;&#10;        {renderCalendarHeader()}&#10;&#10;        {view === 'week' &amp;&amp; (&#10;          &lt;WeeklyView&#10;            currentDate={currentDate}&#10;            appointments={appointments}&#10;            handleMouseUp={handleMouseUp}&#10;            handleMouseDown={handleMouseDown}&#10;            handleMouseEnter={handleMouseEnter}&#10;            onSelectSlot={(date, time) =&gt; { setSelectedTimeSlot({ date, time }); handleNewAppointmentClick(); }}&#10;            onAppointmentClick={setSelectedAppointment}&#10;            onAppointmentDrop={handleAppointmentDrop}&#10;            isSlotSelected={isSlotSelected}&#10;            getAppointmentDate={getAppointmentDate}&#10;            formatAppointmentTime={formatAppointmentTime}&#10;            getAppointmentDuration={getAppointmentDuration}&#10;            getAppointmentBackgroundColor={getAppointmentBackgroundColor}&#10;            getAppointmentTextColor={getAppointmentTextColor}&#10;            onDayClick={handleDayClick}&#10;            workingHours={workingHours}&#10;            workingDays={workingDays}&#10;          /&gt;&#10;        )}&#10;        {view === 'day' &amp;&amp; (&#10;          &lt;DayView&#10;            currentDate={currentDate}&#10;            appointments={appointments}&#10;            onTimeSlotClick={(date, time) =&gt; { setSelectedTimeSlot({ date, time }); handleNewAppointmentClick(); }}&#10;            onAppointmentClick={setSelectedAppointment}&#10;            onAppointmentDrop={handleAppointmentDrop}&#10;            getAppointmentDate={getAppointmentDate}&#10;            formatAppointmentTime={formatAppointmentTime}&#10;            getAppointmentDuration={getAppointmentDuration}&#10;            getAppointmentBackgroundColor={getAppointmentBackgroundColor}&#10;            getAppointmentTextColor={getAppointmentTextColor}&#10;            getPatientName={getPatientName}&#10;            handleMouseUp={handleMouseUp}&#10;            handleMouseDown={handleMouseDown}&#10;            handleMouseEnter={handleMouseEnter}&#10;            isSlotSelected={isSlotSelected}&#10;            workingHours={workingHours}&#10;            workingDays={workingDays}&#10;          /&gt;&#10;        )}&#10;        {view === 'month' &amp;&amp; (&#10;          &lt;div className=&quot;card&quot;&gt;&#10;            &lt;MonthView&#10;              currentDate={currentDate}&#10;              appointments={groupAppointmentsByDate()}&#10;              onAppointmentClick={(appointmentId) =&gt; {&#10;                const appointment = appointments.find(apt =&gt; apt.id === appointmentId);&#10;                if (appointment) {&#10;                  setSelectedAppointment(appointment);&#10;                }&#10;              }}&#10;              onDayClick={(date) =&gt; {&#10;                setCurrentDate(date);&#10;                setView('day');&#10;              }}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Appointment Detail Modal */}&#10;        {selectedAppointment &amp;&amp; selectedPatient &amp;&amp; (&#10;          &lt;div className=&quot;fixed inset-0 bg-neutral-900/50 flex items-center justify-center z-50 fade-in-element&quot; onClick={() =&gt; setSelectedAppointment(null)}&gt;&#10;            &lt;div className=&quot;bg-white rounded-xl shadow-2xl w-full max-w-3xl max-h-[90vh] overflow-auto animate-scale-in&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;              &lt;AppointmentDetail&#10;                appointment={selectedAppointment}&#10;                patient={selectedPatient}&#10;                onEdit={(appointmentData) =&gt; handleUpdateAppointment(selectedAppointment.id, appointmentData)}&#10;                onCancel={() =&gt; handleCancelAppointment(selectedAppointment.id)}&#10;                onUpdateStatus={(status) =&gt; handleUpdateAppointmentStatus(selectedAppointment.id, status)}&#10;                onDelete={() =&gt; handleDeleteAppointment(selectedAppointment.id)}&#10;                onClose={() =&gt; setSelectedAppointment(null)}&#10;                isLoading={appointmentLoading}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* New Appointment Form Modal */}&#10;        {showNewAppointmentForm &amp;&amp; (&#10;          &lt;div className=&quot;fixed inset-0 bg-neutral-900/50 flex items-center justify-center z-50 fade-in-element&quot;&gt;&#10;            &lt;div className=&quot;bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden animate-scale-in relative&quot;&gt;&#10;              {/* Header */}&#10;              &lt;div className=&quot;flex items-center justify-between p-6 border-b border-gray-200&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold text-gray-900&quot;&gt;&#10;                  {bookingStep === 'patient' ? 'Select Patient' : 'Book Appointment'}&#10;                &lt;/h2&gt;&#10;                &lt;button&#10;                  onClick={closeNewAppointmentModal}&#10;                  className=&quot;text-gray-400 hover:text-gray-600 transition-colors&quot;&#10;                &gt;&#10;                  &lt;span className=&quot;material-icons-round&quot;&gt;close&lt;/span&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Step indicator */}&#10;              &lt;div className=&quot;px-6 py-4 bg-gray-50 border-b border-gray-200&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;div className={`flex items-center space-x-2 ${bookingStep === 'patient' ? 'text-blue-600' : 'text-gray-400'}`}&gt;&#10;                    &lt;div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${&#10;                      bookingStep === 'patient' ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-400'&#10;                    }`}&gt;&#10;                      1&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;Select Patient&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1 h-px bg-gray-200&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className={`flex items-center space-x-2 ${bookingStep === 'appointment' ? 'text-blue-600' : 'text-gray-400'}`}&gt;&#10;                    &lt;div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${&#10;                      bookingStep === 'appointment' ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-400'&#10;                    }`}&gt;&#10;                      2&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;Book Appointment&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Content - Fixed height container for consistency */}&#10;              &lt;div className=&quot;h-[600px] overflow-y-auto&quot;&gt;&#10;                &lt;div className=&quot;p-6&quot;&gt;&#10;                  {bookingStep === 'patient' &amp;&amp; (&#10;                    &lt;div className=&quot;min-h-full&quot;&gt;&#10;                      {showCreatePatientForm ? (&#10;                        &lt;div&gt;&#10;                          &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                            &lt;h3 className=&quot;text-lg font-medium text-gray-900&quot;&gt;Create New Patient&lt;/h3&gt;&#10;                            &lt;button&#10;                              onClick={() =&gt; setShowCreatePatientForm(false)}&#10;                              className=&quot;text-gray-400 hover:text-gray-600&quot;&#10;                            &gt;&#10;                              &lt;span className=&quot;material-icons-round&quot;&gt;arrow_back&lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;PatientForm&#10;                            onSubmit={handleCreatePatient}&#10;                            onCancel={() =&gt; setShowCreatePatientForm(false)}&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;h-full flex flex-col&quot;&gt;&#10;                          {/* Search patients */}&#10;                          &lt;div className=&quot;mb-6&quot;&gt;&#10;                            &lt;div className=&quot;relative&quot;&gt;&#10;                              &lt;input&#10;                                type=&quot;text&quot;&#10;                                placeholder=&quot;Search patients by name, email, or phone...&quot;&#10;                                value={searchQuery}&#10;                                onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;                                className=&quot;w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                              /&gt;&#10;                              &lt;span className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 material-icons-round text-gray-400&quot;&gt;&#10;                                search&#10;                              &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Create new patient button */}&#10;                          &lt;div className=&quot;mb-6&quot;&gt;&#10;                            &lt;button&#10;                              onClick={() =&gt; setShowCreatePatientForm(true)}&#10;                              className=&quot;w-full p-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-blue-400 hover:text-blue-600 transition-colors&quot;&#10;                            &gt;&#10;                              &lt;span className=&quot;material-icons-round mb-2&quot;&gt;add&lt;/span&gt;&#10;                              &lt;div className=&quot;text-sm font-medium&quot;&gt;Create New Patient&lt;/div&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Patient list - flexible height */}&#10;                          &lt;div className=&quot;flex-1 min-h-0&quot;&gt;&#10;                            &lt;div className=&quot;space-y-3 h-full overflow-y-auto&quot;&gt;&#10;                              {patients.map((patient) =&gt; (&#10;                                &lt;div&#10;                                  key={patient.id}&#10;                                  onClick={() =&gt; handlePatientSelect(patient)}&#10;                                  className=&quot;p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 cursor-pointer transition-colors&quot;&#10;                                &gt;&#10;                                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                                    &lt;div&gt;&#10;                                      &lt;h4 className=&quot;font-medium text-gray-900&quot;&gt;&#10;                                        {patient.first_name} {patient.last_name}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;p className=&quot;text-sm text-gray-600&quot;&gt;{patient.email}&lt;/p&gt;&#10;                                      {patient.phone &amp;&amp; (&#10;                                        &lt;p className=&quot;text-sm text-gray-600&quot;&gt;{patient.phone}&lt;/p&gt;&#10;                                      )}&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;material-icons-round text-gray-400&quot;&gt;chevron_right&lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              ))}&#10;                              {patients.length === 0 &amp;&amp; searchQuery &amp;&amp; (&#10;                                &lt;div className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                                  No patients found matching &quot;{searchQuery}&quot;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {patients.length === 0 &amp;&amp; !searchQuery &amp;&amp; (&#10;                                &lt;div className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                                  No patients available. Create a new patient to get started.&#10;                                &lt;/div&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {bookingStep === 'appointment' &amp;&amp; selectedPatientForBooking &amp;&amp; (&#10;                    &lt;div className=&quot;min-h-full&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h3 className=&quot;text-lg font-medium text-gray-900&quot;&gt;Book Appointment&lt;/h3&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                            for {selectedPatientForBooking.first_name} {selectedPatientForBooking.last_name}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setBookingStep('patient')}&#10;                          className=&quot;text-gray-400 hover:text-gray-600&quot;&#10;                        &gt;&#10;                          &lt;span className=&quot;material-icons-round&quot;&gt;arrow_back&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;AppointmentBookingForm&#10;                        patient={selectedPatientForBooking}&#10;                        onSubmit={handleAppointmentBookingComplete}&#10;                        onCancel={closeNewAppointmentModal}&#10;                        isLoading={appointmentLoading}&#10;                        preselectedDate={selectedTimeSlot?.date}&#10;                        preselectedTime={selectedTimeSlot?.time}&#10;                        preselectedEndTime={selectedTimeSlot?.endTime}&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Reschedule Confirmation Modal */}&#10;        {showRescheduleConfirmation &amp;&amp; rescheduleData &amp;&amp; (&#10;          &lt;RescheduleConfirmation&#10;            appointment={rescheduleData.appointment}&#10;            patient={rescheduleData.patient}&#10;            newDate={rescheduleData.newDate}&#10;            newStartTime={rescheduleData.newStartTime}&#10;            newEndTime={rescheduleData.newEndTime}&#10;            onConfirm={handleRescheduleConfirm}&#10;            onCancel={handleRescheduleCancel}&#10;            isLoading={appointmentLoading}&#10;          /&gt;&#10;        )}&#10;&#10;        {/* Cancel Appointment Confirmation Dialog */}&#10;        &lt;ConfirmDialog&#10;          isOpen={showCancelConfirm}&#10;          title=&quot;Cancel Appointment&quot;&#10;          message=&quot;Are you sure you want to cancel this appointment? This will change the appointment status to cancelled.&quot;&#10;          confirmText=&quot;Cancel Appointment&quot;&#10;          cancelText=&quot;Keep Appointment&quot;&#10;          type=&quot;warning&quot;&#10;          isLoading={appointmentLoading}&#10;          onConfirm={async () =&gt; {&#10;            await performCancelAppointment(appointmentToCancel!);&#10;            setShowCancelConfirm(false);&#10;            setAppointmentToCancel(null);&#10;          }}&#10;          onCancel={() =&gt; {&#10;            setShowCancelConfirm(false);&#10;            setAppointmentToCancel(null);&#10;          }}&#10;        /&gt;&#10;&#10;        {/* Delete Appointment Confirmation Dialog */}&#10;        &lt;ConfirmDialog&#10;          isOpen={showDeleteConfirm}&#10;          title=&quot;Delete Appointment&quot;&#10;          message=&quot;Are you sure you want to delete this appointment? This action cannot be undone and will permanently remove the appointment from the system.&quot;&#10;          confirmText=&quot;Delete Appointment&quot;&#10;          cancelText=&quot;Keep Appointment&quot;&#10;          type=&quot;danger&quot;&#10;          isLoading={appointmentLoading}&#10;          onConfirm={async () =&gt; {&#10;            await performDeleteAppointment(appointmentToDelete!);&#10;            setShowDeleteConfirm(false);&#10;            setAppointmentToDelete(null);&#10;          }}&#10;          onCancel={() =&gt; {&#10;            setShowDeleteConfirm(false);&#10;            setAppointmentToDelete(null);&#10;          }}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/DashboardLayout&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useCallback } from 'react';&#10;import { useTranslation } from '../context/TranslationContext';&#10;import { DashboardLayout } from '../components/layout/DashboardLayout';&#10;import { MonthView } from '../components/calendar/MonthView';&#10;import { WeeklyView } from '../components/calendar/WeeklyView';&#10;import { DayView } from '../components/calendar/DayView';&#10;import { AppointmentDetail } from '../components/patients/AppointmentDetail';&#10;import { AppointmentBookingForm } from '../components/patients/AppointmentBookingForm';&#10;import { PatientForm } from '../components/patients/PatientForm';&#10;import { ConfirmDialog } from '../components/common/ConfirmDialog';&#10;import { AppointmentService } from '../services/appointmentService';&#10;import { PatientService } from '../services/patientService';&#10;import { SettingsService, settingsEventDispatcher } from '../services/settingsService';&#10;import { Appointment, AppointmentUpdate, AppointmentStatus, AppointmentCreate } from '../types/Appointment';&#10;import { Patient, PatientCreate, PatientUpdate } from '../types/Patient';&#10;import { useNotification } from '../context/NotificationContext';&#10;import '../styles/calendar-day.css'; // Import the calendar day CSS&#10;import { RescheduleConfirmation } from '../components/calendar/RescheduleConfirmation';&#10;&#10;type CalendarView = 'month' | 'week' | 'day';&#10;&#10;export const Calendar: React.FC = () =&gt; {&#10;  const { t } = useTranslation();&#10;  const [currentDate, setCurrentDate] = useState(new Date());&#10;  const [view, setView] = useState&lt;CalendarView&gt;('week');&#10;  const [appointments, setAppointments] = useState&lt;Appointment[]&gt;([]);&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [selectedAppointment, setSelectedAppointment] = useState&lt;Appointment | null&gt;(null);&#10;  const [selectedPatient, setSelectedPatient] = useState&lt;Patient | null&gt;(null);&#10;  const [appointmentLoading, setAppointmentLoading] = useState(false);&#10;  const [showNewAppointmentForm, setShowNewAppointmentForm] = useState(false);&#10;  const [selectedPatientForBooking, setSelectedPatientForBooking] = useState&lt;Patient | null&gt;(null);&#10;  const [patients, setPatients] = useState&lt;Patient[]&gt;([]);&#10;  const [bookingStep, setBookingStep] = useState&lt;'patient' | 'appointment'&gt;('patient');&#10;  const [selectedTimeSlot, setSelectedTimeSlot] = useState&lt;{date: string, time: string, endTime?: string} | null&gt;(null);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [isSearchingPatients, setIsSearchingPatients] = useState(false);&#10;  const [showCreatePatientForm, setShowCreatePatientForm] = useState(false);&#10;&#10;  // Working hours from settings&#10;  const [workingHours, setWorkingHours] = useState({&#10;    startTime: '08:00',&#10;    endTime: '17:00'&#10;  });&#10;&#10;  // Working days from settings&#10;  const [workingDays, setWorkingDays] = useState&lt;string[]&gt;([&#10;    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'&#10;  ]);&#10;&#10;  // Reschedule confirmation state&#10;  const [showRescheduleConfirmation, setShowRescheduleConfirmation] = useState(false);&#10;  const [rescheduleData, setRescheduleData] = useState&lt;{&#10;    appointment: Appointment;&#10;    patient: Patient;&#10;    newDate: string;&#10;    newStartTime: string;&#10;    newEndTime: string;&#10;  } | null&gt;(null);&#10;&#10;  // Drag and drop state&#10;  const [isDragging, setIsDragging] = useState(false);&#10;  const [dragStart, setDragStart] = useState&lt;{date: string, time: string} | null&gt;(null);&#10;  const [dragEnd, setDragEnd] = useState&lt;{date: string, time: string} | null&gt;(null);&#10;&#10;  // Confirmation dialog state&#10;  const [showCancelConfirm, setShowCancelConfirm] = useState(false);&#10;  const [appointmentToCancel, setAppointmentToCancel] = useState&lt;string | null&gt;(null);&#10;  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);&#10;  const [appointmentToDelete, setAppointmentToDelete] = useState&lt;string | null&gt;(null);&#10;&#10;  const { showNotification } = useNotification();&#10;&#10;  // Load appointments from API&#10;  const loadAppointments = async () =&gt; {&#10;    setLoading(true);&#10;    setError(null);&#10;    try {&#10;      // Calculate date range based on current view&#10;      const startDate = getViewStartDate();&#10;      const days = getViewDays();&#10;&#10;      const appointmentData = await AppointmentService.listAppointmentsByRange(&#10;        startDate.toISOString().split('T')[0],&#10;        days&#10;      );&#10;      setAppointments(appointmentData);&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to load appointments');&#10;      console.error('Error loading appointments:', err);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  // Load patients for appointment booking&#10;  const loadPatients = async () =&gt; {&#10;    try {&#10;      const response = await PatientService.listPatients();&#10;      setPatients(response.data);&#10;    } catch (err) {&#10;      console.error('Error loading patients:', err);&#10;    }&#10;  };&#10;&#10;  // Load settings for working hours&#10;  const loadSettings = async () =&gt; {&#10;    try {&#10;      const settings = await SettingsService.getSettings();&#10;      setWorkingHours({&#10;        startTime: settings.appointments_start_time || '08:00',&#10;        endTime: settings.appointments_end_time || '17:00'&#10;      });&#10;      setWorkingDays(settings.appointments_working_days || ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']);&#10;    } catch (err) {&#10;      console.error('Error loading settings:', err);&#10;    }&#10;  };&#10;&#10;  // Load data on component mount and when date/view changes&#10;  useEffect(() =&gt; {&#10;    loadAppointments();&#10;    loadPatients();&#10;    loadSettings();&#10;  }, [currentDate, view]);&#10;&#10;  // Listen for settings updates&#10;  useEffect(() =&gt; {&#10;    const handleSettingsUpdate = (event: any) =&gt; {&#10;      const updatedSettings = event.detail;&#10;      if (updatedSettings?.appointments_start_time || updatedSettings?.appointments_end_time) {&#10;        setWorkingHours({&#10;          startTime: updatedSettings.appointments_start_time || workingHours.startTime,&#10;          endTime: updatedSettings.appointments_end_time || workingHours.endTime&#10;        });&#10;      }&#10;      if (updatedSettings?.appointments_working_days) {&#10;        setWorkingDays(updatedSettings.appointments_working_days);&#10;      }&#10;    };&#10;&#10;    settingsEventDispatcher.addEventListener('settingsUpdated', handleSettingsUpdate);&#10;&#10;    return () =&gt; {&#10;      settingsEventDispatcher.removeEventListener('settingsUpdated', handleSettingsUpdate);&#10;    };&#10;  }, [workingHours, workingDays]);&#10;&#10;  // Handle appointment creation&#10;  const handleCreateAppointment = async (appointmentData: AppointmentCreate) =&gt; {&#10;    setAppointmentLoading(true);&#10;    try {&#10;      const newAppointment = await AppointmentService.createAppointment(appointmentData);&#10;      setAppointments(prev =&gt; [...prev, newAppointment]);&#10;      setShowNewAppointmentForm(false);&#10;      setSelectedTimeSlot(null);&#10;      showNotification('success', 'Success', 'Appointment created successfully');&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to create appointment');&#10;      console.error('Error creating appointment:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle appointment update&#10;  const handleUpdateAppointment = async (appointmentId: string, appointmentData: AppointmentUpdate) =&gt; {&#10;    setAppointmentLoading(true);&#10;    try {&#10;      const updatedAppointment = await AppointmentService.updateAppointment(appointmentId, appointmentData);&#10;      setAppointments(prev =&gt; prev.map(apt =&gt; apt.id === appointmentId ? updatedAppointment : apt));&#10;      setSelectedAppointment(updatedAppointment);&#10;      showNotification('success', 'Success', 'Appointment updated successfully');&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to update appointment');&#10;      console.error('Error updating appointment:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle appointment status update&#10;  const handleUpdateAppointmentStatus = async (appointmentId: string, status: AppointmentStatus) =&gt; {&#10;    setAppointmentLoading(true);&#10;    try {&#10;      const updatedAppointment = await AppointmentService.updateAppointment(appointmentId, { status });&#10;      setAppointments(prev =&gt; prev.map(apt =&gt; apt.id === appointmentId ? updatedAppointment : apt));&#10;      setSelectedAppointment(updatedAppointment);&#10;      showNotification('success', 'Success', `Appointment ${status.toLowerCase()}`);&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to update appointment status');&#10;      console.error('Error updating appointment status:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle appointment deletion&#10;  const handleDeleteAppointment = async (appointmentId: string) =&gt; {&#10;    setAppointmentToDelete(appointmentId);&#10;    setShowDeleteConfirm(true);&#10;  };&#10;&#10;  // Actual deletion logic (called from confirmation dialog)&#10;  const performDeleteAppointment = async (appointmentId: string) =&gt; {&#10;    setAppointmentLoading(true);&#10;    try {&#10;      await AppointmentService.deleteAppointment(appointmentId);&#10;      setAppointments(prev =&gt; prev.filter(apt =&gt; apt.id !== appointmentId));&#10;      setSelectedAppointment(null);&#10;      showNotification('success', 'Success', 'Appointment deleted successfully');&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to delete appointment');&#10;      console.error('Error deleting appointment:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle appointment cancellation&#10;  const handleCancelAppointment = async (appointmentId: string) =&gt; {&#10;    setAppointmentToCancel(appointmentId);&#10;    setShowCancelConfirm(true);&#10;  };&#10;&#10;  // Actual cancellation logic (called from confirmation dialog)&#10;  const performCancelAppointment = async (appointmentId: string) =&gt; {&#10;    setAppointmentLoading(true);&#10;    try {&#10;      const updatedAppointment = await AppointmentService.updateAppointment(appointmentId, { status: 'Cancelled' });&#10;      setAppointments(prev =&gt; prev.map(apt =&gt; apt.id === appointmentId ? updatedAppointment : apt));&#10;      setSelectedAppointment(updatedAppointment);&#10;      showNotification('success', 'Success', 'Appointment cancelled');&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to cancel appointment');&#10;      console.error('Error cancelling appointment:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle new appointment flow&#10;  const handleNewAppointmentClick = () =&gt; {&#10;    setShowNewAppointmentForm(true);&#10;    setBookingStep('patient');&#10;    setSelectedPatientForBooking(null);&#10;    setSearchQuery('');&#10;    setShowCreatePatientForm(false);&#10;  };&#10;&#10;  // Handle patient selection for booking&#10;  const handlePatientSelect = (patient: Patient) =&gt; {&#10;    // Set the selected patient and transition to appointment booking step&#10;    setSelectedPatientForBooking(patient);&#10;    setBookingStep('appointment');&#10;  };&#10;&#10;  // Reset booking flow when closing the modal&#10;  const closeNewAppointmentModal = () =&gt; {&#10;    setShowNewAppointmentForm(false);&#10;&#10;    // Reset the booking flow after the animation completes&#10;    setTimeout(() =&gt; {&#10;      setBookingStep('patient');&#10;      setSelectedPatientForBooking(null);&#10;      setSelectedTimeSlot(null);&#10;      setShowCreatePatientForm(false);&#10;      setSearchQuery('');&#10;    }, 300);&#10;  };&#10;&#10;  // Handle patient creation&#10;  const handleCreatePatient = async (patientData: PatientCreate | PatientUpdate): Promise&lt;void&gt; =&gt; {&#10;    try {&#10;      // Create clean data object with only non-empty fields&#10;      const createData: any = {&#10;        first_name: patientData.first_name || '',&#10;        last_name: patientData.last_name || '',&#10;        phone: patientData.phone || '',&#10;        gender: patientData.gender || 'male',&#10;      };&#10;&#10;      // Only add optional fields if they have values&#10;      if (patientData.email &amp;&amp; patientData.email.trim()) {&#10;        createData.email = patientData.email.trim();&#10;      }&#10;      if (patientData.date_of_birth &amp;&amp; patientData.date_of_birth.trim()) {&#10;        createData.date_of_birth = patientData.date_of_birth.trim();&#10;      }&#10;      if (patientData.street &amp;&amp; patientData.street.trim()) {&#10;        createData.street = patientData.street.trim();&#10;      }&#10;      if (patientData.city &amp;&amp; patientData.city.trim()) {&#10;        createData.city = patientData.city.trim();&#10;      }&#10;      if (patientData.state &amp;&amp; patientData.state.trim()) {&#10;        createData.state = patientData.state.trim();&#10;      }&#10;      if (patientData.zip_code &amp;&amp; patientData.zip_code.trim()) {&#10;        createData.zip_code = patientData.zip_code.trim();&#10;      }&#10;&#10;      const newPatient = await PatientService.createPatient(createData);&#10;      setPatients(prev =&gt; [...prev, newPatient]);&#10;      setSelectedPatientForBooking(newPatient);&#10;      setShowCreatePatientForm(false);&#10;      setBookingStep('appointment');&#10;      showNotification('success', 'Success', 'Patient created successfully');&#10;    } catch (err) {&#10;      console.error('Error creating patient:', err);&#10;      showNotification('error', 'Error', 'Failed to create patient');&#10;      // Re-throw the error so PatientForm can handle it appropriately&#10;      throw err;&#10;    }&#10;  };&#10;&#10;  // Handle appointment booking completion&#10;  const handleAppointmentBookingComplete = async (appointmentData: AppointmentCreate) =&gt; {&#10;    await handleCreateAppointment(appointmentData);&#10;    // Reset booking state&#10;    setBookingStep('patient');&#10;    setSelectedPatientForBooking(null);&#10;    setSearchQuery('');&#10;    setShowCreatePatientForm(false);&#10;  };&#10;&#10;  // Search patients using API&#10;  const searchPatients = useCallback(async (query: string) =&gt; {&#10;    if (!query.trim()) {&#10;      loadPatients();&#10;      return;&#10;    }&#10;&#10;    setIsSearchingPatients(true);&#10;    try {&#10;      const response = await PatientService.searchPatients(query.trim(), 0, 100);&#10;      setPatients(response.data);&#10;    } catch (err) {&#10;      console.error('Error searching patients:', err);&#10;      showNotification('error', 'Error', 'Failed to search patients');&#10;    } finally {&#10;      setIsSearchingPatients(false);&#10;    }&#10;  }, []);&#10;&#10;  // Debounced search effect for patients&#10;  useEffect(() =&gt; {&#10;    const timeoutId = setTimeout(() =&gt; {&#10;      if (searchQuery.trim()) {&#10;        searchPatients(searchQuery);&#10;      } else {&#10;        loadPatients();&#10;      }&#10;    }, 300); // 300ms debounce&#10;&#10;    return () =&gt; clearTimeout(timeoutId);&#10;  }, [searchQuery, searchPatients]);&#10;&#10;  // Helper functions for date calculations&#10;  const getViewStartDate = () =&gt; {&#10;    const date = new Date(currentDate);&#10;    if (view === 'week') {&#10;      date.setDate(date.getDate() - date.getDay()); // Start of week&#10;    } else if (view === 'month') {&#10;      date.setDate(1); // Start of month&#10;    }&#10;    return date;&#10;  };&#10;&#10;  const getViewDays = () =&gt; {&#10;    switch (view) {&#10;      case 'day': return 1;&#10;      case 'week': return 7;&#10;      case 'month': return 31; // Approximate&#10;      default: return 7;&#10;    }&#10;  };&#10;&#10;  const getStatusColor = (status: AppointmentStatus) =&gt; {&#10;    switch (status) {&#10;      case 'Completed': return 'bg-green-100 text-green-800';&#10;      case 'Booked': return 'bg-blue-100 text-blue-800';&#10;      case 'Cancelled': return 'bg-red-100 text-red-800';&#10;      case 'No Show': return 'bg-orange-100 text-orange-800';&#10;      default: return 'bg-gray-100 text-gray-800';&#10;    }&#10;  };&#10;&#10;  // Get background color for appointment status&#10;  const getAppointmentBackgroundColor = (status: AppointmentStatus) =&gt; {&#10;    switch (status) {&#10;      case 'Completed': return '#dcfce7'; // Light green&#10;      case 'Booked': return '#dbeafe';    // Light blue&#10;      case 'Cancelled': return '#fee2e2';  // Light red&#10;      case 'No Show': return '#ffedd5';    // Light orange&#10;      default: return '#f3f4f6';          // Light gray&#10;    }&#10;  };&#10;&#10;  // Get text color for appointment status&#10;  const getAppointmentTextColor = (status: AppointmentStatus) =&gt; {&#10;    switch (status) {&#10;      case 'Completed': return '#166534'; // Dark green&#10;      case 'Booked': return '#1e40af';    // Dark blue&#10;      case 'Cancelled': return '#b91c1c';  // Dark red&#10;      case 'No Show': return '#c2410c';    // Dark orange&#10;      default: return '#4b5563';          // Dark gray&#10;    }&#10;  };&#10;&#10;  const formatDate = (date: Date) =&gt; {&#10;    return date.toLocaleDateString('en-US', {&#10;      weekday: 'long',&#10;      year: 'numeric',&#10;      month: 'long',&#10;      day: 'numeric'&#10;    });&#10;  };&#10;&#10;  const navigateDate = (direction: 'prev' | 'next') =&gt; {&#10;    const newDate = new Date(currentDate);&#10;    if (view === 'day') {&#10;      newDate.setDate(newDate.getDate() + (direction === 'next' ? 1 : -1));&#10;    } else if (view === 'week') {&#10;      newDate.setDate(newDate.getDate() + (direction === 'next' ? 7 : -7));&#10;    } else {&#10;      newDate.setMonth(newDate.getMonth() + (direction === 'next' ? 1 : -1));&#10;    }&#10;    setCurrentDate(newDate);&#10;  };&#10;&#10;  // Format appointment time from API response&#10;  const formatAppointmentTime = (appointment: Appointment) =&gt; {&#10;    if (appointment.start_time) {&#10;      // Convert time format (e.g., &quot;09:00:00.000000&quot;) to &quot;09:00&quot;&#10;      return appointment.start_time.split(':').slice(0, 2).join(':');&#10;    }&#10;    return '00:00';&#10;  };&#10;&#10;  // Get appointment date from API response&#10;  const getAppointmentDate = (appointment: Appointment) =&gt; {&#10;    if (appointment.date) {&#10;      return appointment.date.split('T')[0]; // Extract date part from ISO string&#10;    }&#10;    return new Date().toISOString().split('T')[0];&#10;  };&#10;&#10;  // Get patient name from appointment&#10;  const getPatientName = (appointment: Appointment) =&gt; {&#10;    return `${appointment.patient_first_name} ${appointment.patient_last_name}`;&#10;  };&#10;&#10;  // Calculate appointment duration in minutes&#10;  const getAppointmentDuration = (appointment: Appointment) =&gt; {&#10;    if (appointment.start_time &amp;&amp; appointment.end_time) {&#10;      const start = new Date(`2000-01-01T${appointment.start_time}`);&#10;      const end = new Date(`2000-01-01T${appointment.end_time}`);&#10;      return Math.round((end.getTime() - start.getTime()) / (1000 * 60)); // Duration in minutes&#10;    }&#10;    return 30; // Default duration&#10;  };&#10;&#10;  // Load patient data for the selected appointment&#10;  const loadPatientForAppointment = useCallback(async (appointment: Appointment) =&gt; {&#10;    if (!appointment || !appointment.patient_id) return;&#10;&#10;    try {&#10;      setAppointmentLoading(true);&#10;      const patientData = await PatientService.getPatient(appointment.patient_id);&#10;      setSelectedPatient(patientData);&#10;    } catch (err) {&#10;      console.error('Error loading patient data:', err);&#10;      setError(err instanceof Error ? err.message : 'Failed to load patient data');&#10;      showNotification('error', 'Error', 'Failed to load patient data');&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  }, [showNotification]);&#10;&#10;  // Handle appointment selection&#10;  useEffect(() =&gt; {&#10;    if (selectedAppointment) {&#10;      loadPatientForAppointment(selectedAppointment);&#10;    } else {&#10;      setSelectedPatient(null);&#10;    }&#10;  }, [selectedAppointment, loadPatientForAppointment]);&#10;&#10;  // Format appointments data for MonthView component&#10;  const groupAppointmentsByDate = () =&gt; {&#10;    const grouped: Record&lt;string, any[]&gt; = {};&#10;&#10;    appointments.forEach(appointment =&gt; {&#10;      const dateStr = getAppointmentDate(appointment);&#10;&#10;      if (!grouped[dateStr]) {&#10;        grouped[dateStr] = [];&#10;      }&#10;&#10;      grouped[dateStr].push({&#10;        id: appointment.id,&#10;        patientName: getPatientName(appointment),&#10;        time: formatAppointmentTime(appointment),&#10;        duration: getAppointmentDuration(appointment),&#10;        type: appointment.type,&#10;        status: appointment.status,&#10;        title: appointment.type || 'Appointment'&#10;      });&#10;    });&#10;&#10;    return grouped;&#10;  };&#10;&#10;  const renderCalendarHeader = () =&gt; (&#10;    &lt;div className=&quot;card mb-8&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-primary-600 mb-2&quot;&gt;Calendar&lt;/h1&gt;&#10;          &lt;p className=&quot;text-neutral-600&quot;&gt;{formatDate(currentDate)}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* View Toggle */}&#10;        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;          &lt;div className=&quot;bg-neutral-100 rounded-xl p-1 flex border border-neutral-200&quot;&gt;&#10;            {(['month', 'week', 'day'] as CalendarView[]).map((viewType) =&gt; (&#10;              &lt;button&#10;                key={viewType}&#10;                onClick={() =&gt; setView(viewType)}&#10;                className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 ${&#10;                  view === viewType&#10;                    ? 'bg-primary-500 text-white shadow-primary'&#10;                    : 'text-neutral-600 hover:text-primary-600 hover:bg-white'&#10;                }`}&#10;              &gt;&#10;                {viewType.charAt(0).toUpperCase() + viewType.slice(1)}&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Navigation and Actions */}&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;button&#10;            onClick={() =&gt; navigateDate('prev')}&#10;            className=&quot;btn-secondary p-3&quot;&#10;          &gt;&#10;            &lt;span className=&quot;material-icons-round&quot;&gt;chevron_left&lt;/span&gt;&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            onClick={() =&gt; setCurrentDate(new Date())}&#10;            className=&quot;btn-secondary&quot;&#10;          &gt;&#10;            Today&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            onClick={() =&gt; navigateDate('next')}&#10;            className=&quot;btn-secondary p-3&quot;&#10;          &gt;&#10;            &lt;span className=&quot;material-icons-round&quot;&gt;chevron_right&lt;/span&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;button&#10;            onClick={handleNewAppointmentClick}&#10;            className=&quot;btn-primary&quot;&#10;          &gt;&#10;            &lt;span className=&quot;material-icons-round mr-2&quot;&gt;add&lt;/span&gt;&#10;            New Appointment&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;&#10;  // Generate time slots based on working hours for drag and drop logic&#10;  const generateTimeSlots = () =&gt; {&#10;    const startHour = parseInt(workingHours.startTime.split(':')[0]);&#10;    const endHour = parseInt(workingHours.endTime.split(':')[0]);&#10;    const totalHours = endHour - startHour;&#10;    const slotsPerHour = 4; // 15-minute intervals&#10;    const totalSlots = totalHours * slotsPerHour;&#10;&#10;    return Array.from({ length: totalSlots }, (_, i) =&gt; {&#10;      const hour = Math.floor(i / slotsPerHour) + startHour;&#10;      const minutes = (i % slotsPerHour) * 15;&#10;      return `${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;&#10;    });&#10;  };&#10;&#10;  // Drag and drop handlers&#10;  const handleMouseDown = (e: React.MouseEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    setIsDragging(true);&#10;    setDragStart({ date, time });&#10;    setDragEnd({ date, time });&#10;    console.log('Starting drag at:', date, time);&#10;  };&#10;&#10;  const handleMouseEnter = (date: string, time: string) =&gt; {&#10;    if (isDragging &amp;&amp; dragStart &amp;&amp; dragStart.date === date) {&#10;      setDragEnd({ date, time });&#10;    }&#10;  };&#10;&#10;  const handleMouseUp = () =&gt; {&#10;    if (isDragging &amp;&amp; dragStart &amp;&amp; dragEnd) {&#10;      const timeSlots = generateTimeSlots();&#10;&#10;      const startIndex = timeSlots.indexOf(dragStart.time);&#10;      const endIndex = timeSlots.indexOf(dragEnd.time);&#10;&#10;      if (startIndex !== -1 &amp;&amp; endIndex !== -1) {&#10;        const minIndex = Math.min(startIndex, endIndex);&#10;        const maxIndex = Math.max(startIndex, endIndex);&#10;        const startTime = timeSlots[minIndex];&#10;        const endTime = timeSlots[maxIndex + 1] || timeSlots[maxIndex]; // End time is next slot or same if last&#10;&#10;        console.log('Drag completed:', {&#10;          date: dragStart.date,&#10;          startTime,&#10;          endTime&#10;        });&#10;&#10;        setSelectedTimeSlot({&#10;          date: dragStart.date,&#10;          time: startTime,&#10;          endTime&#10;        });&#10;&#10;        handleNewAppointmentClick();&#10;      }&#10;    }&#10;&#10;    setIsDragging(false);&#10;    setDragStart(null);&#10;    setDragEnd(null);&#10;  };&#10;&#10;  // Check if a slot is selected in the drag&#10;  const isSlotSelected = (date: string, time: string) =&gt; {&#10;    if (!isDragging || !dragStart || !dragEnd || dragStart.date !== date) {&#10;      return false;&#10;    }&#10;&#10;    const timeSlots = generateTimeSlots();&#10;&#10;    const currentIndex = timeSlots.indexOf(time);&#10;    const startIndex = timeSlots.indexOf(dragStart.time);&#10;    const endIndex = timeSlots.indexOf(dragEnd.time);&#10;&#10;    if (currentIndex === -1 || startIndex === -1 || endIndex === -1) {&#10;      return false;&#10;    }&#10;&#10;    const minIndex = Math.min(startIndex, endIndex);&#10;    const maxIndex = Math.max(startIndex, endIndex);&#10;&#10;    return currentIndex &gt;= minIndex &amp;&amp; currentIndex &lt;= maxIndex;&#10;  };&#10;&#10;  // Handle appointment rescheduling via drag and drop&#10;  const handleAppointmentDrop = async (appointment: Appointment, newDate: string, newTime: string) =&gt; {&#10;    // Calculate new end time based on appointment duration&#10;    const duration = getAppointmentDuration(appointment);&#10;    const [hours, minutes] = newTime.split(':').map(Number);&#10;    const newStartTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:00`;&#10;    &#10;    // Calculate end time&#10;    const totalMinutes = hours * 60 + minutes + duration;&#10;    const endHours = Math.floor(totalMinutes / 60);&#10;    const endMinutes = totalMinutes % 60;&#10;    const newEndTime = `${endHours.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}:00`;&#10;&#10;    // Load patient data and show reschedule confirmation&#10;    try {&#10;      setAppointmentLoading(true);&#10;      const patientData = await PatientService.getPatient(appointment.patient_id);&#10;      &#10;      setRescheduleData({&#10;        appointment,&#10;        patient: patientData,&#10;        newDate,&#10;        newStartTime,&#10;        newEndTime&#10;      });&#10;      setShowRescheduleConfirmation(true);&#10;    } catch (err) {&#10;      console.error('Error loading patient data:', err);&#10;      showNotification('error', 'Error', 'Failed to load patient data');&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle reschedule confirmation&#10;  const handleRescheduleConfirm = async (appointmentData: AppointmentUpdate) =&gt; {&#10;    if (!rescheduleData) return;&#10;&#10;    try {&#10;      setAppointmentLoading(true);&#10;      const updatedAppointment = await AppointmentService.updateAppointment(rescheduleData.appointment.id, appointmentData);&#10;      setAppointments(prev =&gt; prev.map(apt =&gt; apt.id === rescheduleData.appointment.id ? updatedAppointment : apt));&#10;      showNotification('success', 'Success', 'Appointment rescheduled successfully');&#10;      setShowRescheduleConfirmation(false);&#10;      setRescheduleData(null);&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : 'Failed to reschedule appointment');&#10;      showNotification('error', 'Error', 'Failed to reschedule appointment');&#10;      console.error('Error rescheduling appointment:', err);&#10;    } finally {&#10;      setAppointmentLoading(false);&#10;    }&#10;  };&#10;&#10;  // Handle reschedule cancel&#10;  const handleRescheduleCancel = () =&gt; {&#10;    setShowRescheduleConfirmation(false);&#10;    setRescheduleData(null);&#10;  };&#10;&#10;  // Handle day click to switch to daily view&#10;  const handleDayClick = (selectedDate: Date) =&gt; {&#10;    setCurrentDate(selectedDate);&#10;    setView('day');&#10;  };&#10;&#10;  return (&#10;    &lt;DashboardLayout&gt;&#10;      &lt;div className=&quot;fade-in-element&quot;&gt;&#10;        {renderCalendarHeader()}&#10;&#10;        {view === 'week' &amp;&amp; (&#10;          &lt;WeeklyView&#10;            currentDate={currentDate}&#10;            appointments={appointments}&#10;            handleMouseUp={handleMouseUp}&#10;            handleMouseDown={handleMouseDown}&#10;            handleMouseEnter={handleMouseEnter}&#10;            onSelectSlot={(date, time) =&gt; { setSelectedTimeSlot({ date, time }); handleNewAppointmentClick(); }}&#10;            onAppointmentClick={setSelectedAppointment}&#10;            onAppointmentDrop={handleAppointmentDrop}&#10;            isSlotSelected={isSlotSelected}&#10;            getAppointmentDate={getAppointmentDate}&#10;            formatAppointmentTime={formatAppointmentTime}&#10;            getAppointmentDuration={getAppointmentDuration}&#10;            getAppointmentBackgroundColor={getAppointmentBackgroundColor}&#10;            getAppointmentTextColor={getAppointmentTextColor}&#10;            onDayClick={handleDayClick}&#10;            workingHours={workingHours}&#10;            workingDays={workingDays}&#10;          /&gt;&#10;        )}&#10;        {view === 'day' &amp;&amp; (&#10;          &lt;DayView&#10;            currentDate={currentDate}&#10;            appointments={appointments}&#10;            onTimeSlotClick={(date, time) =&gt; { setSelectedTimeSlot({ date, time }); handleNewAppointmentClick(); }}&#10;            onAppointmentClick={setSelectedAppointment}&#10;            onAppointmentDrop={handleAppointmentDrop}&#10;            getAppointmentDate={getAppointmentDate}&#10;            formatAppointmentTime={formatAppointmentTime}&#10;            getAppointmentDuration={getAppointmentDuration}&#10;            getAppointmentBackgroundColor={getAppointmentBackgroundColor}&#10;            getAppointmentTextColor={getAppointmentTextColor}&#10;            getPatientName={getPatientName}&#10;            handleMouseUp={handleMouseUp}&#10;            handleMouseDown={handleMouseDown}&#10;            handleMouseEnter={handleMouseEnter}&#10;            isSlotSelected={isSlotSelected}&#10;            workingHours={workingHours}&#10;            workingDays={workingDays}&#10;          /&gt;&#10;        )}&#10;        {view === 'month' &amp;&amp; (&#10;          &lt;div className=&quot;card&quot;&gt;&#10;            &lt;MonthView&#10;              currentDate={currentDate}&#10;              appointments={groupAppointmentsByDate()}&#10;              onAppointmentClick={(appointmentId) =&gt; {&#10;                const appointment = appointments.find(apt =&gt; apt.id === appointmentId);&#10;                if (appointment) {&#10;                  setSelectedAppointment(appointment);&#10;                }&#10;              }}&#10;              onDayClick={(date) =&gt; {&#10;                setCurrentDate(date);&#10;                setView('day');&#10;              }}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Appointment Detail Modal */}&#10;        {selectedAppointment &amp;&amp; selectedPatient &amp;&amp; (&#10;          &lt;div className=&quot;fixed inset-0 bg-neutral-900/50 flex items-center justify-center z-50 fade-in-element&quot; onClick={() =&gt; setSelectedAppointment(null)}&gt;&#10;            &lt;div className=&quot;bg-white rounded-xl shadow-2xl w-full max-w-3xl max-h-[90vh] overflow-auto animate-scale-in&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;              &lt;AppointmentDetail&#10;                appointment={selectedAppointment}&#10;                patient={selectedPatient}&#10;                onEdit={(appointmentData) =&gt; handleUpdateAppointment(selectedAppointment.id, appointmentData)}&#10;                onCancel={() =&gt; handleCancelAppointment(selectedAppointment.id)}&#10;                onUpdateStatus={(status) =&gt; handleUpdateAppointmentStatus(selectedAppointment.id, status)}&#10;                onDelete={() =&gt; handleDeleteAppointment(selectedAppointment.id)}&#10;                onClose={() =&gt; setSelectedAppointment(null)}&#10;                isLoading={appointmentLoading}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* New Appointment Form Modal */}&#10;        {showNewAppointmentForm &amp;&amp; (&#10;          &lt;div className=&quot;fixed inset-0 bg-neutral-900/50 flex items-center justify-center z-50 fade-in-element&quot;&gt;&#10;            &lt;div className=&quot;bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden animate-scale-in relative&quot;&gt;&#10;              {/* Header */}&#10;              &lt;div className=&quot;flex items-center justify-between p-6 border-b border-gray-200&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold text-gray-900&quot;&gt;&#10;                  {bookingStep === 'patient' ? 'Select Patient' : 'Book Appointment'}&#10;                &lt;/h2&gt;&#10;                &lt;button&#10;                  onClick={closeNewAppointmentModal}&#10;                  className=&quot;text-gray-400 hover:text-gray-600 transition-colors&quot;&#10;                &gt;&#10;                  &lt;span className=&quot;material-icons-round&quot;&gt;close&lt;/span&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Step indicator */}&#10;              &lt;div className=&quot;px-6 py-4 bg-gray-50 border-b border-gray-200&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;div className={`flex items-center space-x-2 ${bookingStep === 'patient' ? 'text-blue-600' : 'text-gray-400'}`}&gt;&#10;                    &lt;div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${&#10;                      bookingStep === 'patient' ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-400'&#10;                    }`}&gt;&#10;                      1&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;Select Patient&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1 h-px bg-gray-200&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className={`flex items-center space-x-2 ${bookingStep === 'appointment' ? 'text-blue-600' : 'text-gray-400'}`}&gt;&#10;                    &lt;div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${&#10;                      bookingStep === 'appointment' ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-400'&#10;                    }`}&gt;&#10;                      2&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;Book Appointment&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Content - Fixed height container for consistency */}&#10;              &lt;div className=&quot;h-[600px] overflow-y-auto&quot;&gt;&#10;                &lt;div className=&quot;p-6&quot;&gt;&#10;                  {bookingStep === 'patient' &amp;&amp; (&#10;                    &lt;div className=&quot;min-h-full&quot;&gt;&#10;                      {showCreatePatientForm ? (&#10;                        &lt;div&gt;&#10;                          &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                            &lt;h3 className=&quot;text-lg font-medium text-gray-900&quot;&gt;Create New Patient&lt;/h3&gt;&#10;                            &lt;button&#10;                              onClick={() =&gt; setShowCreatePatientForm(false)}&#10;                              className=&quot;text-gray-400 hover:text-gray-600&quot;&#10;                            &gt;&#10;                              &lt;span className=&quot;material-icons-round&quot;&gt;arrow_back&lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;PatientForm&#10;                            onSubmit={handleCreatePatient}&#10;                            onCancel={() =&gt; setShowCreatePatientForm(false)}&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;h-full flex flex-col&quot;&gt;&#10;                          {/* Search patients */}&#10;                          &lt;div className=&quot;mb-6&quot;&gt;&#10;                            &lt;div className=&quot;relative&quot;&gt;&#10;                              &lt;input&#10;                                type=&quot;text&quot;&#10;                                placeholder=&quot;Search patients by name, email, or phone...&quot;&#10;                                value={searchQuery}&#10;                                onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;                                className=&quot;w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                              /&gt;&#10;                              &lt;span className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 material-icons-round text-gray-400&quot;&gt;&#10;                                search&#10;                              &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Create new patient button */}&#10;                          &lt;div className=&quot;mb-6&quot;&gt;&#10;                            &lt;button&#10;                              onClick={() =&gt; setShowCreatePatientForm(true)}&#10;                              className=&quot;w-full p-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-blue-400 hover:text-blue-600 transition-colors&quot;&#10;                            &gt;&#10;                              &lt;span className=&quot;material-icons-round mb-2&quot;&gt;add&lt;/span&gt;&#10;                              &lt;div className=&quot;text-sm font-medium&quot;&gt;Create New Patient&lt;/div&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Patient list - flexible height */}&#10;                          &lt;div className=&quot;flex-1 min-h-0&quot;&gt;&#10;                            &lt;div className=&quot;space-y-3 h-full overflow-y-auto&quot;&gt;&#10;                              {patients.map((patient) =&gt; (&#10;                                &lt;div&#10;                                  key={patient.id}&#10;                                  onClick={() =&gt; handlePatientSelect(patient)}&#10;                                  className=&quot;p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 cursor-pointer transition-colors&quot;&#10;                                &gt;&#10;                                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                                    &lt;div&gt;&#10;                                      &lt;h4 className=&quot;font-medium text-gray-900&quot;&gt;&#10;                                        {patient.first_name} {patient.last_name}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;p className=&quot;text-sm text-gray-600&quot;&gt;{patient.email}&lt;/p&gt;&#10;                                      {patient.phone &amp;&amp; (&#10;                                        &lt;p className=&quot;text-sm text-gray-600&quot;&gt;{patient.phone}&lt;/p&gt;&#10;                                      )}&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;material-icons-round text-gray-400&quot;&gt;chevron_right&lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              ))}&#10;                              {patients.length === 0 &amp;&amp; searchQuery &amp;&amp; (&#10;                                &lt;div className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                                  No patients found matching &quot;{searchQuery}&quot;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {patients.length === 0 &amp;&amp; !searchQuery &amp;&amp; (&#10;                                &lt;div className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                                  No patients available. Create a new patient to get started.&#10;                                &lt;/div&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {bookingStep === 'appointment' &amp;&amp; selectedPatientForBooking &amp;&amp; (&#10;                    &lt;div className=&quot;min-h-full&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h3 className=&quot;text-lg font-medium text-gray-900&quot;&gt;Book Appointment&lt;/h3&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                            for {selectedPatientForBooking.first_name} {selectedPatientForBooking.last_name}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setBookingStep('patient')}&#10;                          className=&quot;text-gray-400 hover:text-gray-600&quot;&#10;                        &gt;&#10;                          &lt;span className=&quot;material-icons-round&quot;&gt;arrow_back&lt;/span&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;AppointmentBookingForm&#10;                        patient={selectedPatientForBooking}&#10;                        onSubmit={handleAppointmentBookingComplete}&#10;                        onCancel={closeNewAppointmentModal}&#10;                        isLoading={appointmentLoading}&#10;                        preselectedDate={selectedTimeSlot?.date}&#10;                        preselectedTime={selectedTimeSlot?.time}&#10;                        preselectedEndTime={selectedTimeSlot?.endTime}&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Reschedule Confirmation Modal */}&#10;        {showRescheduleConfirmation &amp;&amp; rescheduleData &amp;&amp; (&#10;          &lt;RescheduleConfirmation&#10;            appointment={rescheduleData.appointment}&#10;            patient={rescheduleData.patient}&#10;            newDate={rescheduleData.newDate}&#10;            newStartTime={rescheduleData.newStartTime}&#10;            newEndTime={rescheduleData.newEndTime}&#10;            onConfirm={handleRescheduleConfirm}&#10;            onCancel={handleRescheduleCancel}&#10;            isLoading={appointmentLoading}&#10;          /&gt;&#10;        )}&#10;&#10;        {/* Cancel Appointment Confirmation Dialog */}&#10;        &lt;ConfirmDialog&#10;          isOpen={showCancelConfirm}&#10;          title=&quot;Cancel Appointment&quot;&#10;          message=&quot;Are you sure you want to cancel this appointment? This will change the appointment status to cancelled.&quot;&#10;          confirmText=&quot;Cancel Appointment&quot;&#10;          cancelText=&quot;Keep Appointment&quot;&#10;          type=&quot;warning&quot;&#10;          isLoading={appointmentLoading}&#10;          onConfirm={async () =&gt; {&#10;            await performCancelAppointment(appointmentToCancel!);&#10;            setShowCancelConfirm(false);&#10;            setAppointmentToCancel(null);&#10;          }}&#10;          onCancel={() =&gt; {&#10;            setShowCancelConfirm(false);&#10;            setAppointmentToCancel(null);&#10;          }}&#10;        /&gt;&#10;&#10;        {/* Delete Appointment Confirmation Dialog */}&#10;        &lt;ConfirmDialog&#10;          isOpen={showDeleteConfirm}&#10;          title=&quot;Delete Appointment&quot;&#10;          message=&quot;Are you sure you want to delete this appointment? This action cannot be undone and will permanently remove the appointment from the system.&quot;&#10;          confirmText=&quot;Delete Appointment&quot;&#10;          cancelText=&quot;Keep Appointment&quot;&#10;          type=&quot;danger&quot;&#10;          isLoading={appointmentLoading}&#10;          onConfirm={async () =&gt; {&#10;            await performDeleteAppointment(appointmentToDelete!);&#10;            setShowDeleteConfirm(false);&#10;            setAppointmentToDelete(null);&#10;          }}&#10;          onCancel={() =&gt; {&#10;            setShowDeleteConfirm(false);&#10;            setAppointmentToDelete(null);&#10;          }}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/DashboardLayout&gt;&#10;  );&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/appointmentService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/appointmentService.ts" />
              <option name="originalContent" value="import { Appointment, AppointmentCreate, AppointmentUpdate } from '../types/Appointment';&#10;import { API_CONFIG } from '../config/api';&#10;&#10;export interface TimeSlot {&#10;  start_time: string;&#10;  end_time: string;&#10;}&#10;&#10;export class AppointmentService {&#10;  private static async request&lt;T&gt;(&#10;    endpoint: string,&#10;    options: RequestInit = {}&#10;  ): Promise&lt;T&gt; {&#10;    const url = `${API_CONFIG.baseURL}${endpoint}`;&#10;&#10;    const response = await fetch(url, {&#10;      headers: {&#10;        'Content-Type': 'application/json',&#10;        ...options.headers,&#10;      },&#10;      ...options,&#10;    });&#10;&#10;    if (!response.ok) {&#10;      const errorData = await response.json().catch(() =&gt; ({}));&#10;      const errorMessage = errorData.detail || `HTTP error! status: ${response.status}`;&#10;      throw new Error(errorMessage);&#10;    }&#10;&#10;    return response.json();&#10;  }&#10;&#10;  static async listAppointments(): Promise&lt;Appointment[]&gt; {&#10;    return this.request&lt;Appointment[]&gt;(API_CONFIG.endpoints.appointments.list);&#10;  }&#10;&#10;  static async getAppointment(id: string): Promise&lt;Appointment&gt; {&#10;    return this.request&lt;Appointment&gt;(API_CONFIG.endpoints.appointments.get(id));&#10;  }&#10;&#10;  static async getPatientAppointments(patientId: string): Promise&lt;Appointment[]&gt; {&#10;    return this.request&lt;Appointment[]&gt;(API_CONFIG.endpoints.appointments.byPatient(patientId));&#10;  }&#10;&#10;  static async createAppointment(appointmentData: AppointmentCreate): Promise&lt;Appointment&gt; {&#10;    return this.request&lt;Appointment&gt;(API_CONFIG.endpoints.appointments.create, {&#10;      method: 'POST',&#10;      body: JSON.stringify(appointmentData),&#10;    });&#10;  }&#10;&#10;  static async updateAppointment(id: string, appointmentData: AppointmentUpdate): Promise&lt;Appointment&gt; {&#10;    return this.request&lt;Appointment&gt;(API_CONFIG.endpoints.appointments.update(id), {&#10;      method: 'PUT',&#10;      body: JSON.stringify(appointmentData),&#10;    });&#10;  }&#10;&#10;  static async deleteAppointment(id: string): Promise&lt;void&gt; {&#10;    return this.request&lt;void&gt;(API_CONFIG.endpoints.appointments.delete(id), {&#10;      method: 'DELETE',&#10;    });&#10;  }&#10;&#10;  static async listAppointmentsByRange(startDate: string, days: number): Promise&lt;Appointment[]&gt; {&#10;    const params = new URLSearchParams({ start_date: startDate, days: days.toString() });&#10;    return this.request&lt;Appointment[]&gt;(`${API_CONFIG.endpoints.appointments.list}?${params.toString()}`);&#10;  }&#10;&#10;  // Fetch appointments for today (use start_date and days=1, remove duplicate mock/export)&#10;  static async getTodaysAppointments(): Promise&lt;Appointment[]&gt; {&#10;    const today = new Date();&#10;    const yyyy = today.getFullYear();&#10;    const mm = String(today.getMonth() + 1).padStart(2, '0');&#10;    const dd = String(today.getDate()).padStart(2, '0');&#10;    const dateStr = `${yyyy}-${mm}-${dd}`;&#10;    // Use start_date and days=1 as required by API spec&#10;    return this.request&lt;Appointment[]&gt;(`${API_CONFIG.endpoints.appointments.list}?start_date=${dateStr}&amp;days=1`);&#10;  }&#10;&#10;  static async updateAppointmentStatus(id: string, status: 'Booked' | 'Cancelled' | 'Completed' | 'No Show'): Promise&lt;Appointment&gt; {&#10;    // Mock: just return the updated appointment&#10;    return {&#10;      id,&#10;      patient_id: '1',&#10;      patient_first_name: 'John',&#10;      patient_last_name: 'Doe',&#10;      date: '2025-07-21',&#10;      start_time: '09:00:00',&#10;      end_time: '09:30:00',&#10;      type: 'Consultation',&#10;      status,&#10;      title: 'Consultation with John Doe',&#10;      notes: null&#10;    };&#10;  }&#10;&#10;  static async getAvailableSlots(appointmentTypeName: string, date: string): Promise&lt;TimeSlot[]&gt; {&#10;    return this.request&lt;TimeSlot[]&gt;(`/api/v1/appointment-types/${appointmentTypeName}/available-slots/${date}`);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Appointment, AppointmentCreate, AppointmentUpdate } from '../types/Appointment';&#10;import { API_CONFIG } from '../config/api';&#10;&#10;export interface TimeSlot {&#10;  start_time: string;&#10;  end_time: string;&#10;}&#10;&#10;export class AppointmentService {&#10;  private static async request&lt;T&gt;(&#10;    endpoint: string,&#10;    options: RequestInit = {}&#10;  ): Promise&lt;T&gt; {&#10;    const url = `${API_CONFIG.baseURL}${endpoint}`;&#10;&#10;    const response = await fetch(url, {&#10;      headers: {&#10;        'Content-Type': 'application/json',&#10;        ...options.headers,&#10;      },&#10;      ...options,&#10;    });&#10;&#10;    if (!response.ok) {&#10;      const errorData = await response.json().catch(() =&gt; ({}));&#10;      const errorMessage = errorData.detail || `HTTP error! status: ${response.status}`;&#10;      throw new Error(errorMessage);&#10;    }&#10;&#10;    return response.json();&#10;  }&#10;&#10;  static async listAppointments(): Promise&lt;Appointment[]&gt; {&#10;    return this.request&lt;Appointment[]&gt;(API_CONFIG.endpoints.appointments.list);&#10;  }&#10;&#10;  static async getAppointment(id: string): Promise&lt;Appointment&gt; {&#10;    return this.request&lt;Appointment&gt;(API_CONFIG.endpoints.appointments.get(id));&#10;  }&#10;&#10;  static async getPatientAppointments(patientId: string): Promise&lt;Appointment[]&gt; {&#10;    return this.request&lt;Appointment[]&gt;(API_CONFIG.endpoints.appointments.byPatient(patientId));&#10;  }&#10;&#10;  static async createAppointment(appointmentData: AppointmentCreate): Promise&lt;Appointment&gt; {&#10;    return this.request&lt;Appointment&gt;(API_CONFIG.endpoints.appointments.create, {&#10;      method: 'POST',&#10;      body: JSON.stringify(appointmentData),&#10;    });&#10;  }&#10;&#10;  static async updateAppointment(id: string, appointmentData: AppointmentUpdate): Promise&lt;Appointment&gt; {&#10;    return this.request&lt;Appointment&gt;(API_CONFIG.endpoints.appointments.update(id), {&#10;      method: 'PUT',&#10;      body: JSON.stringify(appointmentData),&#10;    });&#10;  }&#10;&#10;  static async deleteAppointment(id: string): Promise&lt;void&gt; {&#10;    return this.request&lt;void&gt;(API_CONFIG.endpoints.appointments.delete(id), {&#10;      method: 'DELETE',&#10;    });&#10;  }&#10;&#10;  static async listAppointmentsByRange(startDate: string, days: number): Promise&lt;Appointment[]&gt; {&#10;    const params = new URLSearchParams({ start_date: startDate, days: days.toString() });&#10;    return this.request&lt;Appointment[]&gt;(`${API_CONFIG.endpoints.appointments.list}?${params.toString()}`);&#10;  }&#10;&#10;  // Fetch appointments for today (use start_date and days=1, remove duplicate mock/export)&#10;  static async getTodaysAppointments(): Promise&lt;Appointment[]&gt; {&#10;    const today = new Date();&#10;    const yyyy = today.getFullYear();&#10;    const mm = String(today.getMonth() + 1).padStart(2, '0');&#10;    const dd = String(today.getDate()).padStart(2, '0');&#10;    const dateStr = `${yyyy}-${mm}-${dd}`;&#10;    // Use start_date and days=1 as required by API spec&#10;    return this.request&lt;Appointment[]&gt;(`${API_CONFIG.endpoints.appointments.list}?start_date=${dateStr}&amp;days=1`);&#10;  }&#10;&#10;  static async updateAppointmentStatus(id: string, status: 'Booked' | 'Cancelled' | 'Completed' | 'No Show'): Promise&lt;Appointment&gt; {&#10;    // Mock: just return the updated appointment&#10;    return {&#10;      id,&#10;      patient_id: '1',&#10;      patient_first_name: 'John',&#10;      patient_last_name: 'Doe',&#10;      date: '2025-07-21',&#10;      start_time: '09:00:00',&#10;      end_time: '09:30:00',&#10;      type: 'Consultation',&#10;      status,&#10;      title: 'Consultation with John Doe',&#10;      notes: null&#10;    };&#10;  }&#10;&#10;  static async getAvailableSlots(&#10;    appointmentTypeName: string, &#10;    date: string, &#10;    startTime: string, &#10;    endTime: string&#10;  ): Promise&lt;TimeSlot[]&gt; {&#10;    const params = new URLSearchParams({&#10;      start_time: startTime,&#10;      end_time: endTime&#10;    });&#10;    return this.request&lt;TimeSlot[]&gt;(`/api/v1/appointment-types/${appointmentTypeName}/available-slots/${date}?${params.toString()}`);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/authService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/authService.ts" />
              <option name="originalContent" value="import { API_CONFIG, buildApiUrl } from '../config/api';&#10;import { LoginRequest, LoginResponse } from '../types/Auth';&#10;&#10;class AuthService {&#10;  private static instance: AuthService;&#10;&#10;  public static getInstance(): AuthService {&#10;    if (!AuthService.instance) {&#10;      AuthService.instance = new AuthService();&#10;    }&#10;    return AuthService.instance;&#10;  }&#10;&#10;  async login(credentials: LoginRequest): Promise&lt;LoginResponse&gt; {&#10;    try {&#10;      const response = await fetch(buildApiUrl('/api/v1/auth/login'), {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify(credentials),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        // Try to parse error message from response&#10;        let errorMessage = 'Login failed';&#10;        try {&#10;          const errorData = await response.json();&#10;          errorMessage = errorData.message || errorData.detail || 'Invalid credentials';&#10;        } catch {&#10;          // Fallback to status-based messages if JSON parsing fails&#10;          switch (response.status) {&#10;            case 401:&#10;              errorMessage = 'Invalid email or password';&#10;              break;&#10;            case 403:&#10;              errorMessage = 'Access denied. Please contact administrator';&#10;              break;&#10;            case 429:&#10;              errorMessage = 'Too many login attempts. Please try again later';&#10;              break;&#10;            case 500:&#10;              errorMessage = 'Server error. Please try again later';&#10;              break;&#10;            default:&#10;              errorMessage = 'Login failed. Please try again';&#10;          }&#10;        }&#10;        throw new Error(errorMessage);&#10;      }&#10;&#10;      const data: LoginResponse = await response.json();&#10;&#10;      // Store user data in localStorage&#10;      localStorage.setItem('user', JSON.stringify(data));&#10;      localStorage.setItem('isAuthenticated', 'true');&#10;&#10;      return data;&#10;    } catch (error) {&#10;      // If it's already our custom error, re-throw it&#10;      if (error instanceof Error) {&#10;        throw error;&#10;      }&#10;      // Handle network errors or other unexpected errors&#10;      throw new Error('Network error. Please check your connection and try again');&#10;    }&#10;  }&#10;&#10;  logout(): void {&#10;    localStorage.removeItem('user');&#10;    localStorage.removeItem('isAuthenticated');&#10;  }&#10;&#10;  getCurrentUser(): LoginResponse | null {&#10;    const userStr = localStorage.getItem('user');&#10;    return userStr ? JSON.parse(userStr) : null;&#10;  }&#10;&#10;  isAuthenticated(): boolean {&#10;    return localStorage.getItem('isAuthenticated') === 'true';&#10;  }&#10;&#10;  getDoctorId(): string | null {&#10;    const user = this.getCurrentUser();&#10;    console.log('Current user data:', user); // Debug log&#10;    console.log('User data type:', typeof user); // Debug log&#10;    console.log('User keys:', user ? Object.keys(user) : 'null'); // Debug log&#10;&#10;    const doctorId = user?.doctor_id || null;&#10;    console.log('Doctor ID extracted:', doctorId); // Debug log&#10;    return doctorId;&#10;  }&#10;}&#10;&#10;export const authService = AuthService.getInstance();&#10;" />
              <option name="updatedContent" value="import { API_CONFIG, buildApiUrl } from '../config/api';&#10;import { LoginRequest, LoginResponse } from '../types/Auth';&#10;&#10;class AuthService {&#10;  private static instance: AuthService;&#10;&#10;  public static getInstance(): AuthService {&#10;    if (!AuthService.instance) {&#10;      AuthService.instance = new AuthService();&#10;    }&#10;    return AuthService.instance;&#10;  }&#10;&#10;  async login(credentials: LoginRequest): Promise&lt;LoginResponse&gt; {&#10;    try {&#10;      const response = await fetch(buildApiUrl('/api/v1/auth/login'), {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify(credentials),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        // Try to parse error message from response&#10;        let errorMessage = 'Login failed';&#10;        try {&#10;          const errorData = await response.json();&#10;          errorMessage = errorData.message || errorData.detail || 'Invalid credentials';&#10;        } catch {&#10;          // Fallback to status-based messages if JSON parsing fails&#10;          switch (response.status) {&#10;            case 401:&#10;              errorMessage = 'Invalid email or password';&#10;              break;&#10;            case 403:&#10;              errorMessage = 'Access denied. Please contact administrator';&#10;              break;&#10;            case 429:&#10;              errorMessage = 'Too many login attempts. Please try again later';&#10;              break;&#10;            case 500:&#10;              errorMessage = 'Server error. Please try again later';&#10;              break;&#10;            default:&#10;              errorMessage = 'Login failed. Please try again';&#10;          }&#10;        }&#10;        throw new Error(errorMessage);&#10;      }&#10;&#10;      const data: LoginResponse = await response.json();&#10;&#10;      // Store user data in localStorage&#10;      localStorage.setItem('user', JSON.stringify(data));&#10;      localStorage.setItem('isAuthenticated', 'true');&#10;&#10;      return data;&#10;    } catch (error) {&#10;      // If it's already our custom error, re-throw it&#10;      if (error instanceof Error) {&#10;        throw error;&#10;      }&#10;      // Handle network errors or other unexpected errors&#10;      throw new Error('Network error. Please check your connection and try again');&#10;    }&#10;  }&#10;&#10;  logout(): void {&#10;    localStorage.removeItem('user');&#10;    localStorage.removeItem('isAuthenticated');&#10;  }&#10;&#10;  getCurrentUser(): LoginResponse | null {&#10;    const userStr = localStorage.getItem('user');&#10;    return userStr ? JSON.parse(userStr) : null;&#10;  }&#10;&#10;  isAuthenticated(): boolean {&#10;    return localStorage.getItem('isAuthenticated') === 'true';&#10;  }&#10;&#10;  getDoctorId(): string | null {&#10;    const user = this.getCurrentUser();&#10;    console.log('Current user data:', user); // Debug log&#10;    console.log('User data type:', typeof user); // Debug log&#10;    console.log('User keys:', user ? Object.keys(user) : 'null'); // Debug log&#10;&#10;    // Use 'id' field as the doctor ID since that's what the login API returns&#10;    const doctorId = user?.id || null;&#10;    console.log('Doctor ID extracted:', doctorId); // Debug log&#10;    return doctorId;&#10;  }&#10;}&#10;&#10;export const authService = AuthService.getInstance();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/settingsService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/settingsService.ts" />
              <option name="originalContent" value="import { API_CONFIG, buildApiUrl } from '../config/api';&#10;import { Settings, SettingsUpdate, SettingsFieldValues } from '../types/Settings';&#10;import { authService } from './authService';&#10;&#10;export class SettingsService {&#10;  private static cachedSettings: Settings | null = null;&#10;  private static cacheTimestamp: number | null = null;&#10;  private static readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds&#10;&#10;  /**&#10;   * Check if cached settings are still valid&#10;   */&#10;  private static isCacheValid(): boolean {&#10;    return this.cachedSettings !== null &amp;&amp;&#10;           this.cacheTimestamp !== null &amp;&amp;&#10;           (Date.now() - this.cacheTimestamp) &lt; this.CACHE_DURATION;&#10;  }&#10;&#10;  /**&#10;   * Clear the settings cache&#10;   */&#10;  static clearCache(): void {&#10;    this.cachedSettings = null;&#10;    this.cacheTimestamp = null;&#10;  }&#10;&#10;  /**&#10;   * Get current settings for the authenticated doctor (with caching)&#10;   */&#10;  static async getSettings(forceRefresh: boolean = false): Promise&lt;Settings&gt; {&#10;    // Return cached settings if valid and not forcing refresh&#10;    if (!forceRefresh &amp;&amp; this.isCacheValid()) {&#10;      return this.cachedSettings!;&#10;    }&#10;&#10;    try {&#10;      const doctorId = authService.getDoctorId();&#10;      console.log('Doctor ID retrieved:', doctorId); // Debug log&#10;&#10;      if (!doctorId) {&#10;        throw new Error('Doctor ID not found. Please log in again.');&#10;      }&#10;&#10;      const url = buildApiUrl(`/api/v1/settings/${doctorId}`);&#10;      console.log('Making request to:', url); // Debug log&#10;&#10;      const response = await fetch(url);&#10;      console.log('Response status:', response.status); // Debug log&#10;&#10;      if (!response.ok) {&#10;        throw new Error(`Failed to fetch settings: ${response.status} ${response.statusText}`);&#10;      }&#10;&#10;      const data: Settings = await response.json();&#10;      console.log('Settings data received:', data); // Debug log&#10;&#10;      // Cache the settings&#10;      this.cachedSettings = data;&#10;      this.cacheTimestamp = Date.now();&#10;&#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error fetching settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Get clinic name from cached settings (fast access)&#10;   */&#10;  static getClinicName(): string | null {&#10;    return this.cachedSettings?.clinic_name || null;&#10;  }&#10;&#10;  /**&#10;   * Get field values for settings options&#10;   */&#10;  static async getSettingsFieldValues(): Promise&lt;SettingsFieldValues&gt; {&#10;    try {&#10;      const url = buildApiUrl('/api/v1/settings/fields/values');&#10;      console.log('Making request to:', url); // Debug log&#10;&#10;      const response = await fetch(url);&#10;      console.log('Field values response status:', response.status); // Debug log&#10;&#10;      if (!response.ok) {&#10;        throw new Error(`Failed to fetch settings field values: ${response.status} ${response.statusText}`);&#10;      }&#10;&#10;      const data: SettingsFieldValues = await response.json();&#10;      console.log('Field values data received:', data); // Debug log&#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error fetching settings field values:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Update settings&#10;   */&#10;  static async updateSettings(updates: SettingsUpdate): Promise&lt;Settings&gt; {&#10;    try {&#10;      const doctorId = authService.getDoctorId();&#10;      if (!doctorId) {&#10;        throw new Error('Doctor ID not found. Please log in again.');&#10;      }&#10;&#10;      const response = await fetch(buildApiUrl(`/api/v1/settings/${doctorId}`), {&#10;        method: 'PUT',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify(updates),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error('Failed to update settings');&#10;      }&#10;&#10;      const data: Settings = await response.json();&#10;&#10;      // Update cache with new settings&#10;      this.cachedSettings = data;&#10;      this.cacheTimestamp = Date.now();&#10;&#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error updating settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Export settings as a JSON file blob&#10;   */&#10;  static async exportSettings(): Promise&lt;Blob&gt; {&#10;    try {&#10;      const settings = await this.getSettings();&#10;      const exportData = {&#10;        exportDate: new Date().toISOString(),&#10;        version: '1.0',&#10;        settings: settings&#10;      };&#10;&#10;      const jsonString = JSON.stringify(exportData, null, 2);&#10;      return new Blob([jsonString], { type: 'application/json' });&#10;    } catch (error) {&#10;      console.error('Error exporting settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Import settings from a JSON file&#10;   */&#10;  static async importSettings(file: File): Promise&lt;{ data: Settings }&gt; {&#10;    try {&#10;      const fileContent = await this.readFileAsText(file);&#10;      const importData = JSON.parse(fileContent);&#10;&#10;      // Validate the imported data structure&#10;      if (!importData.settings) {&#10;        throw new Error('Invalid settings file format');&#10;      }&#10;&#10;      // Update the settings via API&#10;      const updatedSettings = await this.updateSettings(importData.settings);&#10;&#10;      return { data: updatedSettings };&#10;    } catch (error) {&#10;      console.error('Error importing settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Helper method to read file as text&#10;   */&#10;  private static readFileAsText(file: File): Promise&lt;string&gt; {&#10;    return new Promise((resolve, reject) =&gt; {&#10;      const reader = new FileReader();&#10;      reader.onload = (event) =&gt; {&#10;        if (event.target?.result) {&#10;          resolve(event.target.result as string);&#10;        } else {&#10;          reject(new Error('Failed to read file'));&#10;        }&#10;      };&#10;      reader.onerror = () =&gt; reject(new Error('Failed to read file'));&#10;      reader.readAsText(file);&#10;    });&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { API_CONFIG, buildApiUrl } from '../config/api';&#10;import { Settings, SettingsUpdate, SettingsFieldValues } from '../types/Settings';&#10;import { authService } from './authService';&#10;&#10;// Event dispatcher for settings updates&#10;class SettingsEventDispatcher extends EventTarget {&#10;  dispatchSettingsUpdate(settings: Settings) {&#10;    this.dispatchEvent(new CustomEvent('settingsUpdated', { detail: settings }));&#10;  }&#10;}&#10;&#10;export const settingsEventDispatcher = new SettingsEventDispatcher();&#10;&#10;export class SettingsService {&#10;  private static cachedSettings: Settings | null = null;&#10;  private static cacheTimestamp: number | null = null;&#10;  private static cachedDoctorId: string | null = null; // Track which doctor's settings are cached&#10;  private static readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds&#10;&#10;  /**&#10;   * Check if cached settings are still valid for the current doctor&#10;   */&#10;  private static isCacheValid(): boolean {&#10;    const currentDoctorId = authService.getDoctorId();&#10;    return this.cachedSettings !== null &amp;&amp; &#10;           this.cacheTimestamp !== null &amp;&amp; &#10;           this.cachedDoctorId === currentDoctorId &amp;&amp;&#10;           (Date.now() - this.cacheTimestamp) &lt; this.CACHE_DURATION;&#10;  }&#10;&#10;  /**&#10;   * Clear the settings cache&#10;   */&#10;  static clearCache(): void {&#10;    this.cachedSettings = null;&#10;    this.cacheTimestamp = null;&#10;    this.cachedDoctorId = null;&#10;  }&#10;&#10;  /**&#10;   * Get current settings for the authenticated doctor (with caching)&#10;   */&#10;  static async getSettings(forceRefresh: boolean = false): Promise&lt;Settings&gt; {&#10;    const currentDoctorId = authService.getDoctorId();&#10;    &#10;    // Clear cache if doctor changed&#10;    if (this.cachedDoctorId &amp;&amp; this.cachedDoctorId !== currentDoctorId) {&#10;      this.clearCache();&#10;    }&#10;&#10;    // Return cached settings if valid and not forcing refresh&#10;    if (!forceRefresh &amp;&amp; this.isCacheValid()) {&#10;      return this.cachedSettings!;&#10;    }&#10;&#10;    try {&#10;      console.log('Doctor ID retrieved:', currentDoctorId); // Debug log&#10;&#10;      if (!currentDoctorId) {&#10;        throw new Error('Doctor ID not found. Please log in again.');&#10;      }&#10;&#10;      const url = buildApiUrl(`/api/v1/settings/${currentDoctorId}`);&#10;      console.log('Making request to:', url); // Debug log&#10;&#10;      const response = await fetch(url);&#10;      console.log('Response status:', response.status); // Debug log&#10;&#10;      if (!response.ok) {&#10;        throw new Error(`Failed to fetch settings: ${response.status} ${response.statusText}`);&#10;      }&#10;&#10;      const data: Settings = await response.json();&#10;      console.log('Settings data received:', data); // Debug log&#10;      &#10;      // Cache the settings with doctor ID&#10;      this.cachedSettings = data;&#10;      this.cacheTimestamp = Date.now();&#10;      this.cachedDoctorId = currentDoctorId;&#10;      &#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error fetching settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Get clinic name from cached settings (fast access)&#10;   */&#10;  static getClinicName(): string | null {&#10;    const currentDoctorId = authService.getDoctorId();&#10;    &#10;    // Return null if cache is for a different doctor&#10;    if (this.cachedDoctorId !== currentDoctorId) {&#10;      return null;&#10;    }&#10;    &#10;    return this.cachedSettings?.clinic_name || null;&#10;  }&#10;&#10;  /**&#10;   * Get field values for settings options&#10;   */&#10;  static async getSettingsFieldValues(): Promise&lt;SettingsFieldValues&gt; {&#10;    try {&#10;      const url = buildApiUrl('/api/v1/settings/fields/values');&#10;      console.log('Making request to:', url); // Debug log&#10;&#10;      const response = await fetch(url);&#10;      console.log('Field values response status:', response.status); // Debug log&#10;&#10;      if (!response.ok) {&#10;        throw new Error(`Failed to fetch settings field values: ${response.status} ${response.statusText}`);&#10;      }&#10;&#10;      const data: SettingsFieldValues = await response.json();&#10;      console.log('Field values data received:', data); // Debug log&#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error fetching settings field values:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Update settings&#10;   */&#10;  static async updateSettings(updates: SettingsUpdate): Promise&lt;Settings&gt; {&#10;    try {&#10;      const doctorId = authService.getDoctorId();&#10;      if (!doctorId) {&#10;        throw new Error('Doctor ID not found. Please log in again.');&#10;      }&#10;&#10;      const response = await fetch(buildApiUrl(`/api/v1/settings/${doctorId}`), {&#10;        method: 'PUT',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify(updates),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error('Failed to update settings');&#10;      }&#10;&#10;      const data: Settings = await response.json();&#10;      &#10;      // Update cache with new settings&#10;      this.cachedSettings = data;&#10;      this.cacheTimestamp = Date.now();&#10;      this.cachedDoctorId = doctorId;&#10;      &#10;      // Dispatch settings update event&#10;      settingsEventDispatcher.dispatchSettingsUpdate(data);&#10;      &#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error updating settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Export settings as a JSON file blob&#10;   */&#10;  static async exportSettings(): Promise&lt;Blob&gt; {&#10;    try {&#10;      const settings = await this.getSettings();&#10;      const exportData = {&#10;        exportDate: new Date().toISOString(),&#10;        version: '1.0',&#10;        settings: settings&#10;      };&#10;&#10;      const jsonString = JSON.stringify(exportData, null, 2);&#10;      return new Blob([jsonString], { type: 'application/json' });&#10;    } catch (error) {&#10;      console.error('Error exporting settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Import settings from a JSON file&#10;   */&#10;  static async importSettings(file: File): Promise&lt;{ data: Settings }&gt; {&#10;    try {&#10;      const fileContent = await this.readFileAsText(file);&#10;      const importData = JSON.parse(fileContent);&#10;&#10;      // Validate the imported data structure&#10;      if (!importData.settings) {&#10;        throw new Error('Invalid settings file format');&#10;      }&#10;&#10;      // Update the settings via API&#10;      const updatedSettings = await this.updateSettings(importData.settings);&#10;&#10;      return { data: updatedSettings };&#10;    } catch (error) {&#10;      console.error('Error importing settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Helper method to read file as text&#10;   */&#10;  private static readFileAsText(file: File): Promise&lt;string&gt; {&#10;    return new Promise((resolve, reject) =&gt; {&#10;      const reader = new FileReader();&#10;      reader.onload = (event) =&gt; {&#10;        if (event.target?.result) {&#10;          resolve(event.target.result as string);&#10;        } else {&#10;          reject(new Error('Failed to read file'));&#10;        }&#10;      };&#10;      reader.onerror = () =&gt; reject(new Error('Failed to read file'));&#10;      reader.readAsText(file);&#10;    });&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/styles/globals.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/styles/globals.css" />
              <option name="originalContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;family=Poppins:wght@300;400;500;600;700;800&amp;display=swap');&#10;@import url('https://fonts.googleapis.com/icon?family=Material+Icons+Round');&#10;&#10;@layer base {&#10;  body {&#10;    @apply bg-neutral-50 text-neutral-800;&#10;    font-family: 'Inter', sans-serif;&#10;    min-height: 100vh;&#10;  }&#10;&#10;  h1, h2, h3, h4, h5, h6 {&#10;    font-family: 'Poppins', sans-serif;&#10;    @apply font-semibold;&#10;  }&#10;&#10;  /* Custom scrollbar */&#10;  ::-webkit-scrollbar {&#10;    width: 6px;&#10;  }&#10;&#10;  ::-webkit-scrollbar-track {&#10;    @apply bg-neutral-100;&#10;  }&#10;&#10;  ::-webkit-scrollbar-thumb {&#10;    @apply bg-primary-400 rounded-full;&#10;  }&#10;&#10;  ::-webkit-scrollbar-thumb:hover {&#10;    @apply bg-primary-500;&#10;  }&#10;}&#10;&#10;@layer components {&#10;  /* Clean card design */&#10;  .glass {&#10;    @apply bg-white/90 backdrop-blur-sm border border-neutral-200 shadow-soft;&#10;  }&#10;&#10;  .glass-dark {&#10;    @apply bg-primary-800/95 backdrop-blur-sm border border-primary-700 shadow-large;&#10;  }&#10;&#10;  /* Card styles */&#10;  .card {&#10;    @apply bg-white rounded-2xl p-6 shadow-medium hover:shadow-large transition-all duration-300 border border-neutral-100;&#10;  }&#10;&#10;  /* Left-side scrollbar for sidebar */&#10;  .sidebar-scroll-left {&#10;    direction: rtl;&#10;  }&#10;&#10;  .sidebar-scroll-left &gt; * {&#10;    direction: ltr;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar {&#10;    width: 6px;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-track {&#10;    @apply bg-primary-700/30 rounded-full;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-thumb {&#10;    @apply bg-primary-400/60 rounded-full;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-thumb:hover {&#10;    @apply bg-primary-400;&#10;  }&#10;&#10;  /* Button styles - clean design with main color */&#10;  .btn-primary {&#10;    @apply bg-primary-500 text-white px-6 py-3 rounded-xl font-medium shadow-primary hover:bg-primary-600 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  .btn-secondary {&#10;    @apply bg-white text-neutral-700 px-6 py-3 rounded-xl font-medium border border-neutral-200 hover:bg-neutral-50 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  .btn-accent {&#10;    @apply bg-primary-600 text-white px-6 py-3 rounded-xl font-medium shadow-medium hover:bg-primary-700 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  /* Input styles */&#10;  .input-modern {&#10;    @apply bg-white border border-neutral-200 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-300;&#10;  }&#10;&#10;  /* Navigation styles */&#10;  .nav-item {&#10;    @apply relative flex items-center space-x-3 px-4 py-3 rounded-xl transition-all duration-300;&#10;  }&#10;&#10;  .nav-item-active {&#10;    @apply bg-primary-100 text-primary-700 shadow-soft;&#10;  }&#10;&#10;  .nav-item-inactive {&#10;    @apply text-neutral-300 hover:bg-primary-700/50 hover:text-white;&#10;  }&#10;&#10;  /* Status indicators - clean colors */&#10;  .status-online {&#10;    @apply bg-success-500;&#10;  }&#10;&#10;  .status-busy {&#10;    @apply bg-error-500;&#10;  }&#10;&#10;  .status-away {&#10;    @apply bg-warning-500;&#10;  }&#10;&#10;  /* Animation elements */&#10;  .floating-element {&#10;    @apply animate-pulse-slow;&#10;  }&#10;&#10;  .fade-in-element {&#10;    @apply animate-fade-in;&#10;  }&#10;&#10;  .slide-up-element {&#10;    @apply animate-slide-up;&#10;  }&#10;}&#10;&#10;/* Calendar Grid Styles */&#10;.calendar-grid {&#10;  @apply grid shadow-large rounded-2xl overflow-hidden bg-white border border-neutral-200;&#10;  grid-template-columns: auto repeat(7, 1fr);&#10;  grid-template-rows: auto repeat(10, 5rem);&#10;}&#10;&#10;.time-label {&#10;  @apply text-right pr-4 text-sm text-neutral-500 bg-neutral-50;&#10;  grid-column: 1;&#10;}&#10;&#10;.day-column {&#10;  @apply relative border-r border-neutral-200 hover:bg-primary-50 transition-all duration-300;&#10;}&#10;&#10;.day-header {&#10;  @apply bg-primary-500 text-white p-4 font-semibold text-center;&#10;}&#10;&#10;/* Material Icons */&#10;.material-icons-round {&#10;  font-family: 'Material Icons Round';&#10;  font-size: 24px;&#10;  display: inline-block;&#10;  line-height: 1;&#10;  text-transform: none;&#10;  letter-spacing: normal;&#10;  word-wrap: normal;&#10;  white-space: nowrap;&#10;  direction: ltr;&#10;  -webkit-font-smoothing: antialiased;&#10;  text-rendering: optimizeLegibility;&#10;  -moz-osx-font-smoothing: grayscale;&#10;  font-feature-settings: 'liga';&#10;}&#10;&#10;/* Loading animations */&#10;.loading-spinner {&#10;  @apply animate-spin rounded-full border-4 border-primary-200 border-t-primary-500;&#10;}&#10;&#10;/* Notification styles */&#10;.notification-success {&#10;  @apply bg-success-50 border-l-4 border-success-500 text-success-800;&#10;}&#10;&#10;.notification-error {&#10;  @apply bg-error-50 border-l-4 border-error-500 text-error-800;&#10;}&#10;&#10;.notification-warning {&#10;  @apply bg-warning-50 border-l-4 border-warning-500 text-warning-800;&#10;}&#10;&#10;.notification-info {&#10;  @apply bg-primary-50 border-l-4 border-primary-500 text-primary-800;&#10;}&#10;&#10;/* Custom utilities */&#10;.text-gradient {&#10;  @apply text-primary-600;&#10;}&#10;&#10;.border-gradient {&#10;  @apply border-2 border-primary-200;&#10;}&#10;" />
              <option name="updatedContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;family=Poppins:wght@300;400;500;600;700;800&amp;display=swap');&#10;@import url('https://fonts.googleapis.com/icon?family=Material+Icons+Round');&#10;&#10;@layer base {&#10;  body {&#10;    @apply bg-neutral-50 text-neutral-800;&#10;    font-family: 'Inter', sans-serif;&#10;    min-height: 100vh;&#10;  }&#10;&#10;  h1, h2, h3, h4, h5, h6 {&#10;    font-family: 'Poppins', sans-serif;&#10;    @apply font-semibold;&#10;  }&#10;&#10;  /* Custom scrollbar */&#10;  ::-webkit-scrollbar {&#10;    width: 6px;&#10;  }&#10;&#10;  ::-webkit-scrollbar-track {&#10;    @apply bg-neutral-100;&#10;  }&#10;&#10;  ::-webkit-scrollbar-thumb {&#10;    @apply bg-primary-400 rounded-full;&#10;  }&#10;&#10;  ::-webkit-scrollbar-thumb:hover {&#10;    @apply bg-primary-500;&#10;  }&#10;}&#10;&#10;@layer components {&#10;  /* Clean card design */&#10;  .glass {&#10;    @apply bg-white/90 backdrop-blur-sm border border-neutral-200 shadow-soft;&#10;  }&#10;&#10;  .glass-dark {&#10;    @apply bg-primary-800/95 backdrop-blur-sm border border-primary-700 shadow-large;&#10;  }&#10;&#10;  /* Card styles */&#10;  .card {&#10;    @apply bg-white rounded-2xl p-6 shadow-medium hover:shadow-large transition-all duration-300 border border-neutral-100;&#10;  }&#10;&#10;  /* Left-side scrollbar for sidebar */&#10;  .sidebar-scroll-left {&#10;    direction: rtl;&#10;  }&#10;&#10;  .sidebar-scroll-left &gt; * {&#10;    direction: ltr;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar {&#10;    width: 6px;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-track {&#10;    @apply bg-primary-700/30 rounded-full;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-thumb {&#10;    @apply bg-primary-400/60 rounded-full;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-thumb:hover {&#10;    @apply bg-primary-400;&#10;  }&#10;&#10;  /* Button styles - clean design with main color */&#10;  .btn-primary {&#10;    @apply bg-primary-500 text-white px-6 py-3 rounded-xl font-medium shadow-primary hover:bg-primary-600 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  .btn-secondary {&#10;    @apply bg-white text-neutral-700 px-6 py-3 rounded-xl font-medium border border-neutral-200 hover:bg-neutral-50 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  .btn-accent {&#10;    @apply bg-primary-600 text-white px-6 py-3 rounded-xl font-medium shadow-medium hover:bg-primary-700 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  /* Input styles */&#10;  .input-modern {&#10;    @apply bg-white border border-neutral-200 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-300;&#10;  }&#10;&#10;  /* Navigation styles */&#10;  .nav-item {&#10;    @apply relative flex items-center space-x-3 px-4 py-3 rounded-xl transition-all duration-300;&#10;  }&#10;&#10;  .nav-item-active {&#10;    @apply bg-primary-600/90 text-white shadow-medium;&#10;  }&#10;&#10;  .nav-item-inactive {&#10;    @apply text-primary-200 hover:bg-primary-700/50 hover:text-white;&#10;  }&#10;&#10;  /* Status indicators - clean colors */&#10;  .status-online {&#10;    @apply bg-success-500;&#10;  }&#10;&#10;  .status-busy {&#10;    @apply bg-error-500;&#10;  }&#10;&#10;  .status-away {&#10;    @apply bg-warning-500;&#10;  }&#10;&#10;  /* Animation elements */&#10;  .floating-element {&#10;    @apply animate-pulse-slow;&#10;  }&#10;&#10;  .fade-in-element {&#10;    @apply animate-fade-in;&#10;  }&#10;&#10;  .slide-up-element {&#10;    @apply animate-slide-up;&#10;  }&#10;}&#10;&#10;/* Calendar Grid Styles */&#10;.calendar-grid {&#10;  @apply grid shadow-large rounded-2xl overflow-hidden bg-white border border-neutral-200;&#10;  grid-template-columns: auto repeat(7, 1fr);&#10;  grid-template-rows: auto repeat(10, 5rem);&#10;}&#10;&#10;.time-label {&#10;  @apply text-right pr-4 text-sm text-neutral-500 bg-neutral-50;&#10;  grid-column: 1;&#10;}&#10;&#10;.day-column {&#10;  @apply relative border-r border-neutral-200 hover:bg-primary-50 transition-all duration-300;&#10;}&#10;&#10;.day-header {&#10;  @apply bg-primary-500 text-white p-4 font-semibold text-center;&#10;}&#10;&#10;/* Material Icons */&#10;.material-icons-round {&#10;  font-family: 'Material Icons Round';&#10;  font-size: 24px;&#10;  display: inline-block;&#10;  line-height: 1;&#10;  text-transform: none;&#10;  letter-spacing: normal;&#10;  word-wrap: normal;&#10;  white-space: nowrap;&#10;  direction: ltr;&#10;  -webkit-font-smoothing: antialiased;&#10;  text-rendering: optimizeLegibility;&#10;  -moz-osx-font-smoothing: grayscale;&#10;  font-feature-settings: 'liga';&#10;}&#10;&#10;/* Loading animations */&#10;.loading-spinner {&#10;  @apply animate-spin rounded-full border-4 border-primary-200 border-t-primary-500;&#10;}&#10;&#10;/* Notification styles */&#10;.notification-success {&#10;  @apply bg-success-50 border-l-4 border-success-500 text-success-800;&#10;}&#10;&#10;.notification-error {&#10;  @apply bg-error-50 border-l-4 border-error-500 text-error-800;&#10;}&#10;&#10;.notification-warning {&#10;  @apply bg-warning-50 border-l-4 border-warning-500 text-warning-800;&#10;}&#10;&#10;.notification-info {&#10;  @apply bg-primary-50 border-l-4 border-primary-500 text-primary-800;&#10;}&#10;&#10;/* Custom utilities */&#10;.text-gradient {&#10;  @apply text-primary-600;&#10;}&#10;&#10;.border-gradient {&#10;  @apply border-2 border-primary-200;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types/Auth.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types/Auth.ts" />
              <option name="originalContent" value="export interface LoginRequest {&#10;  email: string;&#10;  password: string;&#10;}&#10;&#10;export interface LoginResponse {&#10;  first_name: string;&#10;  last_name: string;&#10;  clinic_name: string;&#10;  doctor_id: string;&#10;}&#10;&#10;export interface AuthState {&#10;  isAuthenticated: boolean;&#10;  user: LoginResponse | null;&#10;  token: string | null;&#10;}&#10;" />
              <option name="updatedContent" value="export interface LoginRequest {&#10;  email: string;&#10;  password: string;&#10;}&#10;&#10;export interface LoginResponse {&#10;  id: string;&#10;  first_name: string;&#10;  last_name: string;&#10;  clinic_name: string;&#10;}&#10;&#10;export interface AuthState {&#10;  isAuthenticated: boolean;&#10;  user: LoginResponse | null;&#10;  token: string | null;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types/Patient.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types/Patient.ts" />
              <option name="updatedContent" value="import { Appointment } from './Appointment';&#10;&#10;// Base Patient interface matching simplified API schema&#10;export interface Patient {&#10;    id: string;&#10;    first_name: string;&#10;    last_name: string;&#10;    date_of_birth: string; // ISO date string&#10;    gender: 'male' | 'female';&#10;    email: string;&#10;    phone: string;&#10;    street: string;&#10;    city: string;&#10;    state: string;&#10;    zip_code: string;&#10;}&#10;&#10;// For creating new patients (without id)&#10;export interface PatientCreate {&#10;    first_name: string;&#10;    last_name: string;&#10;    phone: string;&#10;    date_of_birth?: string;&#10;    gender?: 'male' | 'female';&#10;    email?: string;&#10;    street?: string;&#10;    city?: string;&#10;    state?: string;&#10;    zip_code?: string;&#10;}&#10;&#10;// For updating patients (all fields optional)&#10;export interface PatientUpdate {&#10;    first_name?: string;&#10;    last_name?: string;&#10;    date_of_birth?: string;&#10;    gender?: 'male' | 'female';&#10;    email?: string;&#10;    phone?: string;&#10;    street?: string;&#10;    city?: string;&#10;    state?: string;&#10;    zip_code?: string;&#10;}&#10;&#10;// For API responses (matches PatientRead from OpenAPI)&#10;export interface PatientRead extends Patient {}&#10;&#10;// Patient with appointments (matches PatientReadWithAppointments from OpenAPI)&#10;export interface PatientWithAppointments extends Patient {&#10;    appointments?: Appointment[] | null;&#10;}&#10;&#10;// Paginated response for patient list&#10;export interface PatientListResponse {&#10;    data: Patient[];&#10;    total: number;&#10;    limit: number;&#10;    offset: number;&#10;}&#10;&#10;// Patient summary statistics&#10;export interface PatientSummary {&#10;    total_patients: number;&#10;    new_patients: number;&#10;    patients_with_follow_up: number;&#10;    patients_with_email: number;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types/Settings.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types/Settings.ts" />
              <option name="originalContent" value="// filepath: /home/imari/IdeaProjects/imari_fe2/src/types/Settings.ts&#10;&#10;export interface Settings {&#10;  // Localization&#10;  language: string;&#10;  country: string;&#10;  city: string;&#10;  timezone: string;&#10;  &#10;  // Clinic Information&#10;  clinicName: string;&#10;  clinicAddress: string;&#10;  clinicPhone: string;&#10;  clinicEmail: string;&#10;  &#10;  // Appointment Settings&#10;  appointmentDuration: number; // in minutes&#10;  workingHoursStart: string; // HH:MM format&#10;  workingHoursEnd: string; // HH:MM format&#10;  workingDays: string[]; // ['monday', 'tuesday', etc.]&#10;  &#10;  // Notification Settings&#10;  emailNotifications: boolean;&#10;  smsNotifications: boolean;&#10;  appointmentReminders: boolean;&#10;  reminderTimeBefore: number; // in minutes&#10;  &#10;  // Display Settings&#10;  dateFormat: string; // 'DD/MM/YYYY' | 'MM/DD/YYYY' | 'YYYY-MM-DD'&#10;  timeFormat: '12h' | '24h';&#10;  currency: string;&#10;  &#10;  // Weather Settings&#10;  showWeather: boolean;&#10;  temperatureUnit: 'celsius' | 'fahrenheit';&#10;}&#10;&#10;export interface SettingsUpdate {&#10;  [key: string]: any;&#10;}&#10;&#10;export interface Country {&#10;  code: string;&#10;  name: string;&#10;  cities: string[];&#10;}&#10;&#10;export interface Language {&#10;  code: string;&#10;  name: string;&#10;  nativeName: string;&#10;}&#10;" />
              <option name="updatedContent" value="// filepath: /home/imari/IdeaProjects/imari_fe2/src/types/Settings.ts&#10;&#10;export interface Settings {&#10;  // Clinic Information&#10;  clinic_name: string;&#10;  clinic_address: string;&#10;  clinic_phone: string;&#10;  clinic_email: string;&#10;  &#10;  // Appointment Settings&#10;  appointments_start_time: string; // HH:MM format&#10;  appointments_end_time: string; // HH:MM format&#10;  appointments_working_days: string[]; // ['Monday', 'Tuesday', etc.]&#10;  &#10;  // Notification Settings&#10;  notifications_email: boolean;&#10;  notifications_sms: boolean;&#10;  notifications_appointment_reminder: boolean;&#10;  notifications_reminder_time: number; // in minutes&#10;  &#10;  // Display Settings&#10;  display_date_format: string; // 'DD/MM/YYYY' | 'MM/DD/YYYY' | 'YYYY-MM-DD'&#10;  display_time_format: string; // '12h' | '24h'&#10;  display_currency: string;&#10;  display_temperature_unit: string; // 'celsius' | 'fahrenheit'&#10;  display_language: string;&#10;  &#10;  // IDs&#10;  id: string;&#10;  doctor_id: string;&#10;}&#10;&#10;export interface SettingsUpdate {&#10;  [key: string]: any;&#10;}&#10;&#10;export interface Country {&#10;  code: string;&#10;  name: string;&#10;  cities: string[];&#10;}&#10;&#10;export interface Language {&#10;  code: string;&#10;  name: string;&#10;  nativeName: string;&#10;}&#10;&#10;export interface SettingsFieldValues {&#10;  weekDays: string[];&#10;  dateFormats: string[];&#10;  timeFormats: string[];&#10;  currencies: string[];&#10;  temperatureUnits: string[];&#10;  languages: string[];&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>