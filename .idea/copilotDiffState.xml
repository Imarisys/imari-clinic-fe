<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/calendar/DayView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/calendar/DayView.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { Appointment, AppointmentStatus } from '../../types/Appointment';&#10;&#10;interface DayViewProps {&#10;  currentDate: Date;&#10;  appointments: Appointment[];&#10;  onTimeSlotClick: (date: string, time: string) =&gt; void;&#10;  onAppointmentClick: (appointment: Appointment) =&gt; void;&#10;  onAppointmentDrop?: (appointment: Appointment, newDate: string, newTime: string) =&gt; void;&#10;  getAppointmentDate: (apt: Appointment) =&gt; string;&#10;  formatAppointmentTime: (apt: Appointment) =&gt; string;&#10;  getAppointmentDuration: (apt: Appointment) =&gt; number;&#10;  getAppointmentBackgroundColor: (status: AppointmentStatus) =&gt; string;&#10;  getAppointmentTextColor: (status: AppointmentStatus) =&gt; string;&#10;  getPatientName: (apt: Appointment) =&gt; string;&#10;  // Add drag and drop props similar to WeeklyView&#10;  handleMouseUp: () =&gt; void;&#10;  handleMouseDown: (e: React.MouseEvent, date: string, time: string) =&gt; void;&#10;  handleMouseEnter: (date: string, time: string) =&gt; void;&#10;  isSlotSelected: (date: string, time: string) =&gt; boolean;&#10;  workingHours?: {&#10;    startTime: string;&#10;    endTime: string;&#10;  };&#10;  workingDays?: string[];&#10;}&#10;&#10;export const DayView: React.FC&lt;DayViewProps&gt; = ({&#10;  currentDate,&#10;  appointments,&#10;  onTimeSlotClick,&#10;  onAppointmentClick,&#10;  onAppointmentDrop,&#10;  getAppointmentDate,&#10;  formatAppointmentTime,&#10;  getAppointmentDuration,&#10;  getAppointmentBackgroundColor,&#10;  getAppointmentTextColor,&#10;  getPatientName,&#10;  handleMouseUp,&#10;  handleMouseDown,&#10;  handleMouseEnter,&#10;  isSlotSelected,&#10;  workingHours = { startTime: '08:00', endTime: '17:00' },&#10;  workingDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],&#10;}) =&gt; {&#10;  const [draggedAppointment, setDraggedAppointment] = React.useState&lt;Appointment | null&gt;(null);&#10;  const [dragPreviewPosition, setDragPreviewPosition] = React.useState&lt;{date: string, time: string} | null&gt;(null);&#10;&#10;  // Check if current date is a working day&#10;  const isWorkingDay = (): boolean =&gt; {&#10;    const dayName = currentDate.toLocaleDateString('en-US', { weekday: 'long' });&#10;    return workingDays.includes(dayName);&#10;  };&#10;&#10;  const isWorking = isWorkingDay();&#10;&#10;  // Generate time slots based on working hours&#10;  const generateTimeSlots = () =&gt; {&#10;    const startHour = parseInt(workingHours.startTime.split(':')[0]);&#10;    const endHour = parseInt(workingHours.endTime.split(':')[0]);&#10;    const totalHours = endHour - startHour;&#10;    const slotsPerHour = 4; // 15-minute intervals&#10;    const totalSlots = totalHours * slotsPerHour;&#10;&#10;    return Array.from({ length: totalSlots }, (_, i) =&gt; {&#10;      const hour = Math.floor(i / slotsPerHour) + startHour;&#10;      const minutes = (i % slotsPerHour) * 15;&#10;      return `${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;&#10;    });&#10;  };&#10;&#10;  const timeSlots = generateTimeSlots();&#10;&#10;  // Handle appointment drag start&#10;  const handleAppointmentDragStart = (e: React.DragEvent, appointment: Appointment) =&gt; {&#10;    e.stopPropagation();&#10;    setDraggedAppointment(appointment);&#10;    e.dataTransfer.setData('text/plain', appointment.id);&#10;    e.dataTransfer.effectAllowed = 'move';&#10;  };&#10;&#10;  // Handle appointment drag end&#10;  const handleAppointmentDragEnd = () =&gt; {&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drop on time slot&#10;  const handleTimeSlotDrop = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.stopPropagation();&#10;&#10;    if (draggedAppointment &amp;&amp; onAppointmentDrop) {&#10;      onAppointmentDrop(draggedAppointment, date, time);&#10;    }&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drag over to allow drop and show preview&#10;  const handleTimeSlotDragOver = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.dataTransfer.dropEffect = 'move';&#10;&#10;    if (draggedAppointment) {&#10;      setDragPreviewPosition({ date, time });&#10;    }&#10;  };&#10;&#10;  // Handle drag leave to hide preview when leaving time slot&#10;  const handleTimeSlotDragLeave = (e: React.DragEvent) =&gt; {&#10;    // Only hide preview if we're actually leaving the time slot area&#10;    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();&#10;    const { clientX, clientY } = e;&#10;&#10;    if (clientX &lt; rect.left || clientX &gt; rect.right || clientY &lt; rect.top || clientY &gt; rect.bottom) {&#10;      setDragPreviewPosition(null);&#10;    }&#10;  };&#10;&#10;  const dayStr = currentDate.toISOString().split('T')[0];&#10;&#10;  return (&#10;    &lt;div className=&quot;card overflow-hidden&quot;&gt;&#10;      {/* Day header - similar to week header but for a single day */}&#10;      &lt;div className=&quot;grid grid-cols-[80px_1fr] border-b border-gray-300&quot;&gt;&#10;        &lt;div className=&quot;p-2&quot;&gt;&lt;/div&gt;&#10;        &lt;div&#10;          className={`p-4 text-center slide-up-element ${&#10;            currentDate.toDateString() === new Date().toDateString()&#10;              ? 'bg-primary-50 border-primary-200'&#10;              : 'bg-red-50'&#10;          }`}&#10;          style={{ animationDelay: '0.05s' }}&#10;        &gt;&#10;          &lt;p className={`text-sm ${&#10;            isWorking ? 'text-neutral-500' : 'text-red-400'&#10;          }`}&gt;&#10;            isWorking ? 'text-neutral-500' : 'text-red-400'&#10;              : 'text-red-600'&#10;          }`}&gt;&#10;            {currentDate.getDate()}&#10;          &lt;/p&gt;&#10;          {!isWorking &amp;&amp; (&#10;              ? 'text-primary-600'&#10;      &lt;/div&gt;&#10;&#10;      {/* Time slots grid - 15 minute precision with drag and drop */}&#10;      &lt;div&#10;        className=&quot;flex-1 overflow-y-auto&quot;&#10;        onMouseUp={handleMouseUp}&#10;          {!isWorking &amp;&amp; (&#10;            &lt;p className=&quot;text-xs text-red-500 mt-1&quot;&gt;Closed&lt;/p&gt;&#10;          )}&#10;        onMouseLeave={handleMouseUp}&#10;        style={{ height: 'calc(100vh - 280px)' }}&#10;      &gt;&#10;        {timeSlots.map((time, timeIndex) =&gt; {&#10;          const isSelected = isSlotSelected(dayStr, time);&#10;          const dayAppointments = appointments.filter(apt =&gt; {&#10;            const aptDate = getAppointmentDate(apt);&#10;            const aptTime = formatAppointmentTime(apt);&#10;            const aptHour = parseInt(aptTime.split(':')[0]);&#10;            const aptMinute = parseInt(aptTime.split(':')[1]);&#10;            const timeHour = parseInt(time.split(':')[0]);&#10;            const timeMinute = parseInt(time.split(':')[1]);&#10;&#10;            // Only show appointment in its starting time slot&#10;            return aptDate === dayStr &amp;&amp;&#10;              aptHour === timeHour &amp;&amp;&#10;              aptMinute === timeMinute;&#10;          });&#10;&#10;          // Define border classes for visual hierarchy&#10;          let borderBottomClass;&#10;          if (timeIndex % 4 === 3) {&#10;            borderBottomClass = 'border-b border-gray-300'; // Hour boundaries&#10;          } else if (timeIndex % 2 === 1) {&#10;            borderBottomClass = 'border-b border-gray-200'; // 30-minute boundaries&#10;          } else {&#10;            borderBottomClass = 'border-b border-gray-100'; // 15-minute boundaries&#10;          }&#10;&#10;          // Apply red hue to non-working days&#10;          const baseBackground = isWorking ? '' : 'bg-red-50/30';&#10;          const hoverBackground = isWorking ? 'hover:bg-primary-50' : 'hover:bg-red-100/50';&#10;&#10;          return (&#10;            &lt;div&#10;              key={time}&#10;              className={`grid grid-cols-[80px_1fr] transition-all duration-300 slide-up-element ${hoverBackground}`}&#10;              style={{ animationDelay: `${timeIndex * 0.02}s` }}&#10;            &gt;&#10;              {/* Time label column - show hour labels in the middle of each hour block */}&#10;              &lt;div className=&quot;p-2 text-right text-sm text-neutral-500 bg-neutral-50 border-r border-gray-300 relative&quot;&gt;&#10;                {timeIndex % 4 === 1 ? ( // Show in the second slot (middle of the hour)&#10;                  &lt;span className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2&quot;&gt;&#10;                    {time.split(':')[0]}:00&#10;                  &lt;/span&gt;&#10;                ) : null}&#10;              &lt;/div&gt;&#10;&#10;              {/* Time slot column with drag and drop */}&#10;              &lt;div&#10;                className={`p-1 min-h-[15px] relative group cursor-pointer ${borderBottomClass} ${baseBackground} ${isSelected ? 'bg-blue-200 border-blue-400' : ''}`}&#10;                style={{&#10;                  backgroundColor: isSelected ? 'rgba(59, 130, 246, 0.3)' : '',&#10;                  borderColor: isSelected ? '#3b82f6' : ''&#10;                }}&#10;                onClick={() =&gt; onTimeSlotClick(dayStr, time)}&#10;                onMouseDown={(e) =&gt; handleMouseDown(e, dayStr, time)}&#10;                onMouseEnter={() =&gt; handleMouseEnter(dayStr, time)}&#10;                onDragOver={(e) =&gt; handleTimeSlotDragOver(e, dayStr, time)}&#10;                onDrop={(e) =&gt; handleTimeSlotDrop(e, dayStr, time)}&#10;                onDragLeave={handleTimeSlotDragLeave}&#10;              &gt;&#10;                {/* Appointments in this time slot */}&#10;                {dayAppointments.map((appointment, aptIndex) =&gt; (&#10;                  &lt;div&#10;                    key={appointment.id}&#10;                    className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-medium hover:opacity-80 transition-opacity cursor-pointer z-10&quot;&#10;                    style={{&#10;                      top: `${aptIndex * 2}px`,&#10;                      height: `${getAppointmentDuration(appointment)}px`,&#10;                      display: 'flex',&#10;                      flexDirection: 'column',&#10;                      justifyContent: 'center',&#10;                      backgroundColor: getAppointmentBackgroundColor(appointment.status),&#10;                      color: getAppointmentTextColor(appointment.status)&#10;                    }}&#10;                    onClick={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                      onAppointmentClick(appointment);&#10;                    }}&#10;                    onMouseEnter={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                    }}&#10;                    onMouseDown={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                    }}&#10;                    draggable&#10;                    onDragStart={(e) =&gt; handleAppointmentDragStart(e, appointment)}&#10;                    onDragEnd={handleAppointmentDragEnd}&#10;                  &gt;&#10;                    &lt;p className=&quot;font-semibold truncate&quot;&gt;{getPatientName(appointment)}&lt;/p&gt;&#10;                    &lt;p className=&quot;opacity-90 truncate&quot;&gt;{appointment.type}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;&#10;                {/* Drag preview shadow - shows where appointment will be dropped */}&#10;                {draggedAppointment &amp;&amp; dragPreviewPosition &amp;&amp;&#10;                 dragPreviewPosition.date === dayStr &amp;&amp; dragPreviewPosition.time === time &amp;&amp; (&#10;                  &lt;div&#10;                    className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-lg border-2 border-dashed border-primary-400 bg-primary-100/50 pointer-events-none z-20&quot;&#10;                    style={{&#10;                      top: '1px',&#10;                      height: `${getAppointmentDuration(draggedAppointment)}px`,&#10;                      display: 'flex',&#10;                      flexDirection: 'column',&#10;                      justifyContent: 'center',&#10;                      backdropFilter: 'blur(1px)',&#10;                    }}&#10;                  &gt;&#10;                    &lt;div className=&quot;text-primary-700 font-medium opacity-75&quot;&gt;&#10;                      {getPatientName(draggedAppointment)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-primary-600 text-xs opacity-60&quot;&gt;&#10;                      Moving...&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Hover effect */}&#10;                &lt;div className={`absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-lg ${&#10;                  isWorking ? 'bg-primary-100/30' : 'bg-red-100/30'&#10;                }`}&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Appointment, AppointmentStatus } from '../../types/Appointment';&#10;&#10;interface DayViewProps {&#10;  currentDate: Date;&#10;  appointments: Appointment[];&#10;  onTimeSlotClick: (date: string, time: string) =&gt; void;&#10;  onAppointmentClick: (appointment: Appointment) =&gt; void;&#10;  onAppointmentDrop?: (appointment: Appointment, newDate: string, newTime: string) =&gt; void;&#10;  getAppointmentDate: (apt: Appointment) =&gt; string;&#10;  formatAppointmentTime: (apt: Appointment) =&gt; string;&#10;  getAppointmentDuration: (apt: Appointment) =&gt; number;&#10;  getAppointmentBackgroundColor: (status: AppointmentStatus) =&gt; string;&#10;  getAppointmentTextColor: (status: AppointmentStatus) =&gt; string;&#10;  getPatientName: (apt: Appointment) =&gt; string;&#10;  // Add drag and drop props similar to WeeklyView&#10;  handleMouseUp: () =&gt; void;&#10;  handleMouseDown: (e: React.MouseEvent, date: string, time: string) =&gt; void;&#10;  handleMouseEnter: (date: string, time: string) =&gt; void;&#10;  isSlotSelected: (date: string, time: string) =&gt; boolean;&#10;  workingHours?: {&#10;    startTime: string;&#10;    endTime: string;&#10;  };&#10;  workingDays?: string[];&#10;}&#10;&#10;export const DayView: React.FC&lt;DayViewProps&gt; = ({&#10;  currentDate,&#10;  appointments,&#10;  onTimeSlotClick,&#10;  onAppointmentClick,&#10;  onAppointmentDrop,&#10;  getAppointmentDate,&#10;  formatAppointmentTime,&#10;  getAppointmentDuration,&#10;  getAppointmentBackgroundColor,&#10;  getAppointmentTextColor,&#10;  getPatientName,&#10;  handleMouseUp,&#10;  handleMouseDown,&#10;  handleMouseEnter,&#10;  isSlotSelected,&#10;  workingHours = { startTime: '08:00', endTime: '17:00' },&#10;  workingDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],&#10;}) =&gt; {&#10;  const [draggedAppointment, setDraggedAppointment] = React.useState&lt;Appointment | null&gt;(null);&#10;  const [dragPreviewPosition, setDragPreviewPosition] = React.useState&lt;{date: string, time: string} | null&gt;(null);&#10;&#10;  // Check if current date is a working day&#10;  const isWorkingDay = (): boolean =&gt; {&#10;    const dayName = currentDate.toLocaleDateString('en-US', { weekday: 'long' });&#10;    return workingDays.includes(dayName);&#10;  };&#10;&#10;  const isWorking = isWorkingDay();&#10;&#10;  // Generate time slots based on working hours&#10;  const generateTimeSlots = () =&gt; {&#10;    const startHour = parseInt(workingHours.startTime.split(':')[0]);&#10;    const endHour = parseInt(workingHours.endTime.split(':')[0]);&#10;    const totalHours = endHour - startHour;&#10;    const slotsPerHour = 4; // 15-minute intervals&#10;    const totalSlots = totalHours * slotsPerHour;&#10;&#10;    return Array.from({ length: totalSlots }, (_, i) =&gt; {&#10;      const hour = Math.floor(i / slotsPerHour) + startHour;&#10;      const minutes = (i % slotsPerHour) * 15;&#10;      return `${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;&#10;    });&#10;  };&#10;&#10;  const timeSlots = generateTimeSlots();&#10;&#10;  // Handle appointment drag start&#10;  const handleAppointmentDragStart = (e: React.DragEvent, appointment: Appointment) =&gt; {&#10;    e.stopPropagation();&#10;    setDraggedAppointment(appointment);&#10;    e.dataTransfer.setData('text/plain', appointment.id);&#10;    e.dataTransfer.effectAllowed = 'move';&#10;  };&#10;&#10;  // Handle appointment drag end&#10;  const handleAppointmentDragEnd = () =&gt; {&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drop on time slot&#10;  const handleTimeSlotDrop = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.stopPropagation();&#10;&#10;    if (draggedAppointment &amp;&amp; onAppointmentDrop) {&#10;      onAppointmentDrop(draggedAppointment, date, time);&#10;    }&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drag over to allow drop and show preview&#10;  const handleTimeSlotDragOver = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.dataTransfer.dropEffect = 'move';&#10;&#10;    if (draggedAppointment) {&#10;      setDragPreviewPosition({ date, time });&#10;    }&#10;  };&#10;&#10;  // Handle drag leave to hide preview when leaving time slot&#10;  const handleTimeSlotDragLeave = (e: React.DragEvent) =&gt; {&#10;    // Only hide preview if we're actually leaving the time slot area&#10;    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();&#10;    const { clientX, clientY } = e;&#10;&#10;    if (clientX &lt; rect.left || clientX &gt; rect.right || clientY &lt; rect.top || clientY &gt; rect.bottom) {&#10;      setDragPreviewPosition(null);&#10;    }&#10;  };&#10;&#10;  const dayStr = currentDate.toISOString().split('T')[0];&#10;&#10;  return (&#10;    &lt;div className=&quot;card overflow-hidden&quot;&gt;&#10;      {/* Day header - similar to week header but for a single day */}&#10;      &lt;div className=&quot;grid grid-cols-[80px_1fr] border-b border-gray-300&quot;&gt;&#10;        &lt;div className=&quot;p-2&quot;&gt;&lt;/div&gt;&#10;        &lt;div&#10;          className={`p-4 text-center slide-up-element ${&#10;            currentDate.toDateString() === new Date().toDateString()&#10;              ? isWorking&#10;                ? 'bg-primary-50 border-primary-200'&#10;                : 'bg-red-200'&#10;              : isWorking&#10;              ? 'bg-neutral-50'&#10;              : 'bg-red-50'&#10;          }`}&#10;          style={{ animationDelay: '0.05s' }}&#10;        &gt;&#10;          &lt;p className={`text-sm ${&#10;            currentDate.toDateString() === new Date().toDateString()&#10;              ? isWorking &#10;                ? 'text-neutral-500'&#10;                : 'text-red-600'&#10;              : isWorking &#10;              ? 'text-neutral-500' &#10;              : 'text-red-400'&#10;          }`}&gt;&#10;            {currentDate.toLocaleDateString('en-US', { weekday: 'short' })}&#10;          &lt;/p&gt;&#10;          &lt;p className={`text-lg font-semibold ${&#10;            currentDate.toDateString() === new Date().toDateString()&#10;              ? isWorking&#10;                ? 'text-primary-600'&#10;                : 'text-red-700'&#10;              : isWorking&#10;              ? 'text-neutral-800'&#10;              : 'text-red-600'&#10;          }`}&gt;&#10;            {currentDate.getDate()}&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Time slots grid - 15 minute precision with drag and drop */}&#10;      &lt;div&#10;        className=&quot;flex-1 overflow-y-auto&quot;&#10;        onMouseUp={handleMouseUp}&#10;        onMouseLeave={handleMouseUp}&#10;        style={{ height: 'calc(100vh - 280px)' }}&#10;      &gt;&#10;        {timeSlots.map((time, timeIndex) =&gt; {&#10;          const isSelected = isSlotSelected(dayStr, time);&#10;          const dayAppointments = appointments.filter(apt =&gt; {&#10;            const aptDate = getAppointmentDate(apt);&#10;            const aptTime = formatAppointmentTime(apt);&#10;            const aptHour = parseInt(aptTime.split(':')[0]);&#10;            const aptMinute = parseInt(aptTime.split(':')[1]);&#10;            const timeHour = parseInt(time.split(':')[0]);&#10;            const timeMinute = parseInt(time.split(':')[1]);&#10;&#10;            // Only show appointment in its starting time slot&#10;            return aptDate === dayStr &amp;&amp;&#10;              aptHour === timeHour &amp;&amp;&#10;              aptMinute === timeMinute;&#10;          });&#10;&#10;          // Define border classes for visual hierarchy&#10;          let borderBottomClass;&#10;          if (timeIndex % 4 === 3) {&#10;            borderBottomClass = 'border-b border-gray-300'; // Hour boundaries&#10;          } else if (timeIndex % 2 === 1) {&#10;            borderBottomClass = 'border-b border-gray-200'; // 30-minute boundaries&#10;          } else {&#10;            borderBottomClass = 'border-b border-gray-100'; // 15-minute boundaries&#10;          }&#10;&#10;          // Apply red hue to non-working days&#10;          const baseBackground = isWorking ? '' : 'bg-red-50/30';&#10;          const hoverBackground = isWorking ? 'hover:bg-primary-50' : 'hover:bg-red-100/50';&#10;&#10;          return (&#10;            &lt;div&#10;              key={time}&#10;              className={`grid grid-cols-[80px_1fr] transition-all duration-300 slide-up-element ${hoverBackground}`}&#10;              style={{ animationDelay: `${timeIndex * 0.02}s` }}&#10;            &gt;&#10;              {/* Time label column - show hour labels in the middle of each hour block */}&#10;              &lt;div className=&quot;p-2 text-right text-sm text-neutral-500 bg-neutral-50 border-r border-gray-300 relative&quot;&gt;&#10;                {timeIndex % 4 === 1 ? ( // Show in the second slot (middle of the hour)&#10;                  &lt;span className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2&quot;&gt;&#10;                    {time.split(':')[0]}:00&#10;                  &lt;/span&gt;&#10;                ) : null}&#10;              &lt;/div&gt;&#10;&#10;              {/* Time slot column with drag and drop */}&#10;              &lt;div&#10;                className={`p-1 min-h-[15px] relative group cursor-pointer ${borderBottomClass} ${baseBackground} ${isSelected ? 'bg-blue-200 border-blue-400' : ''}`}&#10;                style={{&#10;                  backgroundColor: isSelected ? 'rgba(59, 130, 246, 0.3)' : '',&#10;                  borderColor: isSelected ? '#3b82f6' : ''&#10;                }}&#10;                onClick={() =&gt; onTimeSlotClick(dayStr, time)}&#10;                onMouseDown={(e) =&gt; handleMouseDown(e, dayStr, time)}&#10;                onMouseEnter={() =&gt; handleMouseEnter(dayStr, time)}&#10;                onDragOver={(e) =&gt; handleTimeSlotDragOver(e, dayStr, time)}&#10;                onDrop={(e) =&gt; handleTimeSlotDrop(e, dayStr, time)}&#10;                onDragLeave={handleTimeSlotDragLeave}&#10;              &gt;&#10;                {/* Appointments in this time slot */}&#10;                {dayAppointments.map((appointment, aptIndex) =&gt; (&#10;                  &lt;div&#10;                    key={appointment.id}&#10;                    className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-medium hover:opacity-80 transition-opacity cursor-pointer z-10&quot;&#10;                    style={{&#10;                      top: `${aptIndex * 2}px`,&#10;                      height: `${getAppointmentDuration(appointment)}px`,&#10;                      display: 'flex',&#10;                      flexDirection: 'column',&#10;                      justifyContent: 'center',&#10;                      backgroundColor: getAppointmentBackgroundColor(appointment.status),&#10;                      color: getAppointmentTextColor(appointment.status)&#10;                    }}&#10;                    onClick={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                      onAppointmentClick(appointment);&#10;                    }}&#10;                    onMouseEnter={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                    }}&#10;                    onMouseDown={(e) =&gt; {&#10;                      e.stopPropagation();&#10;                    }}&#10;                    draggable&#10;                    onDragStart={(e) =&gt; handleAppointmentDragStart(e, appointment)}&#10;                    onDragEnd={handleAppointmentDragEnd}&#10;                  &gt;&#10;                    &lt;p className=&quot;font-semibold truncate&quot;&gt;{getPatientName(appointment)}&lt;/p&gt;&#10;                    &lt;p className=&quot;opacity-90 truncate&quot;&gt;{appointment.type}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;&#10;                {/* Drag preview shadow - shows where appointment will be dropped */}&#10;                {draggedAppointment &amp;&amp; dragPreviewPosition &amp;&amp;&#10;                 dragPreviewPosition.date === dayStr &amp;&amp; dragPreviewPosition.time === time &amp;&amp; (&#10;                  &lt;div&#10;                    className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-lg border-2 border-dashed border-primary-400 bg-primary-100/50 pointer-events-none z-20&quot;&#10;                    style={{&#10;                      top: '1px',&#10;                      height: `${getAppointmentDuration(draggedAppointment)}px`,&#10;                      display: 'flex',&#10;                      flexDirection: 'column',&#10;                      justifyContent: 'center',&#10;                      backdropFilter: 'blur(1px)',&#10;                    }}&#10;                  &gt;&#10;                    &lt;div className=&quot;text-primary-700 font-medium opacity-75&quot;&gt;&#10;                      {getPatientName(draggedAppointment)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-primary-600 text-xs opacity-60&quot;&gt;&#10;                      Moving...&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Hover effect */}&#10;                &lt;div className={`absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-lg ${&#10;                  isWorking ? 'bg-primary-100/30' : 'bg-red-100/30'&#10;                }`}&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/calendar/MonthView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/calendar/MonthView.tsx" />
              <option name="originalContent" value="interface AppointmentData {&#10;  id: string;&#10;  patientName: string;&#10;  time: string;&#10;  duration: number;&#10;  type: string;&#10;  status: string;&#10;  title: string;&#10;}&#10;&#10;interface MonthViewProps {&#10;  currentDate: Date;&#10;  appointments: Record&lt;string, AppointmentData[]&gt;;&#10;  onAppointmentClick?: (appointmentId: string) =&gt; void;&#10;  onDayClick?: (date: Date) =&gt; void;&#10;}&#10;&#10;export const MonthView = ({ currentDate, appointments, onAppointmentClick, onDayClick }: MonthViewProps) =&gt; {&#10;  const getMonthDays = (date: Date): Date[] =&gt; {&#10;    const year = date.getFullYear();&#10;    const month = date.getMonth();&#10;    const firstDay = new Date(year, month, 1);&#10;&#10;    // Get the first day to display (might be from previous month)&#10;    const startDate = new Date(firstDay);&#10;    startDate.setDate(firstDay.getDate() - firstDay.getDay());&#10;&#10;    const days: Date[] = [];&#10;    const currentDay = new Date(startDate);&#10;&#10;    // Generate 6 weeks of dates&#10;    for (let i = 0; i &lt; 42; i++) {&#10;      days.push(new Date(currentDay));&#10;      currentDay.setDate(currentDay.getDate() + 1);&#10;    }&#10;&#10;    return days;&#10;  };&#10;&#10;  const isToday = (date: Date): boolean =&gt; {&#10;    const today = new Date();&#10;    return date.toDateString() === today.toDateString();&#10;  };&#10;&#10;  const isCurrentMonth = (date: Date): boolean =&gt; {&#10;    return date.getMonth() === currentDate.getMonth();&#10;  };&#10;&#10;  const getAppointmentsForDate = (date: string): AppointmentData[] =&gt; {&#10;    return appointments[date] || [];&#10;  };&#10;&#10;  const getStatusColor = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'Booked':&#10;        return {&#10;          bg: 'bg-blue-100',&#10;          text: 'text-blue-800'&#10;        };&#10;      case 'Completed':&#10;        return {&#10;          bg: 'bg-green-100',&#10;          text: 'text-green-800'&#10;        };&#10;      case 'Cancelled':&#10;        return {&#10;          bg: 'bg-red-100',&#10;          text: 'text-red-800'&#10;        };&#10;      case 'No Show':&#10;        return {&#10;          bg: 'bg-orange-100',&#10;          text: 'text-orange-800'&#10;        };&#10;      default:&#10;        return {&#10;          bg: 'bg-gray-100',&#10;          text: 'text-gray-800'&#10;        };&#10;    }&#10;  };&#10;&#10;  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];&#10;  const monthDays = getMonthDays(currentDate);&#10;&#10;  return (&#10;    &lt;div className=&quot;w-full h-full flex flex-col&quot;&gt;&#10;      &lt;div className=&quot;grid grid-cols-7 gap-px bg-gray-200 flex-shrink-0&quot;&gt;&#10;        {weekDays.map((day, index) =&gt; (&#10;          &lt;div&#10;            key={day}&#10;            className=&quot;bg-white p-2 text-sm font-medium text-gray-600 text-center slide-up-element&quot;&#10;            style={{ animationDelay: `${index * 0.05}s` }}&#10;          &gt;&#10;            {day}&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid grid-cols-7 gap-px bg-gray-200 flex-1&quot; style={{ height: 'calc(100vh - 320px)' }}&gt;&#10;        {monthDays.map((date, index) =&gt; {&#10;          const dateString = date.toISOString().split('T')[0];&#10;          const dayAppointments = getAppointmentsForDate(dateString);&#10;&#10;          return (&#10;            &lt;div&#10;              key={index}&#10;              className={`bg-white min-h-[120px] p-2 border-t relative cursor-pointer hover:bg-gray-50 transition-colors slide-up-element ${&#10;                isCurrentMonth(date) ? 'bg-white' : 'bg-gray-50'&#10;              }`}&#10;              style={{ animationDelay: `${index * 0.02}s` }}&#10;              onClick={() =&gt; onDayClick &amp;&amp; onDayClick(date)}&#10;            &gt;&#10;              &lt;div className={`text-sm ${&#10;                isToday(date)&#10;                  ? 'bg-blue-600 text-white w-6 h-6 rounded-full flex items-center justify-center'&#10;                  : isCurrentMonth(date)&#10;                    ? 'text-gray-900'&#10;                    : 'text-gray-400'&#10;              }`}&gt;&#10;                {date.getDate()}&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;mt-1 space-y-1&quot;&gt;&#10;                {dayAppointments.slice(0, 3).map((apt, aptIndex) =&gt; {&#10;                  const statusColors = getStatusColor(apt.status);&#10;                  return (&#10;                    &lt;div&#10;                      key={apt.id}&#10;                      className={`text-xs ${statusColors.bg} ${statusColors.text} p-1 rounded truncate cursor-pointer hover:opacity-80 transition-opacity slide-up-element`}&#10;                      style={{ animationDelay: `${(index * 0.02) + (aptIndex * 0.01)}s` }}&#10;                      onClick={(e) =&gt; {&#10;                        e.stopPropagation(); // Prevent day click when clicking appointment&#10;                        onAppointmentClick &amp;&amp; onAppointmentClick(apt.id);&#10;                      }}&#10;                    &gt;&#10;                      &lt;div className=&quot;font-medium&quot;&gt;{apt.time}&lt;/div&gt;&#10;                      &lt;div className=&quot;truncate&quot;&gt;{apt.patientName}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  );&#10;                })}&#10;                {dayAppointments.length &gt; 3 &amp;&amp; (&#10;                  &lt;div&#10;                    className=&quot;text-xs text-gray-500 pl-1 slide-up-element&quot;&#10;                    style={{ animationDelay: `${(index * 0.02) + 0.03}s` }}&#10;                  &gt;&#10;                    +{dayAppointments.length - 3} more&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="interface AppointmentData {&#10;  id: string;&#10;  patientName: string;&#10;  time: string;&#10;  duration: number;&#10;  type: string;&#10;  status: string;&#10;  title: string;&#10;}&#10;&#10;interface MonthViewProps {&#10;  currentDate: Date;&#10;  appointments: Record&lt;string, AppointmentData[]&gt;;&#10;  onAppointmentClick?: (appointmentId: string) =&gt; void;&#10;  onDayClick?: (date: Date) =&gt; void;&#10;}&#10;&#10;export const MonthView = ({ currentDate, appointments, onAppointmentClick, onDayClick }: MonthViewProps) =&gt; {&#10;  const getMonthDays = (date: Date): Date[] =&gt; {&#10;    const year = date.getFullYear();&#10;    const month = date.getMonth();&#10;    const firstDay = new Date(year, month, 1);&#10;&#10;    // Get the first day to display (might be from previous month)&#10;    const startDate = new Date(firstDay);&#10;    startDate.setDate(firstDay.getDate() - firstDay.getDay());&#10;&#10;    const days: Date[] = [];&#10;    const currentDay = new Date(startDate);&#10;&#10;    // Generate 6 weeks of dates&#10;    for (let i = 0; i &lt; 42; i++) {&#10;      days.push(new Date(currentDay));&#10;      currentDay.setDate(currentDay.getDate() + 1);&#10;    }&#10;&#10;    return days;&#10;  };&#10;&#10;  const isToday = (date: Date): boolean =&gt; {&#10;    const today = new Date();&#10;    return date.toDateString() === today.toDateString();&#10;  };&#10;&#10;  const isCurrentMonth = (date: Date): boolean =&gt; {&#10;    return date.getMonth() === currentDate.getMonth();&#10;  };&#10;&#10;  const getAppointmentsForDate = (date: string): AppointmentData[] =&gt; {&#10;    return appointments[date] || [];&#10;  };&#10;&#10;  const getStatusColor = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'Booked':&#10;        return {&#10;          bg: 'bg-blue-100',&#10;          text: 'text-blue-800'&#10;        };&#10;      case 'Completed':&#10;        return {&#10;          bg: 'bg-green-100',&#10;          text: 'text-green-800'&#10;        };&#10;      case 'Cancelled':&#10;        return {&#10;          bg: 'bg-red-100',&#10;          text: 'text-red-800'&#10;        };&#10;      case 'No Show':&#10;        return {&#10;          bg: 'bg-orange-100',&#10;          text: 'text-orange-800'&#10;        };&#10;      default:&#10;        return {&#10;          bg: 'bg-gray-100',&#10;          text: 'text-gray-800'&#10;        };&#10;    }&#10;  };&#10;&#10;  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];&#10;  const monthDays = getMonthDays(currentDate);&#10;&#10;  return (&#10;    &lt;div className=&quot;w-full h-full flex flex-col&quot;&gt;&#10;      &lt;div className=&quot;grid grid-cols-7 gap-px bg-gray-200 flex-shrink-0&quot;&gt;&#10;        {weekDays.map((day, index) =&gt; (&#10;          &lt;div&#10;            key={day}&#10;            className=&quot;bg-white p-2 text-sm font-medium text-gray-600 text-center slide-up-element&quot;&#10;            style={{ animationDelay: `${index * 0.02}s` }}&#10;          &gt;&#10;            {day}&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid grid-cols-7 gap-px bg-gray-200 flex-1&quot; style={{ height: 'calc(100vh - 320px)' }}&gt;&#10;        {monthDays.map((date, index) =&gt; {&#10;          const dateString = date.toISOString().split('T')[0];&#10;          const dayAppointments = getAppointmentsForDate(dateString);&#10;&#10;          return (&#10;            &lt;div&#10;              key={index}&#10;              className={`bg-white min-h-[120px] p-2 border-t relative cursor-pointer hover:bg-gray-50 transition-colors slide-up-element ${&#10;                isCurrentMonth(date) ? 'bg-white' : 'bg-gray-50'&#10;              }`}&#10;              style={{ animationDelay: `${index * 0.01}s` }}&#10;              onClick={() =&gt; onDayClick &amp;&amp; onDayClick(date)}&#10;            &gt;&#10;              &lt;div className={`text-sm ${&#10;                isToday(date)&#10;                  ? 'bg-blue-600 text-white w-6 h-6 rounded-full flex items-center justify-center'&#10;                  : isCurrentMonth(date)&#10;                    ? 'text-gray-900'&#10;                    : 'text-gray-400'&#10;              }`}&gt;&#10;                {date.getDate()}&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;mt-1 space-y-1&quot;&gt;&#10;                {dayAppointments.slice(0, 3).map((apt, aptIndex) =&gt; {&#10;                  const statusColors = getStatusColor(apt.status);&#10;                  return (&#10;                    &lt;div&#10;                      key={apt.id}&#10;                      className={`text-xs ${statusColors.bg} ${statusColors.text} p-1 rounded truncate cursor-pointer hover:opacity-80 transition-opacity slide-up-element`}&#10;                      style={{ animationDelay: `${(index * 0.01) + (aptIndex * 0.005)}s` }}&#10;                      onClick={(e) =&gt; {&#10;                        e.stopPropagation(); // Prevent day click when clicking appointment&#10;                        onAppointmentClick &amp;&amp; onAppointmentClick(apt.id);&#10;                      }}&#10;                    &gt;&#10;                      &lt;div className=&quot;font-medium&quot;&gt;{apt.time}&lt;/div&gt;&#10;                      &lt;div className=&quot;truncate&quot;&gt;{apt.patientName}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  );&#10;                })}&#10;                {dayAppointments.length &gt; 3 &amp;&amp; (&#10;                  &lt;div &#10;                    className=&quot;text-xs text-gray-500 pl-1 slide-up-element&quot;&#10;                    style={{ animationDelay: `${(index * 0.01) + 0.015}s` }}&#10;                  &gt;&#10;                    +{dayAppointments.length - 3} more&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/calendar/WeeklyView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/calendar/WeeklyView.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { Appointment, AppointmentStatus } from '../../types/Appointment';&#10;&#10;interface WeeklyViewProps {&#10;  isSlotSelected: (date: string, time: string) =&gt; boolean;&#10;  currentDate: Date;&#10;  appointments: Appointment[];&#10;  handleMouseUp: () =&gt; void;&#10;  handleMouseDown: (e: React.MouseEvent, date: string, time: string) =&gt; void;&#10;  handleMouseEnter: (date: string, time: string) =&gt; void;&#10;  onSelectSlot: (date: string, time: string) =&gt; void;&#10;  onAppointmentClick: (appointment: Appointment) =&gt; void;&#10;  onAppointmentDrop?: (appointment: Appointment, newDate: string, newTime: string) =&gt; void;&#10;  onDayClick?: (date: Date) =&gt; void;&#10;  getAppointmentDate: (apt: Appointment) =&gt; string;&#10;  formatAppointmentTime: (apt: Appointment) =&gt; string;&#10;  getAppointmentDuration: (apt: Appointment) =&gt; number;&#10;  getAppointmentBackgroundColor: (status: AppointmentStatus) =&gt; string;&#10;  getAppointmentTextColor: (status: AppointmentStatus) =&gt; string;&#10;  workingHours?: {&#10;    startTime: string;&#10;    endTime: string;&#10;  };&#10;  workingDays?: string[];&#10;}&#10;&#10;export const WeeklyView: React.FC&lt;WeeklyViewProps&gt; = ({&#10;  currentDate,&#10;  appointments,&#10;  handleMouseUp,&#10;  handleMouseDown,&#10;  handleMouseEnter,&#10;  onSelectSlot,&#10;  onAppointmentClick,&#10;  isSlotSelected,&#10;  getAppointmentDate,&#10;  formatAppointmentTime,&#10;  getAppointmentDuration,&#10;  getAppointmentBackgroundColor,&#10;  getAppointmentTextColor,&#10;  onAppointmentDrop,&#10;  onDayClick,&#10;  workingHours = { startTime: '08:00', endTime: '17:00' },&#10;  workingDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],&#10;}) =&gt; {&#10;  const [draggedAppointment, setDraggedAppointment] = React.useState&lt;Appointment | null&gt;(null);&#10;  const [dragPreviewPosition, setDragPreviewPosition] = React.useState&lt;{date: string, time: string} | null&gt;(null);&#10;&#10;  // Handle appointment drag start&#10;  const handleAppointmentDragStart = (e: React.DragEvent, appointment: Appointment) =&gt; {&#10;    e.stopPropagation();&#10;    setDraggedAppointment(appointment);&#10;    e.dataTransfer.setData('text/plain', appointment.id);&#10;    e.dataTransfer.effectAllowed = 'move';&#10;  };&#10;&#10;  // Handle appointment drag end&#10;  const handleAppointmentDragEnd = () =&gt; {&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drop on time slot&#10;  const handleTimeSlotDrop = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.stopPropagation();&#10;&#10;    if (draggedAppointment &amp;&amp; onAppointmentDrop) {&#10;      onAppointmentDrop(draggedAppointment, date, time);&#10;    }&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drag over to allow drop and show preview&#10;  const handleTimeSlotDragOver = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.dataTransfer.dropEffect = 'move';&#10;&#10;    if (draggedAppointment) {&#10;      setDragPreviewPosition({ date, time });&#10;    }&#10;  };&#10;&#10;  // Handle drag leave to hide preview when leaving time slot&#10;  const handleTimeSlotDragLeave = (e: React.DragEvent) =&gt; {&#10;    // Only hide preview if we're actually leaving the time slot area&#10;    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();&#10;    const { clientX, clientY } = e;&#10;&#10;    if (clientX &lt; rect.left || clientX &gt; rect.right || clientY &lt; rect.top || clientY &gt; rect.bottom) {&#10;      setDragPreviewPosition(null);&#10;    }&#10;  };&#10;&#10;  const weekStart = new Date(currentDate);&#10;  weekStart.setDate(currentDate.getDate() - currentDate.getDay());&#10;&#10;  const days = Array.from({ length: 7 }, (_, i) =&gt; {&#10;    const day = new Date(weekStart);&#10;    day.setDate(weekStart.getDate() + i);&#10;    return day;&#10;  });&#10;&#10;  // Check if a day is a working day&#10;  const isWorkingDay = (date: Date): boolean =&gt; {&#10;    const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });&#10;    return workingDays.includes(dayName);&#10;  };&#10;&#10;  // Generate time slots based on working hours&#10;  const generateTimeSlots = () =&gt; {&#10;    const startHour = parseInt(workingHours.startTime.split(':')[0]);&#10;    const endHour = parseInt(workingHours.endTime.split(':')[0]);&#10;    const totalHours = endHour - startHour;&#10;    const slotsPerHour = 4; // 15-minute intervals&#10;    const totalSlots = totalHours * slotsPerHour;&#10;&#10;    return Array.from({ length: totalSlots }, (_, i) =&gt; {&#10;      const hour = Math.floor(i / slotsPerHour) + startHour;&#10;      const minutes = (i % slotsPerHour) * 15;&#10;      return `${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;&#10;    });&#10;  };&#10;&#10;  const timeSlots = generateTimeSlots();&#10;&#10;  return (&#10;    &lt;div className=&quot;card overflow-hidden&quot;&gt;&#10;      {/* Week header */}&#10;      &lt;div className=&quot;grid grid-cols-8 border-b border-gray-300&quot;&gt;&#10;        &lt;div className=&quot;p-4&quot;&gt;&lt;/div&gt;&#10;        {days.map((day, index) =&gt; {&#10;          const isWorking = isWorkingDay(day);&#10;          const isToday = day.toDateString() === new Date().toDateString();&#10;&#10;          return (&#10;            &lt;div&#10;              key={index}&#10;              className={`p-4 text-center slide-up-element cursor-pointer transition-colors duration-200 ${&#10;                isToday&#10;                  ? 'bg-primary-50 border-primary-200'&#10;                  : 'bg-red-50 hover:bg-red-100'&#10;              }`}&#10;              style={{ animationDelay: `${index * 0.05}s` }}&#10;              onClick={() =&gt; onDayClick &amp;&amp; onDayClick(day)}&#10;            &gt;&#10;              &lt;p className={`text-sm ${&#10;                isWorking ? 'text-neutral-500' : 'text-red-400'&#10;              }`}&gt;&#10;                isWorking ? 'text-neutral-500' : 'text-red-400'&#10;                  : 'text-red-600'&#10;              }`}&gt;&#10;                {day.getDate()}&#10;              &lt;/p&gt;&#10;              {!isWorking &amp;&amp; (&#10;                  ? 'text-primary-600'&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;&#10;      {/* Time slots grid - 15 minute precision */}&#10;      &lt;div&#10;              {!isWorking &amp;&amp; (&#10;                &lt;p className=&quot;text-xs text-red-500 mt-1&quot;&gt;Closed&lt;/p&gt;&#10;              )}&#10;        className=&quot;flex-1 overflow-y-auto&quot;&#10;        onMouseUp={handleMouseUp}&#10;        onMouseLeave={handleMouseUp}&#10;        style={{ height: 'calc(100vh - 280px)' }}&#10;      &gt;&#10;        {timeSlots.map((time, timeIndex) =&gt; (&#10;          &lt;div key={time} className=&quot;grid grid-cols-8 hover:bg-primary-50 transition-all duration-300&quot;&gt;&#10;            &lt;div className=&quot;p-2 text-right text-sm text-neutral-500 bg-neutral-50 border-r border-gray-300 relative&quot;&gt;&#10;              {timeIndex % 4 === 1 ? ( // Show in the second slot (middle of the hour)&#10;                &lt;span className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2&quot;&gt;&#10;                  {time.split(':')[0]}:00&#10;                &lt;/span&gt;&#10;              ) : null}&#10;            &lt;/div&gt;&#10;            {days.map((day) =&gt; {&#10;              const dayStr = day.toISOString().split('T')[0];&#10;              const isSelected = isSlotSelected(dayStr, time);&#10;              const isWorking = isWorkingDay(day);&#10;              const dayAppointments = appointments.filter(apt =&gt; {&#10;                const aptDate = getAppointmentDate(apt);&#10;                const aptTime = formatAppointmentTime(apt);&#10;                const aptHour = parseInt(aptTime.split(':')[0]);&#10;                const aptMinute = parseInt(aptTime.split(':')[1]);&#10;                const timeHour = parseInt(time.split(':')[0]);&#10;                const timeMinute = parseInt(time.split(':')[1]);&#10;&#10;                // Only show appointment in its starting time slot&#10;                return aptDate === dayStr &amp;&amp;&#10;                  aptHour === timeHour &amp;&amp;&#10;                  aptMinute === timeMinute;&#10;              });&#10;&#10;              let borderBottomClass;&#10;              if (timeIndex % 4 === 3) {&#10;                borderBottomClass = 'border-b border-gray-300';&#10;              } else if (timeIndex % 2 === 1) {&#10;                borderBottomClass = 'border-b border-gray-200';&#10;              } else {&#10;                borderBottomClass = 'border-b border-gray-100';&#10;              }&#10;&#10;              // Apply red hue to non-working days&#10;              const baseBackground = isWorking ? '' : 'bg-red-50/30';&#10;              const hoverBackground = isWorking ? 'hover:bg-primary-50' : 'hover:bg-red-100/50';&#10;&#10;              return (&#10;                &lt;div&#10;                  key={`${dayStr}-${time}`}&#10;                  className={`p-1 min-h-[15px] relative group cursor-pointer border-r border-gray-200 ${borderBottomClass} ${baseBackground} ${hoverBackground} ${isSelected ? 'bg-blue-200 border-blue-400' : ''}`}&#10;                  style={{&#10;                    backgroundColor: isSelected ? 'rgba(59, 130, 246, 0.3)' : '',&#10;                    borderColor: isSelected ? '#3b82f6' : ''&#10;                  }}&#10;                  onClick={() =&gt; onSelectSlot(dayStr, time)}&#10;                  onMouseDown={(e) =&gt; handleMouseDown(e, dayStr, time)}&#10;                  onMouseEnter={() =&gt; handleMouseEnter(dayStr, time)}&#10;                  onDragOver={(e) =&gt; handleTimeSlotDragOver(e, dayStr, time)}&#10;                  onDrop={(e) =&gt; handleTimeSlotDrop(e, dayStr, time)}&#10;                  onDragLeave={handleTimeSlotDragLeave}&#10;                &gt;&#10;                  {dayAppointments.map((appointment, aptIndex) =&gt; (&#10;                    &lt;div&#10;                      key={appointment.id}&#10;                      className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-medium hover:opacity-80 transition-opacity cursor-pointer z-10&quot;&#10;                      style={{&#10;                        top: `${aptIndex * 2}px`,&#10;                        height: `${getAppointmentDuration(appointment)}px`,&#10;                        display: 'flex',&#10;                        flexDirection: 'column',&#10;                        justifyContent: 'center',&#10;                        backgroundColor: getAppointmentBackgroundColor(appointment.status),&#10;                        color: getAppointmentTextColor(appointment.status)&#10;                      }}&#10;                      onClick={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                        onAppointmentClick(appointment);&#10;                      }}&#10;                      onMouseEnter={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                      }}&#10;                      onMouseDown={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                      }}&#10;                      draggable&#10;                      onDragStart={(e) =&gt; handleAppointmentDragStart(e, appointment)}&#10;                      onDragEnd={handleAppointmentDragEnd}&#10;                    &gt;&#10;                      {appointment.patient_first_name} {appointment.patient_last_name}&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                  {/* Drag preview shadow - shows where appointment will be dropped */}&#10;                  {draggedAppointment &amp;&amp; dragPreviewPosition &amp;&amp;&#10;                   dragPreviewPosition.date === dayStr &amp;&amp; dragPreviewPosition.time === time &amp;&amp; (&#10;                    &lt;div&#10;                      className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-lg border-2 border-dashed border-primary-400 bg-primary-100/50 pointer-events-none z-20&quot;&#10;                      style={{&#10;                        top: '1px',&#10;                        height: `${getAppointmentDuration(draggedAppointment)}px`,&#10;                        display: 'flex',&#10;                        flexDirection: 'column',&#10;                        justifyContent: 'center',&#10;                        backdropFilter: 'blur(1px)',&#10;                      }}&#10;                    &gt;&#10;                      &lt;div className=&quot;text-primary-700 font-medium opacity-75&quot;&gt;&#10;                        {draggedAppointment.patient_first_name} {draggedAppointment.patient_last_name}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-primary-600 text-xs opacity-60&quot;&gt;&#10;                        Moving...&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Appointment, AppointmentStatus } from '../../types/Appointment';&#10;&#10;interface WeeklyViewProps {&#10;  isSlotSelected: (date: string, time: string) =&gt; boolean;&#10;  currentDate: Date;&#10;  appointments: Appointment[];&#10;  handleMouseUp: () =&gt; void;&#10;  handleMouseDown: (e: React.MouseEvent, date: string, time: string) =&gt; void;&#10;  handleMouseEnter: (date: string, time: string) =&gt; void;&#10;  onSelectSlot: (date: string, time: string) =&gt; void;&#10;  onAppointmentClick: (appointment: Appointment) =&gt; void;&#10;  onAppointmentDrop?: (appointment: Appointment, newDate: string, newTime: string) =&gt; void;&#10;  onDayClick?: (date: Date) =&gt; void;&#10;  getAppointmentDate: (apt: Appointment) =&gt; string;&#10;  formatAppointmentTime: (apt: Appointment) =&gt; string;&#10;  getAppointmentDuration: (apt: Appointment) =&gt; number;&#10;  getAppointmentBackgroundColor: (status: AppointmentStatus) =&gt; string;&#10;  getAppointmentTextColor: (status: AppointmentStatus) =&gt; string;&#10;  workingHours?: {&#10;    startTime: string;&#10;    endTime: string;&#10;  };&#10;  workingDays?: string[];&#10;}&#10;&#10;export const WeeklyView: React.FC&lt;WeeklyViewProps&gt; = ({&#10;  currentDate,&#10;  appointments,&#10;  handleMouseUp,&#10;  handleMouseDown,&#10;  handleMouseEnter,&#10;  onSelectSlot,&#10;  onAppointmentClick,&#10;  isSlotSelected,&#10;  getAppointmentDate,&#10;  formatAppointmentTime,&#10;  getAppointmentDuration,&#10;  getAppointmentBackgroundColor,&#10;  getAppointmentTextColor,&#10;  onAppointmentDrop,&#10;  onDayClick,&#10;  workingHours = { startTime: '08:00', endTime: '17:00' },&#10;  workingDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],&#10;}) =&gt; {&#10;  const [draggedAppointment, setDraggedAppointment] = React.useState&lt;Appointment | null&gt;(null);&#10;  const [dragPreviewPosition, setDragPreviewPosition] = React.useState&lt;{date: string, time: string} | null&gt;(null);&#10;&#10;  // Handle appointment drag start&#10;  const handleAppointmentDragStart = (e: React.DragEvent, appointment: Appointment) =&gt; {&#10;    e.stopPropagation();&#10;    setDraggedAppointment(appointment);&#10;    e.dataTransfer.setData('text/plain', appointment.id);&#10;    e.dataTransfer.effectAllowed = 'move';&#10;  };&#10;&#10;  // Handle appointment drag end&#10;  const handleAppointmentDragEnd = () =&gt; {&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drop on time slot&#10;  const handleTimeSlotDrop = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.stopPropagation();&#10;&#10;    if (draggedAppointment &amp;&amp; onAppointmentDrop) {&#10;      onAppointmentDrop(draggedAppointment, date, time);&#10;    }&#10;    setDraggedAppointment(null);&#10;    setDragPreviewPosition(null);&#10;  };&#10;&#10;  // Handle drag over to allow drop and show preview&#10;  const handleTimeSlotDragOver = (e: React.DragEvent, date: string, time: string) =&gt; {&#10;    e.preventDefault();&#10;    e.dataTransfer.dropEffect = 'move';&#10;&#10;    if (draggedAppointment) {&#10;      setDragPreviewPosition({ date, time });&#10;    }&#10;  };&#10;&#10;  // Handle drag leave to hide preview when leaving time slot&#10;  const handleTimeSlotDragLeave = (e: React.DragEvent) =&gt; {&#10;    // Only hide preview if we're actually leaving the time slot area&#10;    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();&#10;    const { clientX, clientY } = e;&#10;&#10;    if (clientX &lt; rect.left || clientX &gt; rect.right || clientY &lt; rect.top || clientY &gt; rect.bottom) {&#10;      setDragPreviewPosition(null);&#10;    }&#10;  };&#10;&#10;  const weekStart = new Date(currentDate);&#10;  weekStart.setDate(currentDate.getDate() - currentDate.getDay());&#10;&#10;  const days = Array.from({ length: 7 }, (_, i) =&gt; {&#10;    const day = new Date(weekStart);&#10;    day.setDate(weekStart.getDate() + i);&#10;    return day;&#10;  });&#10;&#10;  // Check if a day is a working day&#10;  const isWorkingDay = (date: Date): boolean =&gt; {&#10;    const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });&#10;    return workingDays.includes(dayName);&#10;  };&#10;&#10;  // Generate time slots based on working hours&#10;  const generateTimeSlots = () =&gt; {&#10;    const startHour = parseInt(workingHours.startTime.split(':')[0]);&#10;    const endHour = parseInt(workingHours.endTime.split(':')[0]);&#10;    const totalHours = endHour - startHour;&#10;    const slotsPerHour = 4; // 15-minute intervals&#10;    const totalSlots = totalHours * slotsPerHour;&#10;&#10;    return Array.from({ length: totalSlots }, (_, i) =&gt; {&#10;      const hour = Math.floor(i / slotsPerHour) + startHour;&#10;      const minutes = (i % slotsPerHour) * 15;&#10;      return `${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;&#10;    });&#10;  };&#10;&#10;  const timeSlots = generateTimeSlots();&#10;&#10;  return (&#10;    &lt;div className=&quot;card overflow-hidden&quot;&gt;&#10;      {/* Week header */}&#10;      &lt;div className=&quot;grid grid-cols-8 border-b border-gray-300&quot;&gt;&#10;        &lt;div className=&quot;p-4&quot;&gt;&lt;/div&gt;&#10;        {days.map((day, index) =&gt; {&#10;          const isWorking = isWorkingDay(day);&#10;          const isToday = day.toDateString() === new Date().toDateString();&#10;          &#10;          return (&#10;            &lt;div&#10;              key={index}&#10;              className={`p-4 text-center slide-up-element cursor-pointer transition-colors duration-200 ${&#10;                isToday&#10;                  ? isWorking &#10;                    ? 'bg-primary-50 border-primary-200'&#10;                    : 'bg-red-200 hover:bg-red-250'&#10;                  : isWorking&#10;                  ? 'bg-neutral-50 hover:bg-primary-50'&#10;                  : 'bg-red-50 hover:bg-red-100'&#10;              }`}&#10;              style={{ animationDelay: `${index * 0.05}s` }}&#10;              onClick={() =&gt; onDayClick &amp;&amp; onDayClick(day)}&#10;            &gt;&#10;              &lt;p className={`text-sm ${&#10;                isToday&#10;                  ? isWorking &#10;                    ? 'text-neutral-500'&#10;                    : 'text-red-600'&#10;                  : isWorking &#10;                  ? 'text-neutral-500' &#10;                  : 'text-red-400'&#10;              }`}&gt;&#10;                {day.toLocaleDateString('en-US', { weekday: 'short' })}&#10;              &lt;/p&gt;&#10;              &lt;p className={`text-lg font-semibold ${&#10;                isToday&#10;                  ? isWorking&#10;                    ? 'text-primary-600'&#10;                    : 'text-red-700'&#10;                  : isWorking&#10;                  ? 'text-neutral-800'&#10;                  : 'text-red-600'&#10;              }`}&gt;&#10;                {day.getDate()}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;&#10;      {/* Time slots grid - 15 minute precision */}&#10;      &lt;div&#10;        className=&quot;flex-1 overflow-y-auto&quot;&#10;        onMouseUp={handleMouseUp}&#10;        onMouseLeave={handleMouseUp}&#10;        style={{ height: 'calc(100vh - 280px)' }}&#10;      &gt;&#10;        {timeSlots.map((time, timeIndex) =&gt; (&#10;          &lt;div key={time} className=&quot;grid grid-cols-8 hover:bg-primary-50 transition-all duration-300&quot;&gt;&#10;            &lt;div className=&quot;p-2 text-right text-sm text-neutral-500 bg-neutral-50 border-r border-gray-300 relative&quot;&gt;&#10;              {timeIndex % 4 === 1 ? ( // Show in the second slot (middle of the hour)&#10;                &lt;span className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2&quot;&gt;&#10;                  {time.split(':')[0]}:00&#10;                &lt;/span&gt;&#10;              ) : null}&#10;            &lt;/div&gt;&#10;            {days.map((day) =&gt; {&#10;              const dayStr = day.toISOString().split('T')[0];&#10;              const isSelected = isSlotSelected(dayStr, time);&#10;              const isWorking = isWorkingDay(day);&#10;              const dayAppointments = appointments.filter(apt =&gt; {&#10;                const aptDate = getAppointmentDate(apt);&#10;                const aptTime = formatAppointmentTime(apt);&#10;                const aptHour = parseInt(aptTime.split(':')[0]);&#10;                const aptMinute = parseInt(aptTime.split(':')[1]);&#10;                const timeHour = parseInt(time.split(':')[0]);&#10;                const timeMinute = parseInt(time.split(':')[1]);&#10;&#10;                // Only show appointment in its starting time slot&#10;                return aptDate === dayStr &amp;&amp;&#10;                  aptHour === timeHour &amp;&amp;&#10;                  aptMinute === timeMinute;&#10;              });&#10;&#10;              let borderBottomClass;&#10;              if (timeIndex % 4 === 3) {&#10;                borderBottomClass = 'border-b border-gray-300';&#10;              } else if (timeIndex % 2 === 1) {&#10;                borderBottomClass = 'border-b border-gray-200';&#10;              } else {&#10;                borderBottomClass = 'border-b border-gray-100';&#10;              }&#10;&#10;              // Apply red hue to non-working days&#10;              const baseBackground = isWorking ? '' : 'bg-red-50/30';&#10;              const hoverBackground = isWorking ? 'hover:bg-primary-50' : 'hover:bg-red-100/50';&#10;&#10;              return (&#10;                &lt;div&#10;                  key={`${dayStr}-${time}`}&#10;                  className={`p-1 min-h-[15px] relative group cursor-pointer border-r border-gray-200 ${borderBottomClass} ${baseBackground} ${hoverBackground} ${isSelected ? 'bg-blue-200 border-blue-400' : ''}`}&#10;                  style={{&#10;                    backgroundColor: isSelected ? 'rgba(59, 130, 246, 0.3)' : '',&#10;                    borderColor: isSelected ? '#3b82f6' : ''&#10;                  }}&#10;                  onClick={() =&gt; onSelectSlot(dayStr, time)}&#10;                  onMouseDown={(e) =&gt; handleMouseDown(e, dayStr, time)}&#10;                  onMouseEnter={() =&gt; handleMouseEnter(dayStr, time)}&#10;                  onDragOver={(e) =&gt; handleTimeSlotDragOver(e, dayStr, time)}&#10;                  onDrop={(e) =&gt; handleTimeSlotDrop(e, dayStr, time)}&#10;                  onDragLeave={handleTimeSlotDragLeave}&#10;                &gt;&#10;                  {dayAppointments.map((appointment, aptIndex) =&gt; (&#10;                    &lt;div&#10;                      key={appointment.id}&#10;                      className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-medium hover:opacity-80 transition-opacity cursor-pointer z-10&quot;&#10;                      style={{&#10;                        top: `${aptIndex * 2}px`,&#10;                        height: `${getAppointmentDuration(appointment)}px`,&#10;                        display: 'flex',&#10;                        flexDirection: 'column',&#10;                        justifyContent: 'center',&#10;                        backgroundColor: getAppointmentBackgroundColor(appointment.status),&#10;                        color: getAppointmentTextColor(appointment.status)&#10;                      }}&#10;                      onClick={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                        onAppointmentClick(appointment);&#10;                      }}&#10;                      onMouseEnter={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                      }}&#10;                      onMouseDown={(e) =&gt; {&#10;                        e.stopPropagation();&#10;                      }}&#10;                      draggable&#10;                      onDragStart={(e) =&gt; handleAppointmentDragStart(e, appointment)}&#10;                      onDragEnd={handleAppointmentDragEnd}&#10;                    &gt;&#10;                      {appointment.patient_first_name} {appointment.patient_last_name}&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                  {/* Drag preview shadow - shows where appointment will be dropped */}&#10;                  {draggedAppointment &amp;&amp; dragPreviewPosition &amp;&amp;&#10;                   dragPreviewPosition.date === dayStr &amp;&amp; dragPreviewPosition.time === time &amp;&amp; (&#10;                    &lt;div&#10;                      className=&quot;absolute inset-x-1 rounded-lg p-1 text-xs shadow-lg border-2 border-dashed border-primary-400 bg-primary-100/50 pointer-events-none z-20&quot;&#10;                      style={{&#10;                        top: '1px',&#10;                        height: `${getAppointmentDuration(draggedAppointment)}px`,&#10;                        display: 'flex',&#10;                        flexDirection: 'column',&#10;                        justifyContent: 'center',&#10;                        backdropFilter: 'blur(1px)',&#10;                      }}&#10;                    &gt;&#10;                      &lt;div className=&quot;text-primary-700 font-medium opacity-75&quot;&gt;&#10;                        {draggedAppointment.patient_first_name} {draggedAppointment.patient_last_name}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-primary-600 text-xs opacity-60&quot;&gt;&#10;                        Moving...&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/i18n/locales/ar.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/i18n/locales/ar.json" />
              <option name="originalContent" value="{&#10;  &quot;dashboard&quot;: &quot;لوحة التحكم&quot;,&#10;  &quot;calendar&quot;: &quot;التقويم&quot;,&#10;  &quot;patients&quot;: &quot;المرضى&quot;,&#10;  &quot;reports&quot;: &quot;التقارير&quot;,&#10;  &quot;settings&quot;: &quot;الإعدادات&quot;,&#10;  &quot;clinic_name&quot;: &quot;Imarisys Clinic&quot;,&#10;  &quot;patient_list&quot;: &quot;قائمة المرضى&quot;,&#10;  &quot;add_patient&quot;: &quot;إضافة مريض&quot;,&#10;  &quot;add_new_patient&quot;: &quot;إضافة مريض جديد&quot;,&#10;  &quot;search_patients&quot;: &quot;البحث عن المرضى...&quot;,&#10;  &quot;first_name&quot;: &quot;الاسم الأول&quot;,&#10;  &quot;last_name&quot;: &quot;اسم العائلة&quot;,&#10;  &quot;email&quot;: &quot;البريد الإلكتروني&quot;,&#10;  &quot;phone&quot;: &quot;الهاتف&quot;,&#10;  &quot;date_of_birth&quot;: &quot;تاريخ الميلاد&quot;,&#10;  &quot;address&quot;: &quot;العنوان&quot;,&#10;  &quot;save&quot;: &quot;حفظ&quot;,&#10;  &quot;cancel&quot;: &quot;إلغاء&quot;,&#10;  &quot;edit&quot;: &quot;تعديل&quot;,&#10;  &quot;delete&quot;: &quot;حذف&quot;,&#10;  &quot;view_details&quot;: &quot;عرض التفاصيل&quot;,&#10;  &quot;book_appointment&quot;: &quot;حجز موعد&quot;,&#10;  &quot;appointments&quot;: &quot;المواعيد&quot;,&#10;  &quot;today&quot;: &quot;اليوم&quot;,&#10;  &quot;tomorrow&quot;: &quot;غداً&quot;,&#10;  &quot;this_week&quot;: &quot;هذا الأسبوع&quot;,&#10;  &quot;next_week&quot;: &quot;الأسبوع القادم&quot;,&#10;  &quot;no_appointments&quot;: &quot;لا توجد مواعيد مجدولة&quot;,&#10;  &quot;appointment_time&quot;: &quot;وقت الموعد&quot;,&#10;  &quot;appointment_type&quot;: &quot;نوع الموعد&quot;,&#10;  &quot;notes&quot;: &quot;ملاحظات&quot;,&#10;  &quot;status&quot;: &quot;الحالة&quot;,&#10;  &quot;confirmed&quot;: &quot;مؤكد&quot;,&#10;  &quot;pending&quot;: &quot;في الانتظار&quot;,&#10;  &quot;completed&quot;: &quot;مكتمل&quot;,&#10;  &quot;cancelled&quot;: &quot;ملغى&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;تم إنشاء المريض بنجاح&quot;,&#10;  &quot;patient_added_to_system&quot;: &quot;تم إضافته إلى النظام.&quot;,&#10;  &quot;failed_to_create_patient&quot;: &quot;فشل في إنشاء المريض&quot;,&#10;  &quot;unable_to_create_patient&quot;: &quot;غير قادر على إنشاء المريض. يرجى التحقق من البيانات والمحاولة مرة أخرى.&quot;,&#10;  &quot;patient_updated_successfully&quot;: &quot;تم تحديث المريض بنجاح&quot;,&#10;  &quot;patient_info_updated&quot;: &quot;تم تحديث معلومات المريض.&quot;,&#10;  &quot;failed_to_update_patient&quot;: &quot;فشل في تحديث المريض&quot;,&#10;  &quot;unable_to_update_patient&quot;: &quot;غير قادر على تحديث المريض. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;patient_deleted_successfully&quot;: &quot;تم حذف المريض بنجاح&quot;,&#10;  &quot;patient_removed_from_system&quot;: &quot;تم إزالته من النظام.&quot;,&#10;  &quot;failed_to_delete_patient&quot;: &quot;فشل في حذف المريض&quot;,&#10;  &quot;unable_to_delete_patient&quot;: &quot;غير قادر على حذف المريض. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;patient_not_found&quot;: &quot;المريض غير موجود&quot;,&#10;  &quot;back_to_list&quot;: &quot;العودة إلى القائمة&quot;,&#10;  &quot;edit_patient&quot;: &quot;تعديل المريض&quot;,&#10;  &quot;patient_details&quot;: &quot;تفاصيل المريض&quot;,&#10;  &quot;patients_count&quot;: &quot;{count} من {total} مريض&quot;,&#10;  &quot;no_patients_found&quot;: &quot;لم يتم العثور على مرضى&quot;,&#10;  &quot;start_by_adding_patient&quot;: &quot;ابدأ بإضافة أول مريض إلى النظام.&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;فشل في تحميل المرضى&quot;,&#10;  &quot;connection_error&quot;: &quot;فشل في تحميل المرضى. يرجى التحقق من الاتصال والمحاولة مرة أخرى.&quot;,&#10;  &quot;confirm_delete_patient&quot;: &quot;هل أنت متأكد من حذف {name}؟ لا يمكن التراجع عن هذا الإجراء.&quot;,&#10;  &quot;gender&quot;: &quot;الجنس&quot;,&#10;  &quot;male&quot;: &quot;ذكر&quot;,&#10;  &quot;female&quot;: &quot;أنثى&quot;,&#10;  &quot;other&quot;: &quot;آخر&quot;,&#10;  &quot;street_address&quot;: &quot;عنوان الشارع&quot;,&#10;  &quot;city&quot;: &quot;المدينة&quot;,&#10;  &quot;state&quot;: &quot;المحافظة/الولاية&quot;,&#10;  &quot;zip_code&quot;: &quot;الرمز البريدي&quot;,&#10;  &quot;saving&quot;: &quot;جاري الحفظ...&quot;,&#10;  &quot;create_patient&quot;: &quot;إنشاء مريض&quot;,&#10;  &quot;update_patient&quot;: &quot;تحديث المريض&quot;,&#10;  &quot;first_name_required&quot;: &quot;الاسم الأول مطلوب&quot;,&#10;  &quot;last_name_required&quot;: &quot;اسم العائلة مطلوب&quot;,&#10;  &quot;phone_required&quot;: &quot;الهاتف مطلوب&quot;,&#10;  &quot;email_invalid&quot;: &quot;البريد الإلكتروني غير صحيح&quot;,&#10;  &quot;years_old&quot;: &quot;سنة&quot;,&#10;  &quot;try_adjusting_search&quot;: &quot;حاول تعديل معايير البحث&quot;,&#10;  &quot;back_to_patients&quot;: &quot;← العودة للمرضى&quot;,&#10;  &quot;age&quot;: &quot;العمر&quot;,&#10;  &quot;years&quot;: &quot;سنة&quot;,&#10;  &quot;contact_information&quot;: &quot;معلومات الاتصال&quot;,&#10;  &quot;address_information&quot;: &quot;معلومات العنوان&quot;,&#10;  &quot;upcoming_appointments&quot;: &quot;المواعيد القادمة&quot;,&#10;  &quot;previous_appointments&quot;: &quot;المواعيد السابقة&quot;,&#10;  &quot;no_upcoming_appointments&quot;: &quot;لا توجد مواعيد قادمة&quot;,&#10;  &quot;no_previous_appointments&quot;: &quot;لا توجد مواعيد سابقة&quot;,&#10;  &quot;appointment_booked&quot;: &quot;تم حجز الموعد&quot;,&#10;  &quot;appointment_booked_success&quot;: &quot;تم حجز الموعد بنجاح.&quot;,&#10;  &quot;booking_failed&quot;: &quot;فشل في الحجز&quot;,&#10;  &quot;unable_to_book&quot;: &quot;غير قادر على حجز الموعد&quot;,&#10;  &quot;appointment_updated&quot;: &quot;تم تحديث الموعد&quot;,&#10;  &quot;appointment_updated_success&quot;: &quot;تم تحديث الموعد بنجاح.&quot;,&#10;  &quot;update_failed&quot;: &quot;فشل في التحديث&quot;,&#10;  &quot;unable_to_update_appointment&quot;: &quot;غير قادر على تحديث الموعد&quot;,&#10;  &quot;appointment_cancelled&quot;: &quot;تم إلغاء الموعد&quot;,&#10;  &quot;appointment_cancelled_success&quot;: &quot;تم إلغاء الموعد بنجاح.&quot;,&#10;  &quot;cancellation_failed&quot;: &quot;فشل في الإلغاء&quot;,&#10;  &quot;unable_to_cancel&quot;: &quot;غير قادر على إلغاء الموعد&quot;,&#10;  &quot;status_updated&quot;: &quot;تم تحديث الحالة&quot;,&#10;  &quot;status_updated_to&quot;: &quot;تم تحديث حالة الموعد إلى {status}.&quot;,&#10;  &quot;unable_to_update_status&quot;: &quot;غير قادر على تحديث حالة الموعد&quot;,&#10;  &quot;appointment_deleted&quot;: &quot;تم حذف الموعد&quot;,&#10;  &quot;appointment_deleted_success&quot;: &quot;تم حذف الموعد نهائياً.&quot;,&#10;  &quot;deletion_failed&quot;: &quot;فشل في الحذف&quot;,&#10;  &quot;unable_to_delete_appointment&quot;: &quot;غير قادر على حذف الموعد&quot;,&#10;  &quot;failed_to_load_appointments&quot;: &quot;فشل في تحميل المواعيد&quot;,&#10;  &quot;unable_to_load_appointments&quot;: &quot;غير قادر على تحميل مواعيد المريض&quot;,&#10;  &quot;search&quot;: &quot;بحث&quot;,&#10;  &quot;clear&quot;: &quot;مسح&quot;,&#10;  &quot;age_from&quot;: &quot;العمر من&quot;,&#10;  &quot;age_to&quot;: &quot;العمر إلى&quot;,&#10;  &quot;book_new_appointment&quot;: &quot;حجز موعد جديد&quot;,&#10;  &quot;patient&quot;: &quot;المريض&quot;,&#10;  &quot;appointment_title&quot;: &quot;عنوان الموعد&quot;,&#10;  &quot;appointment_title_required&quot;: &quot;عنوان الموعد *&quot;,&#10;  &quot;appointment_title_placeholder&quot;: &quot;مثل: فحص دوري، زيارة متابعة&quot;,&#10;  &quot;date&quot;: &quot;التاريخ&quot;,&#10;  &quot;date_required&quot;: &quot;التاريخ *&quot;,&#10;  &quot;start_time&quot;: &quot;وقت البداية&quot;,&#10;  &quot;start_time_required&quot;: &quot;وقت البداية *&quot;,&#10;  &quot;end_time&quot;: &quot;وقت النهاية&quot;,&#10;  &quot;end_time_required&quot;: &quot;وقت النهاية *&quot;,&#10;  &quot;notes_optional&quot;: &quot;ملاحظات (اختيارية)&quot;,&#10;  &quot;notes_placeholder&quot;: &quot;ملاحظات أو تعليمات إضافية...&quot;,&#10;  &quot;booking&quot;: &quot;جاري الحجز...&quot;,&#10;  &quot;title_required&quot;: &quot;العنوان مطلوب&quot;,&#10;  &quot;date_required_error&quot;: &quot;التاريخ مطلوب&quot;,&#10;  &quot;date_past_error&quot;: &quot;لا يمكن أن يكون التاريخ في الماضي&quot;,&#10;  &quot;start_time_required_error&quot;: &quot;وقت البداية مطلوب&quot;,&#10;  &quot;end_time_required_error&quot;: &quot;وقت النهاية مطلوب&quot;,&#10;  &quot;end_time_after_start&quot;: &quot;يجب أن يكون وقت النهاية بعد وقت البداية&quot;,&#10;  &quot;appointment_confirmed&quot;: &quot;تم تأكيد الموعد&quot;,&#10;  &quot;appointment_booked_with&quot;: &quot;تم حجز موعد مع {name} بنجاح.&quot;,&#10;  &quot;booking_error&quot;: &quot;حدث خطأ في حجز الموعد. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;loading_appointment_types&quot;: &quot;جاري تحميل أنواع المواعيد...&quot;,&#10;  &quot;consultation_with&quot;: &quot;استشارة مع {name}&quot;,&#10;  &quot;min&quot;: &quot;دقيقة&quot;,&#10;  &quot;appointment_calendar&quot;: &quot;تقويم المواعيد&quot;,&#10;  &quot;manage_schedule_appointments&quot;: &quot;إدارة وجدولة مواعيد المرضى.&quot;,&#10;  &quot;new_appointment&quot;: &quot;موعد جديد&quot;,&#10;  &quot;month&quot;: &quot;شهر&quot;,&#10;  &quot;week&quot;: &quot;أسبوع&quot;,&#10;  &quot;day&quot;: &quot;يوم&quot;,&#10;  &quot;loading_appointments&quot;: &quot;جاري تحميل المواعيد...&quot;,&#10;  &quot;error&quot;: &quot;خطأ&quot;,&#10;  &quot;success&quot;: &quot;نجح&quot;,&#10;  &quot;appointment_updated_successfully&quot;: &quot;تم تحديث الموعد بنجاح&quot;,&#10;  &quot;appointment_status_updated_successfully&quot;: &quot;تم تحديث حالة الموعد بنجاح&quot;,&#10;  &quot;appointment_cancelled_successfully&quot;: &quot;تم إلغاء الموعد بنجاح&quot;,&#10;  &quot;appointment_deleted_successfully&quot;: &quot;تم حذف الموعد بنجاح&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;فشل في تحميل المرضى&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;تم إنشاء المريض بنجاح.&quot;,&#10;  &quot;failed_to_create_patient_booking&quot;: &quot;فشل في إنشاء المريض&quot;,&#10;  &quot;select_patient&quot;: &quot;اختيار مريض&quot;,&#10;  &quot;search_for_patient&quot;: &quot;البحث عن مريض...&quot;,&#10;  &quot;create_new_patient&quot;: &quot;إنشاء مريض جديد&quot;,&#10;  &quot;select_time_slot&quot;: &quot;اختيار الوقت المتاح&quot;,&#10;  &quot;select_patient_for_appointment&quot;: &quot;اختيار مريض للموعد&quot;,&#10;  &quot;or&quot;: &quot;أو&quot;,&#10;  &quot;previous&quot;: &quot;السابق&quot;,&#10;  &quot;next&quot;: &quot;التالي&quot;,&#10;  &quot;today&quot;: &quot;اليوم&quot;,&#10;  &quot;sunday&quot;: &quot;الأحد&quot;,&#10;  &quot;monday&quot;: &quot;الاثنين&quot;,&#10;  &quot;tuesday&quot;: &quot;الثلاثاء&quot;,&#10;  &quot;wednesday&quot;: &quot;الأربعاء&quot;,&#10;  &quot;thursday&quot;: &quot;الخميس&quot;,&#10;  &quot;friday&quot;: &quot;الجمعة&quot;,&#10;  &quot;saturday&quot;: &quot;السبت&quot;,&#10;  &quot;sun&quot;: &quot;أحد&quot;,&#10;  &quot;mon&quot;: &quot;اثن&quot;,&#10;  &quot;tue&quot;: &quot;ثلا&quot;,&#10;  &quot;wed&quot;: &quot;أرب&quot;,&#10;  &quot;thu&quot;: &quot;خمي&quot;,&#10;  &quot;fri&quot;: &quot;جمع&quot;,&#10;  &quot;sat&quot;: &quot;سبت&quot;,&#10;  &quot;january&quot;: &quot;يناير&quot;,&#10;  &quot;february&quot;: &quot;فبراير&quot;,&#10;  &quot;march&quot;: &quot;مارس&quot;,&#10;  &quot;april&quot;: &quot;أبريل&quot;,&#10;  &quot;may&quot;: &quot;مايو&quot;,&#10;  &quot;june&quot;: &quot;يونيو&quot;,&#10;  &quot;july&quot;: &quot;يوليو&quot;,&#10;  &quot;august&quot;: &quot;أغسطس&quot;,&#10;  &quot;september&quot;: &quot;سبتمبر&quot;,&#10;  &quot;october&quot;: &quot;أكتوبر&quot;,&#10;  &quot;november&quot;: &quot;نوفمبر&quot;,&#10;  &quot;december&quot;: &quot;ديسمبر&quot;,&#10;  &quot;am&quot;: &quot;ص&quot;,&#10;  &quot;pm&quot;: &quot;م&quot;,&#10;  &quot;select_date_time&quot;: &quot;اختيار التاريخ والوقت&quot;,&#10;  &quot;select_date_time_description&quot;: &quot;اختر التاريخ والوقت المفضل لديك للموعد.&quot;,&#10;  &quot;appointment_duration&quot;: &quot;مدة الموعد&quot;,&#10;  &quot;available_time_slots&quot;: &quot;الأوقات المتاحة&quot;,&#10;  &quot;or_set_custom_time&quot;: &quot;أو تحديد وقت مخصص&quot;,&#10;  &quot;selected_appointment_time&quot;: &quot;وقت الموعد المحدد&quot;,&#10;  &quot;continue_to_patient_selection&quot;: &quot;متابعة لاختيار المريض&quot;,&#10;  &quot;for&quot;: &quot;لـ&quot;,&#10;  &quot;at&quot;: &quot;في&quot;,&#10;  &quot;back_to_time&quot;: &quot;العودة للوقت&quot;,&#10;  &quot;search_by_name_email&quot;: &quot;البحث بالاسم أو البريد الإلكتروني...&quot;,&#10;  &quot;or_create_new_patient&quot;: &quot;أو إنشاء مريض جديد&quot;,&#10;  &quot;back_to_patient_search&quot;: &quot;العودة لبحث المريض&quot;,&#10;  &quot;confirm_appointment&quot;: &quot;تأكيد الموعد&quot;,&#10;  &quot;back_to_patient&quot;: &quot;العودة للمريض&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;dashboard&quot;: &quot;لوحة التحكم&quot;,&#10;  &quot;calendar&quot;: &quot;التقويم&quot;,&#10;  &quot;patients&quot;: &quot;المرضى&quot;,&#10;  &quot;reports&quot;: &quot;التقارير&quot;,&#10;  &quot;settings&quot;: &quot;الإعدادات&quot;,&#10;  &quot;clinic_name&quot;: &quot;Imarisys Clinic&quot;,&#10;  &quot;patient_list&quot;: &quot;قائمة المرضى&quot;,&#10;  &quot;add_patient&quot;: &quot;إضافة مريض&quot;,&#10;  &quot;add_new_patient&quot;: &quot;إضافة مريض جديد&quot;,&#10;  &quot;search_patients&quot;: &quot;البحث عن المرضى...&quot;,&#10;  &quot;first_name&quot;: &quot;الاسم الأول&quot;,&#10;  &quot;last_name&quot;: &quot;اسم العائلة&quot;,&#10;  &quot;email&quot;: &quot;البريد الإلكتروني&quot;,&#10;  &quot;phone&quot;: &quot;الهاتف&quot;,&#10;  &quot;date_of_birth&quot;: &quot;تاريخ الميلاد&quot;,&#10;  &quot;address&quot;: &quot;العنوان&quot;,&#10;  &quot;save&quot;: &quot;حفظ&quot;,&#10;  &quot;cancel&quot;: &quot;إلغاء&quot;,&#10;  &quot;edit&quot;: &quot;تعديل&quot;,&#10;  &quot;delete&quot;: &quot;حذف&quot;,&#10;  &quot;view_details&quot;: &quot;عرض التفاصيل&quot;,&#10;  &quot;book_appointment&quot;: &quot;حجز موعد&quot;,&#10;  &quot;appointments&quot;: &quot;المواعيد&quot;,&#10;  &quot;today&quot;: &quot;اليوم&quot;,&#10;  &quot;tomorrow&quot;: &quot;غداً&quot;,&#10;  &quot;this_week&quot;: &quot;هذا الأسبوع&quot;,&#10;  &quot;next_week&quot;: &quot;الأسبوع القادم&quot;,&#10;  &quot;no_appointments&quot;: &quot;لا توجد مواعيد مجدولة&quot;,&#10;  &quot;appointment_time&quot;: &quot;وقت الموعد&quot;,&#10;  &quot;appointment_type&quot;: &quot;نوع الموعد&quot;,&#10;  &quot;notes&quot;: &quot;ملاحظات&quot;,&#10;  &quot;status&quot;: &quot;الحالة&quot;,&#10;  &quot;confirmed&quot;: &quot;مؤكد&quot;,&#10;  &quot;pending&quot;: &quot;في الانتظار&quot;,&#10;  &quot;completed&quot;: &quot;مكتمل&quot;,&#10;  &quot;cancelled&quot;: &quot;ملغى&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;تم إنشاء المريض بنجاح&quot;,&#10;  &quot;patient_added_to_system&quot;: &quot;تم إضافته إلى النظام.&quot;,&#10;  &quot;failed_to_create_patient&quot;: &quot;فشل في إنشاء المريض&quot;,&#10;  &quot;unable_to_create_patient&quot;: &quot;غير قادر على إنشاء المريض. يرجى التحقق من البيانات والمحاولة مرة أخرى.&quot;,&#10;  &quot;patient_updated_successfully&quot;: &quot;تم تحديث المريض بنجاح&quot;,&#10;  &quot;patient_info_updated&quot;: &quot;تم تحديث معلومات المريض.&quot;,&#10;  &quot;failed_to_update_patient&quot;: &quot;فشل في تحديث المريض&quot;,&#10;  &quot;unable_to_update_patient&quot;: &quot;غير قادر على تحديث المريض. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;patient_deleted_successfully&quot;: &quot;تم حذف المريض بنجاح&quot;,&#10;  &quot;patient_removed_from_system&quot;: &quot;تم إزالته من النظام.&quot;,&#10;  &quot;failed_to_delete_patient&quot;: &quot;فشل في حذف المريض&quot;,&#10;  &quot;unable_to_delete_patient&quot;: &quot;غير قادر على حذف المريض. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;patient_not_found&quot;: &quot;المريض غير موجود&quot;,&#10;  &quot;back_to_list&quot;: &quot;العودة إلى القائمة&quot;,&#10;  &quot;edit_patient&quot;: &quot;تعديل المريض&quot;,&#10;  &quot;patient_details&quot;: &quot;تفاصيل المريض&quot;,&#10;  &quot;patients_count&quot;: &quot;{count} من {total} مريض&quot;,&#10;  &quot;no_patients_found&quot;: &quot;لم يتم العثور على مرضى&quot;,&#10;  &quot;start_by_adding_patient&quot;: &quot;ابدأ بإضافة أول مريض لديك إلى النظام.&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;فشل في تحميل المرضى&quot;,&#10;  &quot;connection_error&quot;: &quot;فشل في تحميل المرضى. يرجى التحقق من الاتصال والمحاولة مرة أخرى.&quot;,&#10;  &quot;confirm_delete_patient&quot;: &quot;هل أنت متأكد من أنك تريد حذف {name}؟ لا يمكن التراجع عن هذا الإجراء.&quot;,&#10;  &quot;gender&quot;: &quot;الجنس&quot;,&#10;  &quot;male&quot;: &quot;ذكر&quot;,&#10;  &quot;female&quot;: &quot;أنثى&quot;,&#10;  &quot;other&quot;: &quot;آخر&quot;,&#10;  &quot;street_address&quot;: &quot;عنوان الشارع&quot;,&#10;  &quot;city&quot;: &quot;المدينة&quot;,&#10;  &quot;state&quot;: &quot;الولاية/المحافظة&quot;,&#10;  &quot;zip_code&quot;: &quot;الرمز البريدي&quot;,&#10;  &quot;saving&quot;: &quot;جاري الحفظ...&quot;,&#10;  &quot;create_patient&quot;: &quot;إنشاء مريض&quot;,&#10;  &quot;update_patient&quot;: &quot;تحديث المريض&quot;,&#10;  &quot;first_name_required&quot;: &quot;الاسم الأول مطلوب&quot;,&#10;  &quot;last_name_required&quot;: &quot;اسم العائلة مطلوب&quot;,&#10;  &quot;phone_required&quot;: &quot;الهاتف مطلوب&quot;,&#10;  &quot;email_invalid&quot;: &quot;البريد الإلكتروني غير صحيح&quot;,&#10;  &quot;years_old&quot;: &quot;سنة&quot;,&#10;  &quot;try_adjusting_search&quot;: &quot;حاول تعديل معايير البحث&quot;,&#10;  &quot;back_to_patients&quot;: &quot;← العودة إلى المرضى&quot;,&#10;  &quot;age&quot;: &quot;العمر&quot;,&#10;  &quot;years&quot;: &quot;سنوات&quot;,&#10;  &quot;contact_information&quot;: &quot;معلومات الاتصال&quot;,&#10;  &quot;address_information&quot;: &quot;معلومات العنوان&quot;,&#10;  &quot;upcoming_appointments&quot;: &quot;المواعيد القادمة&quot;,&#10;  &quot;previous_appointments&quot;: &quot;المواعيد السابقة&quot;,&#10;  &quot;no_upcoming_appointments&quot;: &quot;لا توجد مواعيد قادمة&quot;,&#10;  &quot;no_previous_appointments&quot;: &quot;لا توجد مواعيد سابقة&quot;,&#10;  &quot;appointment_booked&quot;: &quot;تم حجز الموعد&quot;,&#10;  &quot;appointment_booked_success&quot;: &quot;تم حجز الموعد بنجاح.&quot;,&#10;  &quot;booking_failed&quot;: &quot;فشل في الحجز&quot;,&#10;  &quot;unable_to_book&quot;: &quot;غير قادر على حجز الموعد&quot;,&#10;  &quot;appointment_updated&quot;: &quot;تم تحديث الموعد&quot;,&#10;  &quot;appointment_updated_success&quot;: &quot;تم تحديث الموعد بنجاح.&quot;,&#10;  &quot;update_failed&quot;: &quot;فشل في التحديث&quot;,&#10;  &quot;unable_to_update_appointment&quot;: &quot;غير قادر على تحديث الموعد&quot;,&#10;  &quot;appointment_cancelled&quot;: &quot;تم إلغاء الموعد&quot;,&#10;  &quot;appointment_cancelled_success&quot;: &quot;تم إلغاء الموعد بنجاح.&quot;,&#10;  &quot;cancellation_failed&quot;: &quot;فشل في الإلغاء&quot;,&#10;  &quot;unable_to_cancel&quot;: &quot;غير قادر على إلغاء الموعد&quot;,&#10;  &quot;status_updated&quot;: &quot;تم تحديث الحالة&quot;,&#10;  &quot;status_updated_to&quot;: &quot;تم تحديث حالة الموعد إلى {status}.&quot;,&#10;  &quot;unable_to_update_status&quot;: &quot;غير قادر على تحديث حالة الموعد&quot;,&#10;  &quot;appointment_deleted&quot;: &quot;تم حذف الموعد&quot;,&#10;  &quot;appointment_deleted_success&quot;: &quot;تم حذف الموعد نهائياً.&quot;,&#10;  &quot;deletion_failed&quot;: &quot;فشل في الحذف&quot;,&#10;  &quot;unable_to_delete_appointment&quot;: &quot;غير قادر على حذف الموعد&quot;,&#10;  &quot;failed_to_load_appointments&quot;: &quot;فشل في تحميل المواعيد&quot;,&#10;  &quot;unable_to_load_appointments&quot;: &quot;غير قادر على تحميل مواعيد المريض&quot;,&#10;  &quot;search&quot;: &quot;بحث&quot;,&#10;  &quot;clear&quot;: &quot;مسح&quot;,&#10;  &quot;age_from&quot;: &quot;العمر من&quot;,&#10;  &quot;age_to&quot;: &quot;العمر إلى&quot;,&#10;  &quot;book_new_appointment&quot;: &quot;حجز موعد جديد&quot;,&#10;  &quot;patient&quot;: &quot;مريض&quot;,&#10;  &quot;appointment_title&quot;: &quot;عنوان الموعد&quot;,&#10;  &quot;appointment_title_required&quot;: &quot;عنوان الموعد *&quot;,&#10;  &quot;appointment_title_placeholder&quot;: &quot;مثال: فحص روتيني، زيارة متابعة&quot;,&#10;  &quot;date&quot;: &quot;التاريخ&quot;,&#10;  &quot;date_required&quot;: &quot;التاريخ *&quot;,&#10;  &quot;start_time&quot;: &quot;وقت البداية&quot;,&#10;  &quot;start_time_required&quot;: &quot;وقت البداية *&quot;,&#10;  &quot;end_time&quot;: &quot;وقت النهاية&quot;,&#10;  &quot;end_time_required&quot;: &quot;وقت النهاية *&quot;,&#10;  &quot;notes_optional&quot;: &quot;ملاحظات (اختيارية)&quot;,&#10;  &quot;notes_placeholder&quot;: &quot;ملاحظات أو تعليمات إضافية...&quot;,&#10;  &quot;booking&quot;: &quot;جاري الحجز...&quot;,&#10;  &quot;title_required&quot;: &quot;العنوان مطلوب&quot;,&#10;  &quot;date_required_error&quot;: &quot;التاريخ مطلوب&quot;,&#10;  &quot;date_past_error&quot;: &quot;لا يمكن أن يكون التاريخ في الماضي&quot;,&#10;  &quot;start_time_required_error&quot;: &quot;وقت البداية مطلوب&quot;,&#10;  &quot;end_time_required_error&quot;: &quot;وقت النهاية مطلوب&quot;,&#10;  &quot;end_time_after_start&quot;: &quot;يجب أن يكون وقت النهاية بعد وقت البداية&quot;,&#10;  &quot;appointment_confirmed&quot;: &quot;تم تأكيد الموعد&quot;,&#10;  &quot;appointment_booked_with&quot;: &quot;تم حجز موعد مع {name} بنجاح.&quot;,&#10;  &quot;booking_error&quot;: &quot;حدثت مشكلة في حجز الموعد. يرجى المحاولة مرة أخرى.&quot;,&#10;  &quot;loading_appointment_types&quot;: &quot;جاري تحميل أنواع المواعيد...&quot;,&#10;  &quot;consultation_with&quot;: &quot;استشارة مع {name}&quot;,&#10;  &quot;min&quot;: &quot;دقيقة&quot;,&#10;  &quot;appointment_calendar&quot;: &quot;تقويم المواعيد&quot;,&#10;  &quot;manage_schedule_appointments&quot;: &quot;إدارة وجدولة مواعيد المرضى.&quot;,&#10;  &quot;new_appointment&quot;: &quot;موعد جديد&quot;,&#10;  &quot;month&quot;: &quot;شهر&quot;,&#10;  &quot;week&quot;: &quot;أسبوع&quot;,&#10;  &quot;day&quot;: &quot;يوم&quot;,&#10;  &quot;loading_appointments&quot;: &quot;جاري تحميل المواعيد...&quot;,&#10;  &quot;error&quot;: &quot;خطأ&quot;,&#10;  &quot;success&quot;: &quot;نجح&quot;,&#10;  &quot;appointment_updated_successfully&quot;: &quot;تم تحديث الموعد بنجاح&quot;,&#10;  &quot;appointment_status_updated_successfully&quot;: &quot;تم تحديث حالة الموعد بنجاح&quot;,&#10;  &quot;appointment_cancelled_successfully&quot;: &quot;تم إلغاء الموعد بنجاح&quot;,&#10;  &quot;appointment_deleted_successfully&quot;: &quot;تم حذف الموعد بنجاح&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;فشل في تحميل المرضى&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;تم إنشاء المريض بنجاح.&quot;,&#10;  &quot;failed_to_create_patient_booking&quot;: &quot;فشل في إنشاء المريض&quot;,&#10;  &quot;select_patient&quot;: &quot;اختيار مريض&quot;,&#10;  &quot;search_for_patient&quot;: &quot;البحث عن مريض...&quot;,&#10;  &quot;create_new_patient&quot;: &quot;إنشاء مريض جديد&quot;,&#10;  &quot;select_time_slot&quot;: &quot;اختيار فترة زمنية&quot;,&#10;  &quot;select_patient_for_appointment&quot;: &quot;اختيار مريض للموعد&quot;,&#10;  &quot;or&quot;: &quot;أو&quot;,&#10;  &quot;previous&quot;: &quot;السابق&quot;,&#10;  &quot;next&quot;: &quot;التالي&quot;,&#10;  &quot;today&quot;: &quot;اليوم&quot;,&#10;  &quot;sunday&quot;: &quot;الأحد&quot;,&#10;  &quot;monday&quot;: &quot;الاثنين&quot;,&#10;  &quot;tuesday&quot;: &quot;الثلاثاء&quot;,&#10;  &quot;wednesday&quot;: &quot;الأربعاء&quot;,&#10;  &quot;thursday&quot;: &quot;الخميس&quot;,&#10;  &quot;friday&quot;: &quot;الجمعة&quot;,&#10;  &quot;saturday&quot;: &quot;السبت&quot;,&#10;  &quot;sun&quot;: &quot;أحد&quot;,&#10;  &quot;mon&quot;: &quot;اثن&quot;,&#10;  &quot;tue&quot;: &quot;ثلا&quot;,&#10;  &quot;wed&quot;: &quot;أرب&quot;,&#10;  &quot;thu&quot;: &quot;خمي&quot;,&#10;  &quot;fri&quot;: &quot;جمع&quot;,&#10;  &quot;sat&quot;: &quot;سبت&quot;,&#10;  &quot;january&quot;: &quot;يناير&quot;,&#10;  &quot;february&quot;: &quot;فبراير&quot;,&#10;  &quot;march&quot;: &quot;مارس&quot;,&#10;  &quot;april&quot;: &quot;أبريل&quot;,&#10;  &quot;may&quot;: &quot;مايو&quot;,&#10;  &quot;june&quot;: &quot;يونيو&quot;,&#10;  &quot;july&quot;: &quot;يوليو&quot;,&#10;  &quot;august&quot;: &quot;أغسطس&quot;,&#10;  &quot;september&quot;: &quot;سبتمبر&quot;,&#10;  &quot;october&quot;: &quot;أكتوبر&quot;,&#10;  &quot;november&quot;: &quot;نوفمبر&quot;,&#10;  &quot;december&quot;: &quot;ديسمبر&quot;,&#10;  &quot;am&quot;: &quot;ص&quot;,&#10;  &quot;pm&quot;: &quot;م&quot;,&#10;  &quot;select_date_time&quot;: &quot;اختيار التاريخ والوقت&quot;,&#10;  &quot;select_date_time_description&quot;: &quot;اختر التاريخ والوقت المفضل للموعد.&quot;,&#10;  &quot;appointment_duration&quot;: &quot;مدة الموعد&quot;,&#10;  &quot;available_time_slots&quot;: &quot;الأوقات المتاحة&quot;,&#10;  &quot;or_set_custom_time&quot;: &quot;أو تحديد وقت مخصص&quot;,&#10;  &quot;selected_appointment_time&quot;: &quot;وقت الموعد المحدد&quot;,&#10;  &quot;continue_to_patient_selection&quot;: &quot;المتابعة إلى اختيار المريض&quot;,&#10;  &quot;for&quot;: &quot;لـ&quot;,&#10;  &quot;at&quot;: &quot;في&quot;,&#10;  &quot;back_to_time&quot;: &quot;العودة إلى الوقت&quot;,&#10;  &quot;search_by_name_email&quot;: &quot;البحث بالاسم أو البريد الإلكتروني...&quot;,&#10;  &quot;or_create_new_patient&quot;: &quot;أو إنشاء مريض جديد&quot;,&#10;  &quot;back_to_patient_search&quot;: &quot;العودة إلى البحث عن مريض&quot;,&#10;  &quot;confirm_appointment&quot;: &quot;تأكيد الموعد&quot;,&#10;  &quot;back_to_patient&quot;: &quot;العودة إلى المريض&quot;,&#10;&#10;  &quot;settings_saved_successfully&quot;: &quot;تم حفظ الإعدادات بنجاح&quot;,&#10;  &quot;failed_to_save_settings&quot;: &quot;فشل في حفظ الإعدادات&quot;,&#10;  &quot;failed_to_load_settings&quot;: &quot;فشل في تحميل الإعدادات&quot;,&#10;  &quot;manage_clinic_preferences&quot;: &quot;إدارة تفضيلات وإعدادات العيادة&quot;,&#10;  &quot;save_changes&quot;: &quot;حفظ التغييرات&quot;,&#10;  &quot;saving&quot;: &quot;جاري الحفظ...&quot;,&#10;&#10;  &quot;general&quot;: &quot;عام&quot;,&#10;  &quot;appointments&quot;: &quot;المواعيد&quot;,&#10;  &quot;notifications&quot;: &quot;الإشعارات&quot;,&#10;  &quot;display&quot;: &quot;العرض&quot;,&#10;&#10;  &quot;localization&quot;: &quot;التوطين&quot;,&#10;  &quot;language&quot;: &quot;اللغة&quot;,&#10;  &quot;country&quot;: &quot;البلد&quot;,&#10;  &quot;timezone&quot;: &quot;المنطقة الزمنية&quot;,&#10;&#10;  &quot;clinic_information&quot;: &quot;معلومات العيادة&quot;,&#10;  &quot;clinic_name&quot;: &quot;اسم العيادة&quot;,&#10;  &quot;clinic_address&quot;: &quot;العنوان&quot;,&#10;  &quot;clinic_phone&quot;: &quot;الهاتف&quot;,&#10;  &quot;clinic_email&quot;: &quot;البريد الإلكتروني&quot;,&#10;  &quot;enter_clinic_name&quot;: &quot;أدخل اسم العيادة&quot;,&#10;  &quot;enter_clinic_address&quot;: &quot;أدخل عنوان العيادة&quot;,&#10;  &quot;enter_phone_number&quot;: &quot;أدخل رقم الهاتف&quot;,&#10;  &quot;enter_email_address&quot;: &quot;أدخل عنوان البريد الإلكتروني&quot;,&#10;&#10;  &quot;working_hours&quot;: &quot;ساعات العمل&quot;,&#10;  &quot;default_appointment_duration&quot;: &quot;مدة الموعد الافتراضية&quot;,&#10;  &quot;start_time&quot;: &quot;وقت البداية&quot;,&#10;  &quot;end_time&quot;: &quot;وقت النهاية&quot;,&#10;  &quot;working_days&quot;: &quot;أيام العمل&quot;,&#10;  &quot;minutes&quot;: &quot;دقائق&quot;,&#10;  &quot;hour&quot;: &quot;ساعة&quot;,&#10;  &quot;hours&quot;: &quot;ساعات&quot;,&#10;  &quot;day&quot;: &quot;يوم&quot;,&#10;&#10;  &quot;notification_preferences&quot;: &quot;تفضيلات الإشعارات&quot;,&#10;  &quot;email_notifications&quot;: &quot;إشعارات البريد الإلكتروني&quot;,&#10;  &quot;receive_notifications_email&quot;: &quot;تلقي الإشعارات عبر البريد الإلكتروني&quot;,&#10;  &quot;sms_notifications&quot;: &quot;إشعارات الرسائل النصية&quot;,&#10;  &quot;receive_notifications_sms&quot;: &quot;تلقي الإشعارات عبر الرسائل النصية&quot;,&#10;  &quot;appointment_reminders&quot;: &quot;تذكير المواعيد&quot;,&#10;  &quot;send_reminders_before&quot;: &quot;إرسال تذكير قبل المواعيد&quot;,&#10;  &quot;reminder_time&quot;: &quot;وقت التذكير&quot;,&#10;  &quot;minutes_before&quot;: &quot;دقائق قبل&quot;,&#10;  &quot;before&quot;: &quot;قبل&quot;,&#10;&#10;  &quot;display_preferences&quot;: &quot;تفضيلات العرض&quot;,&#10;  &quot;date_format&quot;: &quot;تنسيق التاريخ&quot;,&#10;  &quot;time_format&quot;: &quot;تنسيق الوقت&quot;,&#10;  &quot;currency&quot;: &quot;العملة&quot;,&#10;  &quot;temperature_unit&quot;: &quot;وحدة درجة الحرارة&quot;,&#10;  &quot;show_weather_widget&quot;: &quot;إظهار أداة الطقس&quot;,&#10;  &quot;display_weather_dashboard&quot;: &quot;عرض معلومات الطقس على لوحة التحكم&quot;,&#10;  &quot;hour_format_12&quot;: &quot;12 ساعة (ص/م)&quot;,&#10;  &quot;hour_format_24&quot;: &quot;24 ساعة&quot;,&#10;  &quot;celsius&quot;: &quot;مئوية (°م)&quot;,&#10;  &quot;fahrenheit&quot;: &quot;فهرنهايت (°ف)&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/i18n/locales/fr.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/i18n/locales/fr.json" />
              <option name="originalContent" value="{&#10;  &quot;dashboard&quot;: &quot;Tableau de bord&quot;,&#10;  &quot;calendar&quot;: &quot;Calendrier&quot;,&#10;  &quot;patients&quot;: &quot;Patients&quot;,&#10;  &quot;reports&quot;: &quot;Rapports&quot;,&#10;  &quot;settings&quot;: &quot;Paramètres&quot;,&#10;  &quot;clinic_name&quot;: &quot;Imarisys Clinic&quot;,&#10;  &quot;patient_list&quot;: &quot;Liste des patients&quot;,&#10;  &quot;add_patient&quot;: &quot;Ajouter un patient&quot;,&#10;  &quot;add_new_patient&quot;: &quot;Ajouter un nouveau patient&quot;,&#10;  &quot;search_patients&quot;: &quot;Rechercher des patients...&quot;,&#10;  &quot;first_name&quot;: &quot;Prénom&quot;,&#10;  &quot;last_name&quot;: &quot;Nom de famille&quot;,&#10;  &quot;email&quot;: &quot;E-mail&quot;,&#10;  &quot;phone&quot;: &quot;Téléphone&quot;,&#10;  &quot;date_of_birth&quot;: &quot;Date de naissance&quot;,&#10;  &quot;address&quot;: &quot;Adresse&quot;,&#10;  &quot;save&quot;: &quot;Enregistrer&quot;,&#10;  &quot;cancel&quot;: &quot;Annuler&quot;,&#10;  &quot;edit&quot;: &quot;Modifier&quot;,&#10;  &quot;delete&quot;: &quot;Supprimer&quot;,&#10;  &quot;view_details&quot;: &quot;Voir les détails&quot;,&#10;  &quot;book_appointment&quot;: &quot;Prendre rendez-vous&quot;,&#10;  &quot;appointments&quot;: &quot;Rendez-vous&quot;,&#10;  &quot;today&quot;: &quot;Aujourd'hui&quot;,&#10;  &quot;tomorrow&quot;: &quot;Demain&quot;,&#10;  &quot;this_week&quot;: &quot;Cette semaine&quot;,&#10;  &quot;next_week&quot;: &quot;La semaine prochaine&quot;,&#10;  &quot;no_appointments&quot;: &quot;Aucun rendez-vous programmé&quot;,&#10;  &quot;appointment_time&quot;: &quot;Heure du rendez-vous&quot;,&#10;  &quot;appointment_type&quot;: &quot;Type de rendez-vous&quot;,&#10;  &quot;notes&quot;: &quot;Notes&quot;,&#10;  &quot;status&quot;: &quot;Statut&quot;,&#10;  &quot;confirmed&quot;: &quot;Confirmé&quot;,&#10;  &quot;pending&quot;: &quot;En attente&quot;,&#10;  &quot;completed&quot;: &quot;Terminé&quot;,&#10;  &quot;cancelled&quot;: &quot;Annulé&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient créé avec succès&quot;,&#10;  &quot;patient_added_to_system&quot;: &quot;a été ajouté au système.&quot;,&#10;  &quot;failed_to_create_patient&quot;: &quot;Échec de la création du patient&quot;,&#10;  &quot;unable_to_create_patient&quot;: &quot;Impossible de créer le patient. Veuillez vérifier vos données et réessayer.&quot;,&#10;  &quot;patient_updated_successfully&quot;: &quot;Patient mis à jour avec succès&quot;,&#10;  &quot;patient_info_updated&quot;: &quot;Les informations ont été mises à jour.&quot;,&#10;  &quot;failed_to_update_patient&quot;: &quot;Échec de la mise à jour du patient&quot;,&#10;  &quot;unable_to_update_patient&quot;: &quot;Impossible de mettre à jour le patient. Veuillez réessayer.&quot;,&#10;  &quot;patient_deleted_successfully&quot;: &quot;Patient supprimé avec succès&quot;,&#10;  &quot;patient_removed_from_system&quot;: &quot;a été retiré du système.&quot;,&#10;  &quot;failed_to_delete_patient&quot;: &quot;Échec de la suppression du patient&quot;,&#10;  &quot;unable_to_delete_patient&quot;: &quot;Impossible de supprimer le patient. Veuillez réessayer.&quot;,&#10;  &quot;patient_not_found&quot;: &quot;Patient non trouvé&quot;,&#10;  &quot;back_to_list&quot;: &quot;Retour à la liste&quot;,&#10;  &quot;edit_patient&quot;: &quot;Modifier le patient&quot;,&#10;  &quot;patient_details&quot;: &quot;Détails du patient&quot;,&#10;  &quot;patients_count&quot;: &quot;{count} sur {total} patients&quot;,&#10;  &quot;no_patients_found&quot;: &quot;Aucun patient trouvé&quot;,&#10;  &quot;start_by_adding_patient&quot;: &quot;Commencez par ajouter votre premier patient au système.&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Échec du chargement des patients&quot;,&#10;  &quot;connection_error&quot;: &quot;Échec du chargement des patients. Veuillez vérifier votre connexion et réessayer.&quot;,&#10;  &quot;confirm_delete_patient&quot;: &quot;Êtes-vous sûr de vouloir supprimer {name} ? Cette action ne peut pas être annulée.&quot;,&#10;  &quot;gender&quot;: &quot;Sexe&quot;,&#10;  &quot;male&quot;: &quot;Homme&quot;,&#10;  &quot;female&quot;: &quot;Femme&quot;,&#10;  &quot;other&quot;: &quot;Autre&quot;,&#10;  &quot;street_address&quot;: &quot;Adresse&quot;,&#10;  &quot;city&quot;: &quot;Ville&quot;,&#10;  &quot;state&quot;: &quot;Province/État&quot;,&#10;  &quot;zip_code&quot;: &quot;Code postal&quot;,&#10;  &quot;saving&quot;: &quot;Enregistrement...&quot;,&#10;  &quot;create_patient&quot;: &quot;Créer le patient&quot;,&#10;  &quot;update_patient&quot;: &quot;Mettre à jour le patient&quot;,&#10;  &quot;first_name_required&quot;: &quot;Le prénom est requis&quot;,&#10;  &quot;last_name_required&quot;: &quot;Le nom de famille est requis&quot;,&#10;  &quot;phone_required&quot;: &quot;Le téléphone est requis&quot;,&#10;  &quot;email_invalid&quot;: &quot;L'e-mail n'est pas valide&quot;,&#10;  &quot;years_old&quot;: &quot;ans&quot;,&#10;  &quot;try_adjusting_search&quot;: &quot;Essayez d'ajuster vos critères de recherche&quot;,&#10;  &quot;back_to_patients&quot;: &quot;← Retour aux patients&quot;,&#10;  &quot;age&quot;: &quot;Âge&quot;,&#10;  &quot;years&quot;: &quot;ans&quot;,&#10;  &quot;contact_information&quot;: &quot;Informations de contact&quot;,&#10;  &quot;address_information&quot;: &quot;Informations d'adresse&quot;,&#10;  &quot;upcoming_appointments&quot;: &quot;Rendez-vous à venir&quot;,&#10;  &quot;previous_appointments&quot;: &quot;Rendez-vous précédents&quot;,&#10;  &quot;no_upcoming_appointments&quot;: &quot;Aucun rendez-vous à venir&quot;,&#10;  &quot;no_previous_appointments&quot;: &quot;Aucun rendez-vous précédent&quot;,&#10;  &quot;appointment_booked&quot;: &quot;Rendez-vous pris&quot;,&#10;  &quot;appointment_booked_success&quot;: &quot;Le rendez-vous a été pris avec succès.&quot;,&#10;  &quot;booking_failed&quot;: &quot;Échec de la prise de rendez-vous&quot;,&#10;  &quot;unable_to_book&quot;: &quot;Impossible de prendre le rendez-vous&quot;,&#10;  &quot;appointment_updated&quot;: &quot;Rendez-vous mis à jour&quot;,&#10;  &quot;appointment_updated_success&quot;: &quot;Le rendez-vous a été mis à jour avec succès.&quot;,&#10;  &quot;update_failed&quot;: &quot;Échec de la mise à jour&quot;,&#10;  &quot;unable_to_update_appointment&quot;: &quot;Impossible de mettre à jour le rendez-vous&quot;,&#10;  &quot;appointment_cancelled&quot;: &quot;Rendez-vous annulé&quot;,&#10;  &quot;appointment_cancelled_success&quot;: &quot;Le rendez-vous a été annulé avec succès.&quot;,&#10;  &quot;cancellation_failed&quot;: &quot;Échec de l'annulation&quot;,&#10;  &quot;unable_to_cancel&quot;: &quot;Impossible d'annuler le rendez-vous&quot;,&#10;  &quot;status_updated&quot;: &quot;Statut mis à jour&quot;,&#10;  &quot;status_updated_to&quot;: &quot;Le statut du rendez-vous a été mis à jour à {status}.&quot;,&#10;  &quot;unable_to_update_status&quot;: &quot;Impossible de mettre à jour le statut du rendez-vous&quot;,&#10;  &quot;appointment_deleted&quot;: &quot;Rendez-vous supprimé&quot;,&#10;  &quot;appointment_deleted_success&quot;: &quot;Le rendez-vous a été supprimé définitivement.&quot;,&#10;  &quot;deletion_failed&quot;: &quot;Échec de la suppression&quot;,&#10;  &quot;unable_to_delete_appointment&quot;: &quot;Impossible de supprimer le rendez-vous&quot;,&#10;  &quot;failed_to_load_appointments&quot;: &quot;Échec du chargement des rendez-vous&quot;,&#10;  &quot;unable_to_load_appointments&quot;: &quot;Impossible de charger les rendez-vous du patient&quot;,&#10;  &quot;search&quot;: &quot;Rechercher&quot;,&#10;  &quot;clear&quot;: &quot;Effacer&quot;,&#10;  &quot;age_from&quot;: &quot;Âge de&quot;,&#10;  &quot;age_to&quot;: &quot;Âge à&quot;,&#10;  &quot;book_new_appointment&quot;: &quot;Prendre un nouveau rendez-vous&quot;,&#10;  &quot;patient&quot;: &quot;Patient&quot;,&#10;  &quot;appointment_title&quot;: &quot;Titre du rendez-vous&quot;,&#10;  &quot;appointment_title_required&quot;: &quot;Titre du rendez-vous *&quot;,&#10;  &quot;appointment_title_placeholder&quot;: &quot;ex. Visite de routine, Visite de suivi&quot;,&#10;  &quot;date&quot;: &quot;Date&quot;,&#10;  &quot;date_required&quot;: &quot;Date *&quot;,&#10;  &quot;start_time&quot;: &quot;Heure de début&quot;,&#10;  &quot;start_time_required&quot;: &quot;Heure de début *&quot;,&#10;  &quot;end_time&quot;: &quot;Heure de fin&quot;,&#10;  &quot;end_time_required&quot;: &quot;Heure de fin *&quot;,&#10;  &quot;notes_optional&quot;: &quot;Notes (Optionnel)&quot;,&#10;  &quot;notes_placeholder&quot;: &quot;Notes ou instructions supplémentaires...&quot;,&#10;  &quot;booking&quot;: &quot;Réservation...&quot;,&#10;  &quot;title_required&quot;: &quot;Le titre est requis&quot;,&#10;  &quot;date_required_error&quot;: &quot;La date est requise&quot;,&#10;  &quot;date_past_error&quot;: &quot;La date ne peut pas être dans le passé&quot;,&#10;  &quot;start_time_required_error&quot;: &quot;L'heure de début est requise&quot;,&#10;  &quot;end_time_required_error&quot;: &quot;L'heure de fin est requise&quot;,&#10;  &quot;end_time_after_start&quot;: &quot;L'heure de fin doit être après l'heure de début&quot;,&#10;  &quot;appointment_confirmed&quot;: &quot;Rendez-vous confirmé&quot;,&#10;  &quot;appointment_booked_with&quot;: &quot;Rendez-vous avec {name} a été pris avec succès.&quot;,&#10;  &quot;booking_error&quot;: &quot;Il y a eu un problème lors de la réservation. Veuillez réessayer.&quot;,&#10;  &quot;loading_appointment_types&quot;: &quot;Chargement des types de rendez-vous...&quot;,&#10;  &quot;consultation_with&quot;: &quot;Consultation avec {name}&quot;,&#10;  &quot;min&quot;: &quot;min&quot;,&#10;  &quot;appointment_calendar&quot;: &quot;Calendrier des rendez-vous&quot;,&#10;  &quot;manage_schedule_appointments&quot;: &quot;Gérer et planifier les rendez-vous des patients.&quot;,&#10;  &quot;new_appointment&quot;: &quot;Nouveau rendez-vous&quot;,&#10;  &quot;month&quot;: &quot;Mois&quot;,&#10;  &quot;week&quot;: &quot;Semaine&quot;,&#10;  &quot;day&quot;: &quot;Jour&quot;,&#10;  &quot;loading_appointments&quot;: &quot;Chargement des rendez-vous...&quot;,&#10;  &quot;error&quot;: &quot;Erreur&quot;,&#10;  &quot;success&quot;: &quot;Succès&quot;,&#10;  &quot;appointment_updated_successfully&quot;: &quot;Rendez-vous mis à jour avec succès&quot;,&#10;  &quot;appointment_status_updated_successfully&quot;: &quot;Statut du rendez-vous mis à jour avec succès&quot;,&#10;  &quot;appointment_cancelled_successfully&quot;: &quot;Rendez-vous annulé avec succès&quot;,&#10;  &quot;appointment_deleted_successfully&quot;: &quot;Rendez-vous supprimé avec succès&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Échec du chargement des patients&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient créé avec succès.&quot;,&#10;  &quot;failed_to_create_patient_booking&quot;: &quot;Échec de la création du patient&quot;,&#10;  &quot;select_patient&quot;: &quot;Sélectionner un patient&quot;,&#10;  &quot;search_for_patient&quot;: &quot;Rechercher un patient...&quot;,&#10;  &quot;create_new_patient&quot;: &quot;Créer un nouveau patient&quot;,&#10;  &quot;select_time_slot&quot;: &quot;Sélectionner un créneau&quot;,&#10;  &quot;select_patient_for_appointment&quot;: &quot;Sélectionner un patient pour le rendez-vous&quot;,&#10;  &quot;or&quot;: &quot;ou&quot;,&#10;  &quot;previous&quot;: &quot;Précédent&quot;,&#10;  &quot;next&quot;: &quot;Suivant&quot;,&#10;  &quot;today&quot;: &quot;Aujourd'hui&quot;,&#10;  &quot;sunday&quot;: &quot;Dimanche&quot;,&#10;  &quot;monday&quot;: &quot;Lundi&quot;,&#10;  &quot;tuesday&quot;: &quot;Mardi&quot;,&#10;  &quot;wednesday&quot;: &quot;Mercredi&quot;,&#10;  &quot;thursday&quot;: &quot;Jeudi&quot;,&#10;  &quot;friday&quot;: &quot;Vendredi&quot;,&#10;  &quot;saturday&quot;: &quot;Samedi&quot;,&#10;  &quot;sun&quot;: &quot;Dim&quot;,&#10;  &quot;mon&quot;: &quot;Lun&quot;,&#10;  &quot;tue&quot;: &quot;Mar&quot;,&#10;  &quot;wed&quot;: &quot;Mer&quot;,&#10;  &quot;thu&quot;: &quot;Jeu&quot;,&#10;  &quot;fri&quot;: &quot;Ven&quot;,&#10;  &quot;sat&quot;: &quot;Sam&quot;,&#10;  &quot;january&quot;: &quot;Janvier&quot;,&#10;  &quot;february&quot;: &quot;Février&quot;,&#10;  &quot;march&quot;: &quot;Mars&quot;,&#10;  &quot;april&quot;: &quot;Avril&quot;,&#10;  &quot;may&quot;: &quot;Mai&quot;,&#10;  &quot;june&quot;: &quot;Juin&quot;,&#10;  &quot;july&quot;: &quot;Juillet&quot;,&#10;  &quot;august&quot;: &quot;Août&quot;,&#10;  &quot;september&quot;: &quot;Septembre&quot;,&#10;  &quot;october&quot;: &quot;Octobre&quot;,&#10;  &quot;november&quot;: &quot;Novembre&quot;,&#10;  &quot;december&quot;: &quot;Décembre&quot;,&#10;  &quot;am&quot;: &quot;AM&quot;,&#10;  &quot;pm&quot;: &quot;PM&quot;,&#10;  &quot;select_date_time&quot;: &quot;Sélectionner date et heure&quot;,&#10;  &quot;select_date_time_description&quot;: &quot;Choisissez votre date et heure préférées pour le rendez-vous.&quot;,&#10;  &quot;appointment_duration&quot;: &quot;Durée du rendez-vous&quot;,&#10;  &quot;available_time_slots&quot;: &quot;Créneaux disponibles&quot;,&#10;  &quot;or_set_custom_time&quot;: &quot;Ou définir une heure personnalisée&quot;,&#10;  &quot;selected_appointment_time&quot;: &quot;Heure de rendez-vous sélectionnée&quot;,&#10;  &quot;continue_to_patient_selection&quot;: &quot;Continuer vers la sélection du patient&quot;,&#10;  &quot;for&quot;: &quot;pour&quot;,&#10;  &quot;at&quot;: &quot;à&quot;,&#10;  &quot;back_to_time&quot;: &quot;Retour à l'heure&quot;,&#10;  &quot;search_by_name_email&quot;: &quot;Rechercher par nom ou e-mail...&quot;,&#10;  &quot;or_create_new_patient&quot;: &quot;Ou créer un nouveau patient&quot;,&#10;  &quot;back_to_patient_search&quot;: &quot;Retour à la recherche de patient&quot;,&#10;  &quot;confirm_appointment&quot;: &quot;Confirmer le rendez-vous&quot;,&#10;  &quot;back_to_patient&quot;: &quot;Retour au patient&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;dashboard&quot;: &quot;Tableau de bord&quot;,&#10;  &quot;calendar&quot;: &quot;Calendrier&quot;,&#10;  &quot;patients&quot;: &quot;Patients&quot;,&#10;  &quot;reports&quot;: &quot;Rapports&quot;,&#10;  &quot;settings&quot;: &quot;Paramètres&quot;,&#10;  &quot;clinic_name&quot;: &quot;Imarisys Clinic&quot;,&#10;  &quot;patient_list&quot;: &quot;Liste des patients&quot;,&#10;  &quot;add_patient&quot;: &quot;Ajouter un patient&quot;,&#10;  &quot;add_new_patient&quot;: &quot;Ajouter un nouveau patient&quot;,&#10;  &quot;search_patients&quot;: &quot;Rechercher des patients...&quot;,&#10;  &quot;first_name&quot;: &quot;Prénom&quot;,&#10;  &quot;last_name&quot;: &quot;Nom de famille&quot;,&#10;  &quot;email&quot;: &quot;E-mail&quot;,&#10;  &quot;phone&quot;: &quot;Téléphone&quot;,&#10;  &quot;date_of_birth&quot;: &quot;Date de naissance&quot;,&#10;  &quot;address&quot;: &quot;Adresse&quot;,&#10;  &quot;save&quot;: &quot;Enregistrer&quot;,&#10;  &quot;cancel&quot;: &quot;Annuler&quot;,&#10;  &quot;edit&quot;: &quot;Modifier&quot;,&#10;  &quot;delete&quot;: &quot;Supprimer&quot;,&#10;  &quot;view_details&quot;: &quot;Voir les détails&quot;,&#10;  &quot;book_appointment&quot;: &quot;Prendre rendez-vous&quot;,&#10;  &quot;appointments&quot;: &quot;Rendez-vous&quot;,&#10;  &quot;today&quot;: &quot;Aujourd'hui&quot;,&#10;  &quot;tomorrow&quot;: &quot;Demain&quot;,&#10;  &quot;this_week&quot;: &quot;Cette semaine&quot;,&#10;  &quot;next_week&quot;: &quot;La semaine prochaine&quot;,&#10;  &quot;no_appointments&quot;: &quot;Aucun rendez-vous programmé&quot;,&#10;  &quot;appointment_time&quot;: &quot;Heure du rendez-vous&quot;,&#10;  &quot;appointment_type&quot;: &quot;Type de rendez-vous&quot;,&#10;  &quot;notes&quot;: &quot;Notes&quot;,&#10;  &quot;status&quot;: &quot;Statut&quot;,&#10;  &quot;confirmed&quot;: &quot;Confirmé&quot;,&#10;  &quot;pending&quot;: &quot;En attente&quot;,&#10;  &quot;completed&quot;: &quot;Terminé&quot;,&#10;  &quot;cancelled&quot;: &quot;Annulé&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient créé avec succès&quot;,&#10;  &quot;patient_added_to_system&quot;: &quot;a été ajouté au système.&quot;,&#10;  &quot;failed_to_create_patient&quot;: &quot;Échec de la création du patient&quot;,&#10;  &quot;unable_to_create_patient&quot;: &quot;Impossible de créer le patient. Veuillez vérifier vos données et réessayer.&quot;,&#10;  &quot;patient_updated_successfully&quot;: &quot;Patient mis à jour avec succès&quot;,&#10;  &quot;patient_info_updated&quot;: &quot;Les informations ont été mises à jour.&quot;,&#10;  &quot;failed_to_update_patient&quot;: &quot;Échec de la mise à jour du patient&quot;,&#10;  &quot;unable_to_update_patient&quot;: &quot;Impossible de mettre à jour le patient. Veuillez réessayer.&quot;,&#10;  &quot;patient_deleted_successfully&quot;: &quot;Patient supprimé avec succès&quot;,&#10;  &quot;patient_removed_from_system&quot;: &quot;a été retiré du système.&quot;,&#10;  &quot;failed_to_delete_patient&quot;: &quot;Échec de la suppression du patient&quot;,&#10;  &quot;unable_to_delete_patient&quot;: &quot;Impossible de supprimer le patient. Veuillez réessayer.&quot;,&#10;  &quot;patient_not_found&quot;: &quot;Patient non trouvé&quot;,&#10;  &quot;back_to_list&quot;: &quot;Retour à la liste&quot;,&#10;  &quot;edit_patient&quot;: &quot;Modifier le patient&quot;,&#10;  &quot;patient_details&quot;: &quot;Détails du patient&quot;,&#10;  &quot;patients_count&quot;: &quot;{count} sur {total} patients&quot;,&#10;  &quot;no_patients_found&quot;: &quot;Aucun patient trouvé&quot;,&#10;  &quot;start_by_adding_patient&quot;: &quot;Commencez par ajouter votre premier patient au système.&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Échec du chargement des patients&quot;,&#10;  &quot;connection_error&quot;: &quot;Échec du chargement des patients. Vérifiez votre connexion et réessayez.&quot;,&#10;  &quot;confirm_delete_patient&quot;: &quot;Êtes-vous sûr de vouloir supprimer {name} ? Cette action ne peut pas être annulée.&quot;,&#10;  &quot;gender&quot;: &quot;Genre&quot;,&#10;  &quot;male&quot;: &quot;Homme&quot;,&#10;  &quot;female&quot;: &quot;Femme&quot;,&#10;  &quot;other&quot;: &quot;Autre&quot;,&#10;  &quot;street_address&quot;: &quot;Adresse&quot;,&#10;  &quot;city&quot;: &quot;Ville&quot;,&#10;  &quot;state&quot;: &quot;État/Province&quot;,&#10;  &quot;zip_code&quot;: &quot;Code postal&quot;,&#10;  &quot;saving&quot;: &quot;Enregistrement...&quot;,&#10;  &quot;create_patient&quot;: &quot;Créer un patient&quot;,&#10;  &quot;update_patient&quot;: &quot;Mettre à jour le patient&quot;,&#10;  &quot;first_name_required&quot;: &quot;Le prénom est requis&quot;,&#10;  &quot;last_name_required&quot;: &quot;Le nom de famille est requis&quot;,&#10;  &quot;phone_required&quot;: &quot;Le téléphone est requis&quot;,&#10;  &quot;email_invalid&quot;: &quot;L'e-mail n'est pas valide&quot;,&#10;  &quot;years_old&quot;: &quot;ans&quot;,&#10;  &quot;try_adjusting_search&quot;: &quot;Essayez d'ajuster vos critères de recherche&quot;,&#10;  &quot;back_to_patients&quot;: &quot;← Retour aux patients&quot;,&#10;  &quot;age&quot;: &quot;Âge&quot;,&#10;  &quot;years&quot;: &quot;ans&quot;,&#10;  &quot;contact_information&quot;: &quot;Informations de contact&quot;,&#10;  &quot;address_information&quot;: &quot;Informations d'adresse&quot;,&#10;  &quot;upcoming_appointments&quot;: &quot;Rendez-vous à venir&quot;,&#10;  &quot;previous_appointments&quot;: &quot;Rendez-vous précédents&quot;,&#10;  &quot;no_upcoming_appointments&quot;: &quot;Aucun rendez-vous à venir&quot;,&#10;  &quot;no_previous_appointments&quot;: &quot;Aucun rendez-vous précédent&quot;,&#10;  &quot;appointment_booked&quot;: &quot;Rendez-vous réservé&quot;,&#10;  &quot;appointment_booked_success&quot;: &quot;Le rendez-vous a été réservé avec succès.&quot;,&#10;  &quot;booking_failed&quot;: &quot;Échec de la réservation&quot;,&#10;  &quot;unable_to_book&quot;: &quot;Impossible de réserver le rendez-vous&quot;,&#10;  &quot;appointment_updated&quot;: &quot;Rendez-vous mis à jour&quot;,&#10;  &quot;appointment_updated_success&quot;: &quot;Le rendez-vous a été mis à jour avec succès.&quot;,&#10;  &quot;update_failed&quot;: &quot;Échec de la mise à jour&quot;,&#10;  &quot;unable_to_update_appointment&quot;: &quot;Impossible de mettre à jour le rendez-vous&quot;,&#10;  &quot;appointment_cancelled&quot;: &quot;Rendez-vous annulé&quot;,&#10;  &quot;appointment_cancelled_success&quot;: &quot;Le rendez-vous a été annulé avec succès.&quot;,&#10;  &quot;cancellation_failed&quot;: &quot;Échec de l'annulation&quot;,&#10;  &quot;unable_to_cancel&quot;: &quot;Impossible d'annuler le rendez-vous&quot;,&#10;  &quot;status_updated&quot;: &quot;Statut mis à jour&quot;,&#10;  &quot;status_updated_to&quot;: &quot;Le statut du rendez-vous a été mis à jour vers {status}.&quot;,&#10;  &quot;unable_to_update_status&quot;: &quot;Impossible de mettre à jour le statut du rendez-vous&quot;,&#10;  &quot;appointment_deleted&quot;: &quot;Rendez-vous supprimé&quot;,&#10;  &quot;appointment_deleted_success&quot;: &quot;Le rendez-vous a été définitivement supprimé.&quot;,&#10;  &quot;deletion_failed&quot;: &quot;Échec de la suppression&quot;,&#10;  &quot;unable_to_delete_appointment&quot;: &quot;Impossible de supprimer le rendez-vous&quot;,&#10;  &quot;failed_to_load_appointments&quot;: &quot;Échec du chargement des rendez-vous&quot;,&#10;  &quot;unable_to_load_appointments&quot;: &quot;Impossible de charger les rendez-vous du patient&quot;,&#10;  &quot;search&quot;: &quot;Rechercher&quot;,&#10;  &quot;clear&quot;: &quot;Effacer&quot;,&#10;  &quot;age_from&quot;: &quot;Âge de&quot;,&#10;  &quot;age_to&quot;: &quot;Âge à&quot;,&#10;  &quot;book_new_appointment&quot;: &quot;Réserver un nouveau rendez-vous&quot;,&#10;  &quot;patient&quot;: &quot;Patient&quot;,&#10;  &quot;appointment_title&quot;: &quot;Titre du rendez-vous&quot;,&#10;  &quot;appointment_title_required&quot;: &quot;Titre du rendez-vous *&quot;,&#10;  &quot;appointment_title_placeholder&quot;: &quot;ex. Examen de routine, Visite de suivi&quot;,&#10;  &quot;date&quot;: &quot;Date&quot;,&#10;  &quot;date_required&quot;: &quot;Date *&quot;,&#10;  &quot;start_time&quot;: &quot;Heure de début&quot;,&#10;  &quot;start_time_required&quot;: &quot;Heure de début *&quot;,&#10;  &quot;end_time&quot;: &quot;Heure de fin&quot;,&#10;  &quot;end_time_required&quot;: &quot;Heure de fin *&quot;,&#10;  &quot;notes_optional&quot;: &quot;Notes (Optionnel)&quot;,&#10;  &quot;notes_placeholder&quot;: &quot;Notes ou instructions supplémentaires...&quot;,&#10;  &quot;booking&quot;: &quot;Réservation...&quot;,&#10;  &quot;title_required&quot;: &quot;Le titre est requis&quot;,&#10;  &quot;date_required_error&quot;: &quot;La date est requise&quot;,&#10;  &quot;date_past_error&quot;: &quot;La date ne peut pas être dans le passé&quot;,&#10;  &quot;start_time_required_error&quot;: &quot;L'heure de début est requise&quot;,&#10;  &quot;end_time_required_error&quot;: &quot;L'heure de fin est requise&quot;,&#10;  &quot;end_time_after_start&quot;: &quot;L'heure de fin doit être après l'heure de début&quot;,&#10;  &quot;appointment_confirmed&quot;: &quot;Rendez-vous confirmé&quot;,&#10;  &quot;appointment_booked_with&quot;: &quot;Rendez-vous avec {name} réservé avec succès.&quot;,&#10;  &quot;booking_error&quot;: &quot;Il y a eu un problème lors de la réservation du rendez-vous. Veuillez réessayer.&quot;,&#10;  &quot;loading_appointment_types&quot;: &quot;Chargement des types de rendez-vous...&quot;,&#10;  &quot;consultation_with&quot;: &quot;Consultation avec {name}&quot;,&#10;  &quot;min&quot;: &quot;min&quot;,&#10;  &quot;appointment_calendar&quot;: &quot;Calendrier des rendez-vous&quot;,&#10;  &quot;manage_schedule_appointments&quot;: &quot;Gérer et planifier les rendez-vous des patients.&quot;,&#10;  &quot;new_appointment&quot;: &quot;Nouveau rendez-vous&quot;,&#10;  &quot;month&quot;: &quot;Mois&quot;,&#10;  &quot;week&quot;: &quot;Semaine&quot;,&#10;  &quot;day&quot;: &quot;Jour&quot;,&#10;  &quot;loading_appointments&quot;: &quot;Chargement des rendez-vous...&quot;,&#10;  &quot;error&quot;: &quot;Erreur&quot;,&#10;  &quot;success&quot;: &quot;Succès&quot;,&#10;  &quot;appointment_updated_successfully&quot;: &quot;Rendez-vous mis à jour avec succès&quot;,&#10;  &quot;appointment_status_updated_successfully&quot;: &quot;Statut du rendez-vous mis à jour avec succès&quot;,&#10;  &quot;appointment_cancelled_successfully&quot;: &quot;Rendez-vous annulé avec succès&quot;,&#10;  &quot;appointment_deleted_successfully&quot;: &quot;Rendez-vous supprimé avec succès&quot;,&#10;  &quot;failed_to_load_patients&quot;: &quot;Échec du chargement des patients&quot;,&#10;  &quot;patient_created_successfully&quot;: &quot;Patient créé avec succès.&quot;,&#10;  &quot;failed_to_create_patient_booking&quot;: &quot;Échec de la création du patient&quot;,&#10;  &quot;select_patient&quot;: &quot;Sélectionner un patient&quot;,&#10;  &quot;search_for_patient&quot;: &quot;Rechercher un patient...&quot;,&#10;  &quot;create_new_patient&quot;: &quot;Créer un nouveau patient&quot;,&#10;  &quot;select_time_slot&quot;: &quot;Sélectionner un créneau horaire&quot;,&#10;  &quot;select_patient_for_appointment&quot;: &quot;Sélectionner un patient pour le rendez-vous&quot;,&#10;  &quot;or&quot;: &quot;ou&quot;,&#10;  &quot;previous&quot;: &quot;Précédent&quot;,&#10;  &quot;next&quot;: &quot;Suivant&quot;,&#10;  &quot;today&quot;: &quot;Aujourd'hui&quot;,&#10;  &quot;sunday&quot;: &quot;Dimanche&quot;,&#10;  &quot;monday&quot;: &quot;Lundi&quot;,&#10;  &quot;tuesday&quot;: &quot;Mardi&quot;,&#10;  &quot;wednesday&quot;: &quot;Mercredi&quot;,&#10;  &quot;thursday&quot;: &quot;Jeudi&quot;,&#10;  &quot;friday&quot;: &quot;Vendredi&quot;,&#10;  &quot;saturday&quot;: &quot;Samedi&quot;,&#10;  &quot;sun&quot;: &quot;Dim&quot;,&#10;  &quot;mon&quot;: &quot;Lun&quot;,&#10;  &quot;tue&quot;: &quot;Mar&quot;,&#10;  &quot;wed&quot;: &quot;Mer&quot;,&#10;  &quot;thu&quot;: &quot;Jeu&quot;,&#10;  &quot;fri&quot;: &quot;Ven&quot;,&#10;  &quot;sat&quot;: &quot;Sam&quot;,&#10;  &quot;january&quot;: &quot;Janvier&quot;,&#10;  &quot;february&quot;: &quot;Février&quot;,&#10;  &quot;march&quot;: &quot;Mars&quot;,&#10;  &quot;april&quot;: &quot;Avril&quot;,&#10;  &quot;may&quot;: &quot;Mai&quot;,&#10;  &quot;june&quot;: &quot;Juin&quot;,&#10;  &quot;july&quot;: &quot;Juillet&quot;,&#10;  &quot;august&quot;: &quot;Août&quot;,&#10;  &quot;september&quot;: &quot;Septembre&quot;,&#10;  &quot;october&quot;: &quot;Octobre&quot;,&#10;  &quot;november&quot;: &quot;Novembre&quot;,&#10;  &quot;december&quot;: &quot;Décembre&quot;,&#10;  &quot;am&quot;: &quot;AM&quot;,&#10;  &quot;pm&quot;: &quot;PM&quot;,&#10;  &quot;select_date_time&quot;: &quot;Sélectionner la date et l'heure&quot;,&#10;  &quot;select_date_time_description&quot;: &quot;Choisissez votre date et heure préférées pour le rendez-vous.&quot;,&#10;  &quot;appointment_duration&quot;: &quot;Durée du rendez-vous&quot;,&#10;  &quot;available_time_slots&quot;: &quot;Créneaux horaires disponibles&quot;,&#10;  &quot;or_set_custom_time&quot;: &quot;Ou définir une heure personnalisée&quot;,&#10;  &quot;selected_appointment_time&quot;: &quot;Heure de rendez-vous sélectionnée&quot;,&#10;  &quot;continue_to_patient_selection&quot;: &quot;Continuer vers la sélection du patient&quot;,&#10;  &quot;for&quot;: &quot;pour&quot;,&#10;  &quot;at&quot;: &quot;à&quot;,&#10;  &quot;back_to_time&quot;: &quot;Retour à l'heure&quot;,&#10;  &quot;search_by_name_email&quot;: &quot;Rechercher par nom ou e-mail...&quot;,&#10;  &quot;or_create_new_patient&quot;: &quot;Ou créer un nouveau patient&quot;,&#10;  &quot;back_to_patient_search&quot;: &quot;Retour à la recherche de patient&quot;,&#10;  &quot;confirm_appointment&quot;: &quot;Confirmer le rendez-vous&quot;,&#10;  &quot;back_to_patient&quot;: &quot;Retour au patient&quot;,&#10;&#10;  &quot;settings_saved_successfully&quot;: &quot;Paramètres sauvegardés avec succès&quot;,&#10;  &quot;failed_to_save_settings&quot;: &quot;Échec de la sauvegarde des paramètres&quot;,&#10;  &quot;failed_to_load_settings&quot;: &quot;Échec du chargement des paramètres&quot;,&#10;  &quot;manage_clinic_preferences&quot;: &quot;Gérer les préférences et la configuration de votre clinique&quot;,&#10;  &quot;save_changes&quot;: &quot;Sauvegarder les modifications&quot;,&#10;  &quot;saving&quot;: &quot;Sauvegarde...&quot;,&#10;&#10;  &quot;general&quot;: &quot;Général&quot;,&#10;  &quot;appointments&quot;: &quot;Rendez-vous&quot;,&#10;  &quot;notifications&quot;: &quot;Notifications&quot;,&#10;  &quot;display&quot;: &quot;Affichage&quot;,&#10;&#10;  &quot;localization&quot;: &quot;Localisation&quot;,&#10;  &quot;language&quot;: &quot;Langue&quot;,&#10;  &quot;country&quot;: &quot;Pays&quot;,&#10;  &quot;timezone&quot;: &quot;Fuseau horaire&quot;,&#10;&#10;  &quot;clinic_information&quot;: &quot;Informations de la clinique&quot;,&#10;  &quot;clinic_name&quot;: &quot;Nom de la clinique&quot;,&#10;  &quot;clinic_address&quot;: &quot;Adresse&quot;,&#10;  &quot;clinic_phone&quot;: &quot;Téléphone&quot;,&#10;  &quot;clinic_email&quot;: &quot;E-mail&quot;,&#10;  &quot;enter_clinic_name&quot;: &quot;Entrez le nom de la clinique&quot;,&#10;  &quot;enter_clinic_address&quot;: &quot;Entrez l'adresse de la clinique&quot;,&#10;  &quot;enter_phone_number&quot;: &quot;Entrez le numéro de téléphone&quot;,&#10;  &quot;enter_email_address&quot;: &quot;Entrez l'adresse e-mail&quot;,&#10;&#10;  &quot;working_hours&quot;: &quot;Heures de travail&quot;,&#10;  &quot;default_appointment_duration&quot;: &quot;Durée par défaut du rendez-vous&quot;,&#10;  &quot;start_time&quot;: &quot;Heure de début&quot;,&#10;  &quot;end_time&quot;: &quot;Heure de fin&quot;,&#10;  &quot;working_days&quot;: &quot;Jours de travail&quot;,&#10;  &quot;minutes&quot;: &quot;minutes&quot;,&#10;  &quot;hour&quot;: &quot;heure&quot;,&#10;  &quot;hours&quot;: &quot;heures&quot;,&#10;  &quot;day&quot;: &quot;jour&quot;,&#10;&#10;  &quot;notification_preferences&quot;: &quot;Préférences de notification&quot;,&#10;  &quot;email_notifications&quot;: &quot;Notifications par e-mail&quot;,&#10;  &quot;receive_notifications_email&quot;: &quot;Recevoir des notifications par e-mail&quot;,&#10;  &quot;sms_notifications&quot;: &quot;Notifications SMS&quot;,&#10;  &quot;receive_notifications_sms&quot;: &quot;Recevoir des notifications par SMS&quot;,&#10;  &quot;appointment_reminders&quot;: &quot;Rappels de rendez-vous&quot;,&#10;  &quot;send_reminders_before&quot;: &quot;Envoyer des rappels avant les rendez-vous&quot;,&#10;  &quot;reminder_time&quot;: &quot;Heure du rappel&quot;,&#10;  &quot;minutes_before&quot;: &quot;minutes avant&quot;,&#10;  &quot;before&quot;: &quot;avant&quot;,&#10;&#10;  &quot;display_preferences&quot;: &quot;Préférences d'affichage&quot;,&#10;  &quot;date_format&quot;: &quot;Format de date&quot;,&#10;  &quot;time_format&quot;: &quot;Format d'heure&quot;,&#10;  &quot;currency&quot;: &quot;Devise&quot;,&#10;  &quot;temperature_unit&quot;: &quot;Unité de température&quot;,&#10;  &quot;show_weather_widget&quot;: &quot;Afficher le widget météo&quot;,&#10;  &quot;display_weather_dashboard&quot;: &quot;Afficher les informations météo sur le tableau de bord&quot;,&#10;  &quot;hour_format_12&quot;: &quot;12 heures (AM/PM)&quot;,&#10;  &quot;hour_format_24&quot;: &quot;24 heures&quot;,&#10;  &quot;celsius&quot;: &quot;Celsius (°C)&quot;,&#10;  &quot;fahrenheit&quot;: &quot;Fahrenheit (°F)&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/authService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/authService.ts" />
              <option name="originalContent" value="import { API_CONFIG, buildApiUrl } from '../config/api';&#10;import { LoginRequest, LoginResponse } from '../types/Auth';&#10;&#10;class AuthService {&#10;  private static instance: AuthService;&#10;&#10;  public static getInstance(): AuthService {&#10;    if (!AuthService.instance) {&#10;      AuthService.instance = new AuthService();&#10;    }&#10;    return AuthService.instance;&#10;  }&#10;&#10;  async login(credentials: LoginRequest): Promise&lt;LoginResponse&gt; {&#10;    try {&#10;      const response = await fetch(buildApiUrl('/api/v1/auth/login'), {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify(credentials),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        // Try to parse error message from response&#10;        let errorMessage = 'Login failed';&#10;        try {&#10;          const errorData = await response.json();&#10;          errorMessage = errorData.message || errorData.detail || 'Invalid credentials';&#10;        } catch {&#10;          // Fallback to status-based messages if JSON parsing fails&#10;          switch (response.status) {&#10;            case 401:&#10;              errorMessage = 'Invalid email or password';&#10;              break;&#10;            case 403:&#10;              errorMessage = 'Access denied. Please contact administrator';&#10;              break;&#10;            case 429:&#10;              errorMessage = 'Too many login attempts. Please try again later';&#10;              break;&#10;            case 500:&#10;              errorMessage = 'Server error. Please try again later';&#10;              break;&#10;            default:&#10;              errorMessage = 'Login failed. Please try again';&#10;          }&#10;        }&#10;        throw new Error(errorMessage);&#10;      }&#10;&#10;      const data: LoginResponse = await response.json();&#10;&#10;      // Store user data in localStorage&#10;      localStorage.setItem('user', JSON.stringify(data));&#10;      localStorage.setItem('isAuthenticated', 'true');&#10;&#10;      return data;&#10;    } catch (error) {&#10;      // If it's already our custom error, re-throw it&#10;      if (error instanceof Error) {&#10;        throw error;&#10;      }&#10;      // Handle network errors or other unexpected errors&#10;      throw new Error('Network error. Please check your connection and try again');&#10;    }&#10;  }&#10;&#10;  logout(): void {&#10;    localStorage.removeItem('user');&#10;    localStorage.removeItem('isAuthenticated');&#10;  }&#10;&#10;  getCurrentUser(): LoginResponse | null {&#10;    const userStr = localStorage.getItem('user');&#10;    return userStr ? JSON.parse(userStr) : null;&#10;  }&#10;&#10;  isAuthenticated(): boolean {&#10;    return localStorage.getItem('isAuthenticated') === 'true';&#10;  }&#10;&#10;  getDoctorId(): string | null {&#10;    const user = this.getCurrentUser();&#10;    console.log('Current user data:', user); // Debug log&#10;    console.log('User data type:', typeof user); // Debug log&#10;    console.log('User keys:', user ? Object.keys(user) : 'null'); // Debug log&#10;&#10;    const doctorId = user?.doctor_id || null;&#10;    return doctorId;&#10;  }&#10;}&#10;&#10;export const authService = AuthService.getInstance();&#10;" />
              <option name="updatedContent" value="import { API_CONFIG, buildApiUrl } from '../config/api';&#10;import { LoginRequest, LoginResponse } from '../types/Auth';&#10;&#10;class AuthService {&#10;  private static instance: AuthService;&#10;&#10;  public static getInstance(): AuthService {&#10;    if (!AuthService.instance) {&#10;      AuthService.instance = new AuthService();&#10;    }&#10;    return AuthService.instance;&#10;  }&#10;&#10;  async login(credentials: LoginRequest): Promise&lt;LoginResponse&gt; {&#10;    try {&#10;      const response = await fetch(buildApiUrl('/api/v1/auth/login'), {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify(credentials),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        // Try to parse error message from response&#10;        let errorMessage = 'Login failed';&#10;        try {&#10;          const errorData = await response.json();&#10;          errorMessage = errorData.message || errorData.detail || 'Invalid credentials';&#10;        } catch {&#10;          // Fallback to status-based messages if JSON parsing fails&#10;          switch (response.status) {&#10;            case 401:&#10;              errorMessage = 'Invalid email or password';&#10;              break;&#10;            case 403:&#10;              errorMessage = 'Access denied. Please contact administrator';&#10;              break;&#10;            case 429:&#10;              errorMessage = 'Too many login attempts. Please try again later';&#10;              break;&#10;            case 500:&#10;              errorMessage = 'Server error. Please try again later';&#10;              break;&#10;            default:&#10;              errorMessage = 'Login failed. Please try again';&#10;          }&#10;        }&#10;        throw new Error(errorMessage);&#10;      }&#10;&#10;      const data: LoginResponse = await response.json();&#10;&#10;      // Store user data in localStorage&#10;      localStorage.setItem('user', JSON.stringify(data));&#10;      localStorage.setItem('isAuthenticated', 'true');&#10;&#10;      return data;&#10;    } catch (error) {&#10;      // If it's already our custom error, re-throw it&#10;      if (error instanceof Error) {&#10;        throw error;&#10;      }&#10;      // Handle network errors or other unexpected errors&#10;      throw new Error('Network error. Please check your connection and try again');&#10;    }&#10;  }&#10;&#10;  logout(): void {&#10;    localStorage.removeItem('user');&#10;    localStorage.removeItem('isAuthenticated');&#10;  }&#10;&#10;  getCurrentUser(): LoginResponse | null {&#10;    const userStr = localStorage.getItem('user');&#10;    return userStr ? JSON.parse(userStr) : null;&#10;  }&#10;&#10;  isAuthenticated(): boolean {&#10;    return localStorage.getItem('isAuthenticated') === 'true';&#10;  }&#10;&#10;  getDoctorId(): string | null {&#10;    const user = this.getCurrentUser();&#10;    console.log('Current user data:', user); // Debug log&#10;    console.log('User data type:', typeof user); // Debug log&#10;    console.log('User keys:', user ? Object.keys(user) : 'null'); // Debug log&#10;&#10;    // Use 'id' field as the doctor ID since that's what the login API returns&#10;    const doctorId = user?.id || null;&#10;    console.log('Doctor ID extracted:', doctorId); // Debug log&#10;    return doctorId;&#10;  }&#10;}&#10;&#10;export const authService = AuthService.getInstance();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/settingsService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/settingsService.ts" />
              <option name="originalContent" value="import { API_CONFIG, buildApiUrl } from '../config/api';&#10;import { Settings, SettingsUpdate, SettingsFieldValues } from '../types/Settings';&#10;import { authService } from './authService';&#10;&#10;    return this.cachedSettings !== null &amp;&amp;&#10;           this.cacheTimestamp !== null &amp;&amp;&#10;           (Date.now() - this.cacheTimestamp) &lt; this.CACHE_DURATION;&#10;&#10;  /**&#10;   * Clear the settings cache&#10;   * Check if cached settings are still valid&#10;  static clearCache(): void {&#10;    this.cachedSettings = null;&#10;    return this.cachedSettings !== null &amp;&amp;&#10;           this.cacheTimestamp !== null &amp;&amp;&#10;   * Get current settings for the authenticated doctor (with caching)&#10;   */&#10;  static async getSettings(forceRefresh: boolean = false): Promise&lt;Settings&gt; {&#10;    // Return cached settings if valid and not forcing refresh&#10;    if (!forceRefresh &amp;&amp; this.isCacheValid()) {&#10;      return this.cachedSettings!;&#10;    }&#10;&#10;    try {&#10;      console.log('Doctor ID retrieved:', doctorId); // Debug log&#10;&#10;      if (!doctorId) {&#10;        throw new Error('Doctor ID not found. Please log in again.');&#10;      }&#10;&#10;        throw new Error(`Failed to fetch settings: ${response.status} ${response.statusText}`);&#10;      }&#10;&#10;      const data: Settings = await response.json();&#10;      console.log('Settings data received:', data); // Debug log&#10;&#10;      const doctorId = authService.getDoctorId();&#10;      console.log('Doctor ID retrieved:', doctorId); // Debug log&#10;      this.cachedSettings = data;&#10;      if (!doctorId) {&#10;&#10;      return data;&#10;    } catch (error) {&#10;      const url = buildApiUrl(`/api/v1/settings/${doctorId}`);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Get clinic name from cached settings (fast access)&#10;   */&#10;  static getClinicName(): string | null {&#10;    return this.cachedSettings?.clinic_name || null;&#10;  }&#10;&#10;&#10;      // Cache the settings&#10;   */&#10;  static async getSettingsFieldValues(): Promise&lt;SettingsFieldValues&gt; {&#10;&#10;      console.log('Making request to:', url); // Debug log&#10;&#10;      const response = await fetch(url);&#10;      console.log('Field values response status:', response.status); // Debug log&#10;&#10;      if (!response.ok) {&#10;        throw new Error(`Failed to fetch settings field values: ${response.status} ${response.statusText}`);&#10;      }&#10;&#10;      const data: SettingsFieldValues = await response.json();&#10;      console.log('Field values data received:', data); // Debug log&#10;  /**&#10;   * Update settings&#10;   */&#10;  static async updateSettings(updates: SettingsUpdate): Promise&lt;Settings&gt; {&#10;    try {&#10;      const doctorId = authService.getDoctorId();&#10;      if (!doctorId) {&#10;        throw new Error('Doctor ID not found. Please log in again.');&#10;      }&#10;&#10;      const response = await fetch(buildApiUrl(`/api/v1/settings/${doctorId}`), {&#10;        method: 'PUT',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify(updates),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error('Failed to update settings');&#10;      }&#10;&#10;      const data: Settings = await response.json();&#10;&#10;      // Update cache with new settings&#10;      this.cachedSettings = data;&#10;      this.cacheTimestamp = Date.now();&#10;&#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error updating settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Export settings as a JSON file blob&#10;   */&#10;  static async exportSettings(): Promise&lt;Blob&gt; {&#10;    try {&#10;      const settings = await this.getSettings();&#10;      const exportData = {&#10;        exportDate: new Date().toISOString(),&#10;        version: '1.0',&#10;        settings: settings&#10;      };&#10;&#10;      const jsonString = JSON.stringify(exportData, null, 2);&#10;      return new Blob([jsonString], { type: 'application/json' });&#10;    } catch (error) {&#10;&#10;      throw error;&#10;    }&#10;  }&#10;&#10;    try {&#10;      const fileContent = await this.readFileAsText(file);&#10;      const importData = JSON.parse(fileContent);&#10;&#10;      // Validate the imported data structure&#10;      if (!importData.settings) {&#10;        throw new Error('Invalid settings file format');&#10;      }&#10;&#10;      // Update the settings via API&#10;      const updatedSettings = await this.updateSettings(importData.settings);&#10;&#10;      return { data: updatedSettings };&#10;    } catch (error) {&#10;      console.error('Error importing settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Helper method to read file as text&#10;   */&#10;  private static readFileAsText(file: File): Promise&lt;string&gt; {&#10;    return new Promise((resolve, reject) =&gt; {&#10;      const reader = new FileReader();&#10;      reader.onload = (event) =&gt; {&#10;        if (event.target?.result) {&#10;          resolve(event.target.result as string);&#10;        } else {&#10;          reject(new Error('Failed to read file'));&#10;        }&#10;      };&#10;      reader.onerror = () =&gt; reject(new Error('Failed to read file'));&#10;      reader.readAsText(file);&#10;    });&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { API_CONFIG, buildApiUrl } from '../config/api';&#10;import { Settings, SettingsUpdate, SettingsFieldValues } from '../types/Settings';&#10;import { authService } from './authService';&#10;&#10;// Event dispatcher for settings updates&#10;class SettingsEventDispatcher extends EventTarget {&#10;  dispatchSettingsUpdate(settings: Settings) {&#10;    this.dispatchEvent(new CustomEvent('settingsUpdated', { detail: settings }));&#10;  }&#10;}&#10;&#10;export const settingsEventDispatcher = new SettingsEventDispatcher();&#10;&#10;export class SettingsService {&#10;  private static cachedSettings: Settings | null = null;&#10;  private static cacheTimestamp: number | null = null;&#10;  private static cachedDoctorId: string | null = null; // Track which doctor's settings are cached&#10;  private static readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds&#10;&#10;  /**&#10;   * Check if cached settings are still valid for the current doctor&#10;   */&#10;  private static isCacheValid(): boolean {&#10;    const currentDoctorId = authService.getDoctorId();&#10;    return this.cachedSettings !== null &amp;&amp; &#10;           this.cacheTimestamp !== null &amp;&amp; &#10;           this.cachedDoctorId === currentDoctorId &amp;&amp;&#10;           (Date.now() - this.cacheTimestamp) &lt; this.CACHE_DURATION;&#10;  }&#10;&#10;  /**&#10;   * Clear the settings cache&#10;   */&#10;  static clearCache(): void {&#10;    this.cachedSettings = null;&#10;    this.cacheTimestamp = null;&#10;    this.cachedDoctorId = null;&#10;  }&#10;&#10;  /**&#10;   * Get current settings for the authenticated doctor (with caching)&#10;   */&#10;  static async getSettings(forceRefresh: boolean = false): Promise&lt;Settings&gt; {&#10;    const currentDoctorId = authService.getDoctorId();&#10;    &#10;    // Clear cache if doctor changed&#10;    if (this.cachedDoctorId &amp;&amp; this.cachedDoctorId !== currentDoctorId) {&#10;      this.clearCache();&#10;    }&#10;&#10;    // Return cached settings if valid and not forcing refresh&#10;    if (!forceRefresh &amp;&amp; this.isCacheValid()) {&#10;      return this.cachedSettings!;&#10;    }&#10;&#10;    try {&#10;      console.log('Doctor ID retrieved:', currentDoctorId); // Debug log&#10;&#10;      if (!currentDoctorId) {&#10;        throw new Error('Doctor ID not found. Please log in again.');&#10;      }&#10;&#10;      const url = buildApiUrl(`/api/v1/settings/${currentDoctorId}`);&#10;      console.log('Making request to:', url); // Debug log&#10;&#10;      const response = await fetch(url);&#10;      console.log('Response status:', response.status); // Debug log&#10;&#10;      if (!response.ok) {&#10;        throw new Error(`Failed to fetch settings: ${response.status} ${response.statusText}`);&#10;      }&#10;&#10;      const data: Settings = await response.json();&#10;      console.log('Settings data received:', data); // Debug log&#10;      &#10;      // Cache the settings with doctor ID&#10;      this.cachedSettings = data;&#10;      this.cacheTimestamp = Date.now();&#10;      this.cachedDoctorId = currentDoctorId;&#10;      &#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error fetching settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Get clinic name from cached settings (fast access)&#10;   */&#10;  static getClinicName(): string | null {&#10;    const currentDoctorId = authService.getDoctorId();&#10;    &#10;    // Return null if cache is for a different doctor&#10;    if (this.cachedDoctorId !== currentDoctorId) {&#10;      return null;&#10;    }&#10;    &#10;    return this.cachedSettings?.clinic_name || null;&#10;  }&#10;&#10;  /**&#10;   * Get field values for settings options&#10;   */&#10;  static async getSettingsFieldValues(): Promise&lt;SettingsFieldValues&gt; {&#10;    try {&#10;      const url = buildApiUrl('/api/v1/settings/fields/values');&#10;      console.log('Making request to:', url); // Debug log&#10;&#10;      const response = await fetch(url);&#10;      console.log('Field values response status:', response.status); // Debug log&#10;&#10;      if (!response.ok) {&#10;        throw new Error(`Failed to fetch settings field values: ${response.status} ${response.statusText}`);&#10;      }&#10;&#10;      const data: SettingsFieldValues = await response.json();&#10;      console.log('Field values data received:', data); // Debug log&#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error fetching settings field values:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Update settings&#10;   */&#10;  static async updateSettings(updates: SettingsUpdate): Promise&lt;Settings&gt; {&#10;    try {&#10;      const doctorId = authService.getDoctorId();&#10;      if (!doctorId) {&#10;        throw new Error('Doctor ID not found. Please log in again.');&#10;      }&#10;&#10;      const response = await fetch(buildApiUrl(`/api/v1/settings/${doctorId}`), {&#10;        method: 'PUT',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify(updates),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error('Failed to update settings');&#10;      }&#10;&#10;      const data: Settings = await response.json();&#10;      &#10;      // Update cache with new settings&#10;      this.cachedSettings = data;&#10;      this.cacheTimestamp = Date.now();&#10;      this.cachedDoctorId = doctorId;&#10;      &#10;      // Dispatch settings update event&#10;      settingsEventDispatcher.dispatchSettingsUpdate(data);&#10;      &#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error updating settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Export settings as a JSON file blob&#10;   */&#10;  static async exportSettings(): Promise&lt;Blob&gt; {&#10;    try {&#10;      const settings = await this.getSettings();&#10;      const exportData = {&#10;        exportDate: new Date().toISOString(),&#10;        version: '1.0',&#10;        settings: settings&#10;      };&#10;&#10;      const jsonString = JSON.stringify(exportData, null, 2);&#10;      return new Blob([jsonString], { type: 'application/json' });&#10;    } catch (error) {&#10;      console.error('Error exporting settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Import settings from a JSON file&#10;   */&#10;  static async importSettings(file: File): Promise&lt;{ data: Settings }&gt; {&#10;    try {&#10;      const fileContent = await this.readFileAsText(file);&#10;      const importData = JSON.parse(fileContent);&#10;&#10;      // Validate the imported data structure&#10;      if (!importData.settings) {&#10;        throw new Error('Invalid settings file format');&#10;      }&#10;&#10;      // Update the settings via API&#10;      const updatedSettings = await this.updateSettings(importData.settings);&#10;&#10;      return { data: updatedSettings };&#10;    } catch (error) {&#10;      console.error('Error importing settings:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Helper method to read file as text&#10;   */&#10;  private static readFileAsText(file: File): Promise&lt;string&gt; {&#10;    return new Promise((resolve, reject) =&gt; {&#10;      const reader = new FileReader();&#10;      reader.onload = (event) =&gt; {&#10;        if (event.target?.result) {&#10;          resolve(event.target.result as string);&#10;        } else {&#10;          reject(new Error('Failed to read file'));&#10;        }&#10;      };&#10;      reader.onerror = () =&gt; reject(new Error('Failed to read file'));&#10;      reader.readAsText(file);&#10;    });&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/styles/globals.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/styles/globals.css" />
              <option name="originalContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;family=Poppins:wght@300;400;500;600;700;800&amp;display=swap');&#10;@import url('https://fonts.googleapis.com/icon?family=Material+Icons+Round');&#10;&#10;@layer base {&#10;  body {&#10;    @apply bg-neutral-50 text-neutral-800;&#10;    font-family: 'Inter', sans-serif;&#10;    min-height: 100vh;&#10;  }&#10;&#10;  h1, h2, h3, h4, h5, h6 {&#10;    font-family: 'Poppins', sans-serif;&#10;    @apply font-semibold;&#10;  }&#10;&#10;  /* Custom scrollbar */&#10;  ::-webkit-scrollbar {&#10;    width: 6px;&#10;  }&#10;&#10;  ::-webkit-scrollbar-track {&#10;    @apply bg-neutral-100;&#10;  }&#10;&#10;  ::-webkit-scrollbar-thumb {&#10;    @apply bg-primary-400 rounded-full;&#10;  }&#10;&#10;  ::-webkit-scrollbar-thumb:hover {&#10;    @apply bg-primary-500;&#10;  }&#10;}&#10;&#10;@layer components {&#10;  /* Clean card design */&#10;  .glass {&#10;    @apply bg-white/90 backdrop-blur-sm border border-neutral-200 shadow-soft;&#10;  }&#10;&#10;  .glass-dark {&#10;    @apply bg-primary-800/95 backdrop-blur-sm border border-primary-700 shadow-large;&#10;  }&#10;&#10;  /* Card styles */&#10;  .card {&#10;    @apply bg-white rounded-2xl p-6 shadow-medium hover:shadow-large transition-all duration-300 border border-neutral-100;&#10;  }&#10;&#10;  /* Left-side scrollbar for sidebar */&#10;  .sidebar-scroll-left {&#10;    direction: rtl;&#10;  }&#10;&#10;  .sidebar-scroll-left &gt; * {&#10;    direction: ltr;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar {&#10;    width: 6px;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-track {&#10;    @apply bg-primary-700/30 rounded-full;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-thumb {&#10;    @apply bg-primary-400/60 rounded-full;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-thumb:hover {&#10;    @apply bg-primary-400;&#10;  }&#10;&#10;  /* Button styles - clean design with main color */&#10;  .btn-primary {&#10;    @apply bg-primary-500 text-white px-6 py-3 rounded-xl font-medium shadow-primary hover:bg-primary-600 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  .btn-secondary {&#10;    @apply bg-white text-neutral-700 px-6 py-3 rounded-xl font-medium border border-neutral-200 hover:bg-neutral-50 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  .btn-accent {&#10;    @apply bg-primary-600 text-white px-6 py-3 rounded-xl font-medium shadow-medium hover:bg-primary-700 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  /* Input styles */&#10;  .input-modern {&#10;    @apply bg-white border border-neutral-200 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-300;&#10;  }&#10;&#10;  /* Navigation styles */&#10;  .nav-item {&#10;    @apply relative flex items-center space-x-3 px-4 py-3 rounded-xl transition-all duration-300;&#10;  }&#10;&#10;  .nav-item-active {&#10;    @apply bg-primary-100 text-primary-700 shadow-soft;&#10;  }&#10;&#10;  .nav-item-inactive {&#10;    @apply text-neutral-300 hover:bg-primary-700/50 hover:text-white;&#10;  }&#10;&#10;  /* Status indicators - clean colors */&#10;  .status-online {&#10;    @apply bg-success-500;&#10;  }&#10;&#10;  .status-busy {&#10;    @apply bg-error-500;&#10;  }&#10;&#10;  .status-away {&#10;    @apply bg-warning-500;&#10;  }&#10;&#10;  /* Animation elements */&#10;  .floating-element {&#10;    @apply animate-pulse-slow;&#10;  }&#10;&#10;  .fade-in-element {&#10;    @apply animate-fade-in;&#10;  }&#10;&#10;  .slide-up-element {&#10;    @apply animate-slide-up;&#10;  }&#10;}&#10;&#10;/* Calendar Grid Styles */&#10;.calendar-grid {&#10;  @apply grid shadow-large rounded-2xl overflow-hidden bg-white border border-neutral-200;&#10;  grid-template-columns: auto repeat(7, 1fr);&#10;  grid-template-rows: auto repeat(10, 5rem);&#10;}&#10;&#10;.time-label {&#10;  @apply text-right pr-4 text-sm text-neutral-500 bg-neutral-50;&#10;  grid-column: 1;&#10;}&#10;&#10;.day-column {&#10;  @apply relative border-r border-neutral-200 hover:bg-primary-50 transition-all duration-300;&#10;}&#10;&#10;.day-header {&#10;  @apply bg-primary-500 text-white p-4 font-semibold text-center;&#10;}&#10;&#10;/* Material Icons */&#10;.material-icons-round {&#10;  font-family: 'Material Icons Round';&#10;  font-size: 24px;&#10;  display: inline-block;&#10;  line-height: 1;&#10;  text-transform: none;&#10;  letter-spacing: normal;&#10;  word-wrap: normal;&#10;  white-space: nowrap;&#10;  direction: ltr;&#10;  -webkit-font-smoothing: antialiased;&#10;  text-rendering: optimizeLegibility;&#10;  -moz-osx-font-smoothing: grayscale;&#10;  font-feature-settings: 'liga';&#10;}&#10;&#10;/* Loading animations */&#10;.loading-spinner {&#10;  @apply animate-spin rounded-full border-4 border-primary-200 border-t-primary-500;&#10;}&#10;&#10;/* Notification styles */&#10;.notification-success {&#10;  @apply bg-success-50 border-l-4 border-success-500 text-success-800;&#10;}&#10;&#10;.notification-error {&#10;  @apply bg-error-50 border-l-4 border-error-500 text-error-800;&#10;}&#10;&#10;.notification-warning {&#10;  @apply bg-warning-50 border-l-4 border-warning-500 text-warning-800;&#10;}&#10;&#10;.notification-info {&#10;  @apply bg-primary-50 border-l-4 border-primary-500 text-primary-800;&#10;}&#10;&#10;/* Custom utilities */&#10;.text-gradient {&#10;  @apply text-primary-600;&#10;}&#10;&#10;.border-gradient {&#10;  @apply border-2 border-primary-200;&#10;}&#10;" />
              <option name="updatedContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;family=Poppins:wght@300;400;500;600;700;800&amp;display=swap');&#10;@import url('https://fonts.googleapis.com/icon?family=Material+Icons+Round');&#10;&#10;@layer base {&#10;  body {&#10;    @apply bg-neutral-50 text-neutral-800;&#10;    font-family: 'Inter', sans-serif;&#10;    min-height: 100vh;&#10;  }&#10;&#10;  h1, h2, h3, h4, h5, h6 {&#10;    font-family: 'Poppins', sans-serif;&#10;    @apply font-semibold;&#10;  }&#10;&#10;  /* Custom scrollbar */&#10;  ::-webkit-scrollbar {&#10;    width: 6px;&#10;  }&#10;&#10;  ::-webkit-scrollbar-track {&#10;    @apply bg-neutral-100;&#10;  }&#10;&#10;  ::-webkit-scrollbar-thumb {&#10;    @apply bg-primary-400 rounded-full;&#10;  }&#10;&#10;  ::-webkit-scrollbar-thumb:hover {&#10;    @apply bg-primary-500;&#10;  }&#10;}&#10;&#10;@layer components {&#10;  /* Clean card design */&#10;  .glass {&#10;    @apply bg-white/90 backdrop-blur-sm border border-neutral-200 shadow-soft;&#10;  }&#10;&#10;  .glass-dark {&#10;    @apply bg-primary-800/95 backdrop-blur-sm border border-primary-700 shadow-large;&#10;  }&#10;&#10;  /* Card styles */&#10;  .card {&#10;    @apply bg-white rounded-2xl p-6 shadow-medium hover:shadow-large transition-all duration-300 border border-neutral-100;&#10;  }&#10;&#10;  /* Left-side scrollbar for sidebar */&#10;  .sidebar-scroll-left {&#10;    direction: rtl;&#10;  }&#10;&#10;  .sidebar-scroll-left &gt; * {&#10;    direction: ltr;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar {&#10;    width: 6px;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-track {&#10;    @apply bg-primary-700/30 rounded-full;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-thumb {&#10;    @apply bg-primary-400/60 rounded-full;&#10;  }&#10;&#10;  .sidebar-scroll-left::-webkit-scrollbar-thumb:hover {&#10;    @apply bg-primary-400;&#10;  }&#10;&#10;  /* Button styles - clean design with main color */&#10;  .btn-primary {&#10;    @apply bg-primary-500 text-white px-6 py-3 rounded-xl font-medium shadow-primary hover:bg-primary-600 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  .btn-secondary {&#10;    @apply bg-white text-neutral-700 px-6 py-3 rounded-xl font-medium border border-neutral-200 hover:bg-neutral-50 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  .btn-accent {&#10;    @apply bg-primary-600 text-white px-6 py-3 rounded-xl font-medium shadow-medium hover:bg-primary-700 hover:scale-105 transition-all duration-300 ease-out;&#10;  }&#10;&#10;  /* Input styles */&#10;  .input-modern {&#10;    @apply bg-white border border-neutral-200 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-300;&#10;  }&#10;&#10;  /* Navigation styles */&#10;  .nav-item {&#10;    @apply relative flex items-center space-x-3 px-4 py-3 rounded-xl transition-all duration-300;&#10;  }&#10;&#10;  .nav-item-active {&#10;    @apply bg-primary-600/90 text-white shadow-medium;&#10;  }&#10;&#10;  .nav-item-inactive {&#10;    @apply text-primary-200 hover:bg-primary-700/50 hover:text-white;&#10;  }&#10;&#10;  /* Status indicators - clean colors */&#10;  .status-online {&#10;    @apply bg-success-500;&#10;  }&#10;&#10;  .status-busy {&#10;    @apply bg-error-500;&#10;  }&#10;&#10;  .status-away {&#10;    @apply bg-warning-500;&#10;  }&#10;&#10;  /* Animation elements */&#10;  .floating-element {&#10;    @apply animate-pulse-slow;&#10;  }&#10;&#10;  .fade-in-element {&#10;    @apply animate-fade-in;&#10;  }&#10;&#10;  .slide-up-element {&#10;    @apply animate-slide-up;&#10;  }&#10;}&#10;&#10;/* Calendar Grid Styles */&#10;.calendar-grid {&#10;  @apply grid shadow-large rounded-2xl overflow-hidden bg-white border border-neutral-200;&#10;  grid-template-columns: auto repeat(7, 1fr);&#10;  grid-template-rows: auto repeat(10, 5rem);&#10;}&#10;&#10;.time-label {&#10;  @apply text-right pr-4 text-sm text-neutral-500 bg-neutral-50;&#10;  grid-column: 1;&#10;}&#10;&#10;.day-column {&#10;  @apply relative border-r border-neutral-200 hover:bg-primary-50 transition-all duration-300;&#10;}&#10;&#10;.day-header {&#10;  @apply bg-primary-500 text-white p-4 font-semibold text-center;&#10;}&#10;&#10;/* Material Icons */&#10;.material-icons-round {&#10;  font-family: 'Material Icons Round';&#10;  font-size: 24px;&#10;  display: inline-block;&#10;  line-height: 1;&#10;  text-transform: none;&#10;  letter-spacing: normal;&#10;  word-wrap: normal;&#10;  white-space: nowrap;&#10;  direction: ltr;&#10;  -webkit-font-smoothing: antialiased;&#10;  text-rendering: optimizeLegibility;&#10;  -moz-osx-font-smoothing: grayscale;&#10;  font-feature-settings: 'liga';&#10;}&#10;&#10;/* Loading animations */&#10;.loading-spinner {&#10;  @apply animate-spin rounded-full border-4 border-primary-200 border-t-primary-500;&#10;}&#10;&#10;/* Notification styles */&#10;.notification-success {&#10;  @apply bg-success-50 border-l-4 border-success-500 text-success-800;&#10;}&#10;&#10;.notification-error {&#10;  @apply bg-error-50 border-l-4 border-error-500 text-error-800;&#10;}&#10;&#10;.notification-warning {&#10;  @apply bg-warning-50 border-l-4 border-warning-500 text-warning-800;&#10;}&#10;&#10;.notification-info {&#10;  @apply bg-primary-50 border-l-4 border-primary-500 text-primary-800;&#10;}&#10;&#10;/* Custom utilities */&#10;.text-gradient {&#10;  @apply text-primary-600;&#10;}&#10;&#10;.border-gradient {&#10;  @apply border-2 border-primary-200;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types/Auth.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types/Auth.ts" />
              <option name="originalContent" value="export interface LoginRequest {&#10;  email: string;&#10;  password: string;&#10;}&#10;&#10;export interface LoginResponse {&#10;  last_name: string;&#10;  clinic_name: string;&#10;  doctor_id: string;&#10;  doctor_id: string;&#10;}&#10;&#10;export interface AuthState {&#10;  isAuthenticated: boolean;&#10;  user: LoginResponse | null;&#10;  token: string | null;&#10;}&#10;" />
              <option name="updatedContent" value="export interface LoginRequest {&#10;  email: string;&#10;  password: string;&#10;}&#10;&#10;export interface LoginResponse {&#10;  id: string;&#10;  first_name: string;&#10;  last_name: string;&#10;  clinic_name: string;&#10;}&#10;&#10;export interface AuthState {&#10;  isAuthenticated: boolean;&#10;  user: LoginResponse | null;&#10;  token: string | null;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types/Settings.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types/Settings.ts" />
              <option name="originalContent" value="// filepath: /home/imari/IdeaProjects/imari_fe2/src/types/Settings.ts&#10;&#10;export interface Settings {&#10;  // Localization&#10;  language: string;&#10;  country: string;&#10;  city: string;&#10;  timezone: string;&#10;&#10;  // Localization&#10;  clinicName: string;&#10;  clinicAddress: string;&#10;  clinicPhone: string;&#10;  clinicEmail: string;&#10;  &#10;  // Clinic Information&#10;  appointmentDuration: number; // in minutes&#10;  workingHoursStart: string; // HH:MM format&#10;  workingHoursEnd: string; // HH:MM format&#10;  workingDays: string[]; // ['monday', 'tuesday', etc.]&#10;  clinicEmail: string;&#10;  &#10;  emailNotifications: boolean;&#10;  smsNotifications: boolean;&#10;  appointmentReminders: boolean;&#10;  reminderTimeBefore: number; // in minutes&#10;  workingDays: string[]; // ['monday', 'tuesday', etc.]&#10;  &#10;  dateFormat: string; // 'DD/MM/YYYY' | 'MM/DD/YYYY' | 'YYYY-MM-DD'&#10;  timeFormat: '12h' | '24h';&#10;  currency: string;&#10;  &#10;  // Weather Settings&#10;  showWeather: boolean;&#10;  temperatureUnit: 'celsius' | 'fahrenheit';&#10;  currency: string;&#10;  &#10;  // Weather Settings&#10;  showWeather: boolean;&#10;  temperatureUnit: 'celsius' | 'fahrenheit';&#10;}&#10;&#10;export interface SettingsUpdate {&#10;  [key: string]: any;&#10;}&#10;&#10;export interface Country {&#10;  code: string;&#10;  name: string;&#10;  cities: string[];&#10;}&#10;&#10;export interface Language {&#10;" />
              <option name="updatedContent" value="// filepath: /home/imari/IdeaProjects/imari_fe2/src/types/Settings.ts&#10;&#10;export interface Settings {&#10;  // Clinic Information&#10;  clinic_name: string;&#10;  clinic_address: string;&#10;  clinic_phone: string;&#10;  clinic_email: string;&#10;  &#10;  // Appointment Settings&#10;  appointments_start_time: string; // HH:MM format&#10;  appointments_end_time: string; // HH:MM format&#10;  appointments_working_days: string[]; // ['Monday', 'Tuesday', etc.]&#10;  &#10;  // Notification Settings&#10;  notifications_email: boolean;&#10;  notifications_sms: boolean;&#10;  notifications_appointment_reminder: boolean;&#10;  notifications_reminder_time: number; // in minutes&#10;  &#10;  // Display Settings&#10;  display_date_format: string; // 'DD/MM/YYYY' | 'MM/DD/YYYY' | 'YYYY-MM-DD'&#10;  display_time_format: string; // '12h' | '24h'&#10;  display_currency: string;&#10;  display_temperature_unit: string; // 'celsius' | 'fahrenheit'&#10;  display_language: string;&#10;  &#10;  // IDs&#10;  id: string;&#10;  doctor_id: string;&#10;}&#10;&#10;export interface SettingsUpdate {&#10;  [key: string]: any;&#10;}&#10;&#10;export interface Country {&#10;  code: string;&#10;  name: string;&#10;  cities: string[];&#10;}&#10;&#10;export interface Language {&#10;  code: string;&#10;  name: string;&#10;  nativeName: string;&#10;}&#10;&#10;export interface SettingsFieldValues {&#10;  weekDays: string[];&#10;  dateFormats: string[];&#10;  timeFormats: string[];&#10;  currencies: string[];&#10;  temperatureUnits: string[];&#10;  languages: string[];&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>